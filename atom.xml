<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Serendipity</title>
  
  
  <link href="https://bradtorres.github.io/atom.xml" rel="self"/>
  
  <link href="https://bradtorres.github.io/"/>
  <updated>2024-06-16T06:30:38.839Z</updated>
  <id>https://bradtorres.github.io/</id>
  
  <author>
    <name>BradTorres</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>转移博客声明--最后一篇博客</title>
    <link href="https://bradtorres.github.io/2024/06/16/%E8%BD%AC%E7%A7%BB%E5%8D%9A%E5%AE%A2%E5%A3%B0%E6%98%8E-%E6%9C%80%E5%90%8E%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://bradtorres.github.io/2024/06/16/%E8%BD%AC%E7%A7%BB%E5%8D%9A%E5%AE%A2%E5%A3%B0%E6%98%8E-%E6%9C%80%E5%90%8E%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2024-06-16T06:27:55.000Z</published>
    <updated>2024-06-16T06:30:38.839Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>当时自己真有感觉到是post 的链接出了问题，所以才有报错，但是怎么样都找不到链接的博客。所以直接用vps搭建wordpress。现在我找到了链接的博客，hexo又可以正常使用了，但是我却放弃了。有舍才有得，不想说多么好的话说服自己，我就是放弃hexo选择wordpress，慢慢的迁移博客吧。</p><p>我这里的博客将会全部迁移到新站点，包括我后续也只会在新站点更新。新站点如下</p><p><a href="https://hsuwindow.xyz/">https://hsuwindow.xyz/</a></p><p>新站点很可惜必须科学上网才能看哦。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;p&gt;当时自己真有感觉到是post 的链接出了问题，所以才有报错，但是怎么样都找不到链接的博客。所以直接用vps搭建wordpress。现在我找到了链接的博客，hexo又可以正常使用了，但是我却放弃了。有舍才有得，不想说多么好的话说服自己，我就是放弃hexo选择wordpress，慢慢的迁移博客吧。&lt;/p&gt;
&lt;p&gt;我这里的博客将会全部迁移到新站点，包括我后续也只会在新站点更新。新站点如下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hsuwindow.xyz/&quot;&gt;https://hsuwindow.xyz/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新站点很可惜必须科学上网才能看哦。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://bradtorres.github.io/2024/06/12/hello-world/"/>
    <id>https://bradtorres.github.io/2024/06/12/hello-world/</id>
    <published>2024-06-12T12:03:03.856Z</published>
    <updated>2023-04-11T09:39:10.365Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c0132712a3bce10f46fe04ab233517db910f480ee816b3b068b602c9b2b410df"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="日记间隙随笔" scheme="https://bradtorres.github.io/categories/%E6%97%A5%E8%AE%B0%E9%97%B4%E9%9A%99%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>柳比歇夫</title>
    <link href="https://bradtorres.github.io/2024/06/12/%E6%9F%B3%E6%AF%94%E6%AD%87%E5%A4%AB/"/>
    <id>https://bradtorres.github.io/2024/06/12/%E6%9F%B3%E6%AF%94%E6%AD%87%E5%A4%AB/</id>
    <published>2024-06-12T01:38:17.000Z</published>
    <updated>2024-06-12T07:15:49.485Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>w</p><p>我真的，真的能坚持下去吗？</p><p>好像真的真的什么都做不到了。好想放弃好想哭好不愿意一点意义都没有。全当是老师逼我我还能坚持，但是现在，哪里有那么的人逼自己呢。</p><table><thead><tr><th align="center">timeRange</th><th align="center">Task</th><th align="center">others</th></tr></thead><tbody><tr><td align="center">1147-1203</td><td align="center">把傻卵那个人的论文整合到我的带封面的论文上面去✔</td><td align="center">5min</td></tr><tr><td align="center">1203-1506</td><td align="center">完全合并✔<br />然后把所有评议组给的建议，不管是口头的还是在书面上写的，都改到论文上去。✔</td><td align="center">20min</td></tr><tr><td align="center">1506-1515</td><td align="center">检查一遍格式，✔页面页脚奇数页然后找老师</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">推荐通用讲解还是要全文背诵，自己算是运气比较好的了。</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>评议组老师给的错误：</p><p>2.双面打印目录。也就是说封面，郑重声明，中，英摘要单面打印，，从目录开始双面打印了。</p><p>9.内容没看到Hadoop所起作用，结合李传文教授说的话，那就把基于Hadoop改掉。改成基于Spring Boot 的。然后搜索所有Hadoop的词，改掉一些不太好的。✔</p><p>10.把spark从技术中去掉，然后对spark用上面一样的搜索删除方法✔</p><p>11.基于用户也改掉，免得不一致心里烦✔</p><ol start="12"><li></li></ol><p>按照等情绪的要求。✔</p><p>把那个上传到HDFS放到推荐那里。。一是凑字数，二是Hadoop环境搭建不用放结果，三是可以很好的整块的照抄那个人发的视频。他说啥，我就写啥，反正别人也不看了。全部炒上去了，在看我是狗✔</p><p>第五章图表最后看一次，在看我是狗✔</p><p>13.改那个图片的，商品改成酒店，，，，，，，✔推荐商品改成推荐酒店服务？？？？不可能把，反正我不该代码，没啥酒店服务。就改成可能感兴趣的酒店✔</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;p&gt;w&lt;/p&gt;
&lt;p&gt;我真的，真的能坚持下去吗？&lt;/p&gt;
&lt;p&gt;好像真的真的什么都做不到了。好想放弃好想哭好不愿意一点意义都没有。全当是老师逼我我还能坚持，但是现在，哪里有那么的人逼自己呢。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;timeRange&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Task&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;others&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1147-1203&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;把傻卵那个人的论文整合到我的带封面的论文上面去✔&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5min&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1203-1506&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;完全合并✔&lt;br&gt;然后把所有评议组给的建议，不管是口头的还是在书面上写的，都改到论文上去。✔&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20min&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1506-1515&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;检查一遍格式，✔页面页脚奇数页然后找老师&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;推荐通用讲解还是要全文背诵，自己算是运气比较好的了。&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu系统安装在移动固态硬盘</title>
    <link href="https://bradtorres.github.io/2024/06/09/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%9C%A8%E7%A7%BB%E5%8A%A8%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/"/>
    <id>https://bradtorres.github.io/2024/06/09/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%9C%A8%E7%A7%BB%E5%8A%A8%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/</id>
    <published>2024-06-09T11:14:22.000Z</published>
    <updated>2024-06-12T01:37:10.735Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Ubuntu系统安装在移动固态硬盘自己的尝试和经验。"><a href="#Ubuntu系统安装在移动固态硬盘自己的尝试和经验。" class="headerlink" title="Ubuntu系统安装在移动固态硬盘自己的尝试和经验。"></a>Ubuntu系统安装在移动固态硬盘自己的尝试和经验。</h1><h2 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h2><p>1.把电脑的源文件上传到百度网盘备份</p><p>2.移动硬盘</p><h2 id="二、过程"><a href="#二、过程" class="headerlink" title="二、过程"></a>二、过程</h2><p>本人为了稳，找了一个在自己电脑装过双系统的室友一起尝试在移动硬盘里面装Ubuntu</p><p>他有一个已经做好做成了系统启动盘的U盘。因此这一部分我就不清楚。</p><p>本次安装过程遇到了以下两个问题。都通过google一下解决了。</p><p>一是RST问题，解决教程如下</p><p><a href="https://blog.csdn.net/qq_50341530/article/details/120310080">戴尔电脑联想电脑 装乌班图（Ubuntu）遇到RST问题完美解决</a></p><p>二是在一的过程里面，不让他进安全模式，而是手动先改成RAID模式，那么在Ubuntu系统进入的时候会出现让你按ctrl + d。你乖乖按之后，会出现一行红字报错。</p><p>解决方法：长按电源20秒，重新启动电脑，先在Bios里面将RAID模式改成AHCI。</p><p>然后进入Ubuntu，发现可以成功进入。然后在进入windos10，发现是安全模式，按照一的解决方案的教程之后的步骤，去掉安全引导选项，重启进入windos10就行了。</p><h2 id="三、后续的使用和慢慢地将win10的开发环境迁移到Ubuntu里面的记录"><a href="#三、后续的使用和慢慢地将win10的开发环境迁移到Ubuntu里面的记录" class="headerlink" title="三、后续的使用和慢慢地将win10的开发环境迁移到Ubuntu里面的记录"></a>三、后续的使用和慢慢地将win10的开发环境迁移到Ubuntu里面的记录</h2><p>4月9日尝试：<br>1.感觉自己电脑的win10的RST还是关掉了。原因是最后在BIOS里面选的还是ACHI。不过能用就行，别乱调整搞得两个系统都用不成了。</p><p>2.不知道为什么Ubuntu里面把整个windos 的文件都复制过去 了。</p><p>但是有的能用，如文档。</p><p>有的用不了 ，例如exe文件。</p><p>3.Ubuntu命令行输入poweroff关机</p><p>4.Ubuntu软件更新了一次，不知道有没有影响</p><p>5.下载了Linux的Clash以及用这个方法下载了Chrome浏览器</p><p><a href="https://linuxstory.org/best-way-to-install-chrome-browser-on-ubuntu-linux/">https://linuxstory.org/best-way-to-install-chrome-browser-on-ubuntu-linux/</a></p><p>6.检查一下在Ubuntu里面修改的文件会不会影响到windows10</p><p>居然影响到了。我搜搜是什么原因。</p><p>搜索  ubuntu里面看到了windows10的文件  这句话，看到了很多类似的情况，但都和我的不是完全符合。</p><p>我也别急，先这样，别出大错就行了。</p><p>没搜到，感觉很玄幻的原因</p><p>可以在Ubuntu里面看到windows10的所有文件和软件，包括C，D，E盘。甚至修改也是能在windows里面生效的。说明Ubuntu里面的并不是windows文件的副本，而是实实在在的Windows文件的源本。</p><p>这样的话，移动硬盘里面的1T空间并没有被浪费，感觉还是能用1T的空间。</p><p>然后这个小bug可能导致一些灵活地处理。？？？</p><p>7.不知道在Chrome浏览器里面的登陆的账号同步，能不能真正做到同步</p><p>我这次尝试的两个平台的的账号名字是BradTorres，邮箱是<a href="mailto:&#x77;&#x69;&#100;&#111;&#x77;&#x68;&#x73;&#x75;&#54;&#50;&#x34;&#102;&#111;&#x72;&#x65;&#x76;&#x65;&#114;&#x40;&#x6f;&#117;&#x74;&#108;&#111;&#x6f;&#x6b;&#x2e;&#x63;&#111;&#x6d;">&#x77;&#x69;&#100;&#111;&#x77;&#x68;&#x73;&#x75;&#54;&#50;&#x34;&#102;&#111;&#x72;&#x65;&#x76;&#x65;&#114;&#x40;&#x6f;&#117;&#x74;&#108;&#111;&#x6f;&#x6b;&#x2e;&#x63;&#111;&#x6d;</a>的那个</p><p>但是我还记得有另外一个名字徐文栋的账号，之后再看看吧。</p><h3 id="8-一些东西的验证"><a href="#8-一些东西的验证" class="headerlink" title="8.一些东西的验证"></a>8.一些东西的验证</h3><p>毕设代码在win10下面依旧能运行</p><p>反正是是在Ubuntu里面装python环境看看。<br>Ubuntu查看电脑空间，希望是差不多1T。果然是的，但是有windows10的d盘和e盘，，却没有c盘</p><h4 id="a-ubuntu安装openjdk18和IDEA"><a href="#a-ubuntu安装openjdk18和IDEA" class="headerlink" title="a.ubuntu安装openjdk18和IDEA"></a>a.ubuntu安装openjdk18和IDEA</h4><p>参考来源：<a href="https://cn.linux-console.net/?p=21404">https://cn.linux-console.net/?p=21404</a><br>安装curl或wget下载器实用程序：</p><p><code>sudo apt update</code><br><code>sudo apt install -y curl wget</code><br>访问 JDK 18 发布页面下载最新的存档。</p><p><code>curl -O https://download.java.net/java/GA/jdk18/43f95e8614114aeaa8e8a5fcf20a682d/36/GPL/openjdk-18_linux-x64_bin.tar.gz</code><br>使用 tar 命令提取下载的文件。</p><p><code>tar xvf openjdk-18_linux-x64_bin.tar.gz</code><br>将生成的文件夹移至 &#x2F;opt 目录。</p><p>sudo mv jdk-18 &#x2F;opt&#x2F;<br>配置Java环境：</p><p><code>sudo tee /etc/profile.d/jdk18.sh &lt;&lt;EOF</code><br><code>export JAVA_HOME=/opt/jdk-18</code><br><code>export PATH=\$PATH:\$JAVA_HOME/bin</code><br><code>EOF</code><br>获取您的配置文件并检查 java 命令</p><p><code>source /etc/profile.d/jdk18.sh</code><br>确认Java版本。</p><p><code>$ echo $JAVA_HOME</code><br><code>/opt/jdk-18</code></p><p><code>$ java -version</code><br><code>openjdk version &quot;18&quot; 2022-03-22</code><br><code>OpenJDK Runtime Environment (build 18+36-2087)</code><br><code>OpenJDK 64-Bit Server VM (build 18+36-2087, mixed mode, sharing)</code></p><p>在linux中，opt目录的位置就在主目录中，也即“&#x2F;opt”；opt是optional的缩写，是“可选”的意思，是给主机额外安装软件所摆放的目录，用来安装附加软件包，是用户级的程序目录，例如任何外部或第三方软件。</p><p>反正目前我的opt目录里面就只有google和jdk-18<br>opt是在&#x2F;下面一级，home也是在&#x2F;下面一级，而主目录文件夹里面只能看到home里面的东西，所以你才找不到opt。？？？？也许，这句话只是我的猜测</p><p>下载IDEA教程<br><a href="https://www.myfreax.com/how-to-install-intellij-idea-on-ubuntu-18-04/">https://www.myfreax.com/how-to-install-intellij-idea-on-ubuntu-18-04/</a><br>这会好象是从snap里面下载的，下载到了哪里我也不清楚<br>然后就是为啥他这个版本不要帐号登陆。我win10上面的也是社区版把。哈哈查看了一下，我的win10的IDEA是ultimate版本，还花了我的钱买了正版账号。感觉是那人的开发环境需要ultimate版本。hhhh。以后用得着的话，再说吧。自己不想管了。</p><p>~的意思就是home文件夹下面的hsuwindow用户里面的东西，目前的想法是把ideaProject放在hsuCoder下面，然后</p><p>先把ubuntu的md文档编辑用具弄好吧。</p><p>还有IDEA的插件放上去</p><p>果然装了Ubuntu出了问题，就是typora通过picgo上传图片到阿里OSS失败了。</p><p>还要找个全新的博客弄的方法。最好把本地的文件都上传到网络上去。但我记得这好像要服务器啥的，，很贵 的。</p><p>哈哈哈， 这个问题先放着吧。 </p><p>插件分别是</p><p>CodeGlance Pro</p><p>CS 61B</p><p>Java Visualizer</p><p>Rainbow Brackets</p><p>Translation</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240610021241105.png" alt="image-20240610021241105"></p><p>然后是看看CS61B那个环境的linux环境配置hhh</p><p>看看CS61A用的是什么开发环境。CS61A有推荐一个文档编辑工具</p><p>ee不知为何，一直卡在Ubuntu的登陆页面循环了。搜索原因</p><p>看是看了上面 的，我感觉我实在profile.d里面修改环境变量的呀</p><p>hhh搞不清楚了，先凑合着用再说，以后再搞这个。<br>我确实进去了ubuntu，然后在profile.d里面才找到了两个自己设置的环境变量。<br>不知道为什么和教程里面现实的不一样，可能有转义字符什么的。反正我先把我看到的结果放到这里，以后出了问题在来处理<br>hsuwindow@hsuwindow-G5-5500:&#x2F;etc&#x2F;profile.d$ cat jdk18.sh<br>export JAVA_HOME&#x3D;&#x2F;opt&#x2F;jdk-18&#x2F;<br>export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</p><p>是yan一下IDEA是否能用，能yongxiazaipython<br>希望装python的时候多注意一下。反正我对比他的图片是没看到我的profile里面有多余的语句的。</p><p>先用这个方法<a href="https://brucetg.github.io/2018/04/30/Ubuntu%E5%BE%AA%E7%8E%AF%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98%E3%80%81%E6%A1%8C%E9%9D%A2%E8%8F%9C%E5%8D%95%E5%92%8C%E4%BE%A7%E8%BE%B9%E6%A0%8F%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/">https://brucetg.github.io/2018/04/30/Ubuntu%E5%BE%AA%E7%8E%AF%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98%E3%80%81%E6%A1%8C%E9%9D%A2%E8%8F%9C%E5%8D%95%E5%92%8C%E4%BE%A7%E8%BE%B9%E6%A0%8F%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</a></p><p>解决方法</p><p><a href="https://cloud.tencent.com/developer/article/1978958">https://cloud.tencent.com/developer/article/1978958</a></p><p><a href="https://blog.csdn.net/ameyume/article/details/6378212">https://blog.csdn.net/ameyume/article/details/6378212</a></p><p><a href="https://bbs.21ic.com/icview-912062-1-1.html">https://bbs.21ic.com/icview-912062-1-1.html</a></p><p>办法如下：</p><p>\1. 进入了登录界面后，不用输入密码，按住Ctrl+Alt+F1（听说F1～F6都行）</p><p>\2. 进入了ubuntu的命令行界面，先输入用户名回车，然后输入密码回车（纯新手，不懂，习惯的直接密码了，折腾了很久）</p><p>3.1 输入sudo vi &#x2F;etc&#x2F;profile，打开了profile文件，将多余的语句删除掉，输入:wq回车保存，输入 sudo reboot重启。</p><p>（</p><p>3.2 另一方法：</p><p>在桌面中操作，</p><p>进入了命令行界面，输完用户名和密码；</p><p>输入startx，进入了桌面界面，使用Alt+T打开终端，在终端中输入sudo gedit &#x2F;etc&#x2F;profile编辑环境变量，将多余的语句删除掉，点保存后关掉，在终端中输入sudo reboot 重启。</p><p>）</p><p>在登录界面输入密码就OK了。</p><p>这是我在网上找的方法，请大神验证一下。。。。</p><p>六月十日六月十一日记录，感觉自己越勤劳，越践行那些过去自己看不上的真理，才发现自己的幸运值。事实上，不是自己幸运，而是因为真理的帮助。我不信佛，不迷信，但真理的作用真的震撼了我。不是自己践行了真理，自己电脑就要重装win10了。整个非常的麻烦。而且硬盘也不会装的进去。也不会趁着有朋友帮助安装ubuntu系统。哈哈哈哈哈哈哈哈哈哈哈。最后一步了。明天找老师，向神向真理服从。你会得到一切。人外有人天外有天。服从就是进步的最快捷径。</p><p>伟大无需多言，电脑修好了。</p><p>运气太好了，找到上传不了picgo的原因了。因为一开始挂了梯子。尤其是这个新梯子，有时候明明是国内线路，但是它切换的很慢很慢，那些网页什么的你要刷新一下才行。那这个picgo估计更加的敏感，所以就频频上传失败。你确保在每次上传图片的时候，把梯子关掉就行了。</p><p>感觉之前那个梯子切换的快，所以就算挂梯子也没问题，但也是有时出现上传失败的情况，只是很少。</p><p>但无论怎么样，不挂梯子上传图片几乎不会出问题，成功率是最高的。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;Ubuntu系统安装在移动固态硬盘自己的尝试和经验。&quot;&gt;&lt;a href=&quot;#Ubuntu系统安装在移动固态硬盘自己的尝试和经验。&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu系统安装在移动固态硬盘自己的尝试和经验。&quot;&gt;&lt;/a&gt;Ubuntu系统安装在移动固态硬盘自己的尝试和经验。&lt;/h1&gt;&lt;h2 id=&quot;一、前期准备&quot;&gt;&lt;a href=&quot;#一、前期准备&quot; class=&quot;headerlink&quot; title=&quot;一、前期准备&quot;&gt;&lt;/a&gt;一、前期准备&lt;/h2&gt;&lt;p&gt;1.把电脑的源文件上传到百度网盘备份&lt;/p&gt;
&lt;p&gt;2.移动硬盘&lt;/p&gt;</summary>
    
    
    
    
    <category term="Ubuntu" scheme="https://bradtorres.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第31天-理论基础-455-376-53</title>
    <link href="https://bradtorres.github.io/2024/06/07/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC31%E5%A4%A9-%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-455-376-53/"/>
    <id>https://bradtorres.github.io/2024/06/07/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC31%E5%A4%A9-%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-455-376-53/</id>
    <published>2024-06-07T08:22:39.000Z</published>
    <updated>2024-06-08T12:13:19.184Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><h2 id="什么是贪心"><a href="#什么是贪心" class="headerlink" title="什么是贪心"></a>什么是贪心</h2><p><strong>贪心的本质是选择每一阶段的局部最优，从而达到全局最优</strong>。</p><p>局部最优推出全局最优，明显的例子就是取钞票的例子。</p><h2 id="贪心的两个极端"><a href="#贪心的两个极端" class="headerlink" title="贪心的两个极端"></a>贪心的两个极端</h2><p>很简单感觉是常识性的东西</p><p>很难感觉人类无法思考出来</p><h2 id="贪心的套路"><a href="#贪心的套路" class="headerlink" title="贪心的套路"></a>贪心的套路</h2><p>贪心无套路，你也无法去总结出一个方法论。见过就会，没见过就不会。</p><p>想清楚局部最优解是什么，然后这个局部最优能不能推出全局最优。</p><p>不想敲代码，动脑筋了。我燃尽了。</p><h2 id="贪心一般解题步骤"><a href="#贪心一般解题步骤" class="headerlink" title="贪心一般解题步骤"></a>贪心一般解题步骤</h2><p>贪心算法一般分为如下四步：</p><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><p>这个四步其实过于理论化了，我们平时在做贪心类的题目 很难去按照这四步去思考，真是有点“鸡肋”。</p><p>做题的时候，只要想清楚 局部最优 是什么，如果推导出全局最优，其实就够了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>不好意思了，贪心没有套路，说白了就是常识性推导加上举反例</strong>。</p><h1 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a><a href="https://leetcode.cn/problems/assign-cookies/">455. 分发饼干</a></h1><p>要sort排序，无脑看成reverse了</p><p>sort是将统一从小到大排序，或者统一从大到小排序。</p><p>reverse就只是单纯的把原本的顺序反过来。所以reverse之后的顺序，要看它原来的顺序。</p><p>下面sort的使用方法转载自</p><p><a href="https://www.cnblogs.com/stones-dream/p/10183210.html">https://www.cnblogs.com/stones-dream/p/10183210.html</a></p><p>sort(first_pointer,first_pointer+n,cmp)</p><p>该函数可以给数组，或者链表list、向量排序。</p><p>实现原理：sort并不是简单的快速排序，它对普通的快速排序进行了优化，此外，它还结合了插入排序和推排序。系统会根据你的数据形式和数据量自动选择合适的排序方法，这并不是说它每次排序只选择一种方法，它是在一次完整排序中不同的情况选用不同方法，比如给一个数据量较大的数组排序，开始采用快速排序，分段递归，分段之后每一段的数据量达到一个较小值后它就不继续往下递归，而是选择插入排序，如果递归的太深，他会选择推排序。</p><p>此函数有3个参数：</p><p>参数1：第一个参数是数组的首地址，一般写上数组名就可以，因为数组名是一个指针常量。</p><p>参数2：第二个参数相对较好理解，即首地址加上数组的长度n（代表尾地址的下一地址）。</p><p>参数3：默认可以不填，如果不填sort会默认按数组升序排序。也就是1,2,3,4排序。也可以自定义一个排序函数，改排序方式为降序什么的，也就是4,3,2,1这样。</p><p>使用此函数需先包含：</p><p>#include <algorithm><br>并且导出命名空间：</p><p>using namespace std;<br>简单例子：对数组A的0~n-1元素进行升序排序，只要写sort(A,A+n)即可；对于向量V也一样，sort(v.begin(),v.end())即可。</p><p>自己编写排序规则函数</p><p>例如：<br>bool compare(int a,int b)<br>{<br>return a&lt;b; &#x2F;&#x2F;升序排列，如果改为return a&gt;b，则为降序</p><p>}<br>sort扩展</p><p>sort不只是能像上面那样简单的使用，我们可以对sort进行扩展，关键就在于第三个参数&lt;cmp比较函数&gt;，我们想降序排列，或者说我不是一个简简单单的数组，而是结构体、类怎么办，下面给出一些方法和例子。</p><p>方法一：定义比较函数（最常用）<br>&#x2F;&#x2F;情况一：数组排列<br>int A[100];<br>bool cmp1(int a,int b)&#x2F;&#x2F;int为数组数据类型<br>{<br>return a&gt;b;&#x2F;&#x2F;降序排列<br>&#x2F;&#x2F;return a&lt;b;&#x2F;&#x2F;默认的升序排列<br>}<br>sort(A,A+100,cmp1);</p><p>&#x2F;&#x2F;情况二：结构体排序<br>Student Stu[100];<br>bool cmp2(Student a,Student b)<br>{<br>return a.id&gt;b.id;&#x2F;&#x2F;按照学号降序排列<br>&#x2F;&#x2F;return a.id&lt;b.id;&#x2F;&#x2F;按照学号升序排列<br>}<br>sort(Stu,Stu+100,cmp2);<br>注：比较方法也可以放在结构体中或类中定义。</p><p>方法二：使用标准库函数</p><p>另外，其实我们还可以再懒一点，在标准库中已经有现成的。它在哪呢？答案是functional，我们include进来试试看。functional提供了一堆基于模板的比较函数对象，它们是：equal_to<Type>、not_equal_to<Type>、greater<Type>、greater_equal<Type>、less<Type>、less_equal<Type>。这些东西的用法看名字就知道了。在这里，我么sort要用到的也只是greater和less就足够了，用法如下：</p><p>● 升序：sort(begin,end,less<data-type>())</p><p>● 降序：sort(begin,end,greater<data-type>())</p><p>缺点：也只是实现简单的排序，结构体不适用。</p><p>#include <iostream><br>#include <cstdio><br>#include <algorithm><br>#include <functional></p><p>using namespace std;<br>&#x2F;&#x2F;简单使用方法<br>sort(A,A+100,greater<int>());&#x2F;&#x2F;降序排列<br>sort(A,A+100,less<int>());&#x2F;&#x2F;升序排列<br>方法三：重载结构体或类的比较运算符</p><p>&#x2F;&#x2F;情况一：在结构体内部重载<br>typedef struct Student{<br>int id;<br>string name;<br>double grade;</p><p>bool operator&lt;(const Student&amp; s)<br>{<br>return id&gt;s.id;&#x2F;&#x2F;降序排列<br>&#x2F;&#x2F;return id&lt;s.id;&#x2F;&#x2F;升序排列<br>}<br>};<br>vector<Student> V;<br>sort(V.begin(),V.end());<br>&#x2F;&#x2F;情况二：在外部重载<br>vector<Student> V;<br>bool operator&lt;(const Student&amp; s1, const Student&amp; s2)<br>{<br>return s1.id&gt;s2.id;&#x2F;&#x2F;降序排列<br>&#x2F;&#x2F;return s1.id&lt;s2.id;&#x2F;&#x2F;升序排列<br>}<br>sort(V.begin(),V.end());<br>注意：一定要重载&lt;运算符，因为系统默认是降序，用的是&lt;运算符。</p><p>方法四：声明比较类（少用）</p><p>struct Less<br>{<br>bool operator()(const Student&amp; s1, const Student&amp; s2)<br>{<br>return s1.id&lt;s2.id; &#x2F;&#x2F;升序排列<br>}<br>};<br>sort(sutVector.begin(),stuVector.end(),Less());<br>一个list（链表）使用sort()实例：</p><p>#include “stdafx.h”<br>#include <iostream><br>#include <list><br>#include <numeric><br>#include <algorithm><br>#include “stdlib.h”<br>#include &lt;stdio.h&gt;</p><p>using namespace std;</p><p>&#x2F;&#x2F;给list起一个别名LISTINT<br>typedef list<int> LISTINT;<br>&#x2F;&#x2F;再起一个别名 LISTCHAR<br>typedef list<int> LISTCHAR;</p><p>int _tmain(int argc, _TCHAR* argv[])<br>{</p><p>&#x2F;&#x2F;用list容器处理整型数据<br>&#x2F;&#x2F;用LISTINT创建一个名为listOne的list对象<br>LISTINT listOne;<br>&#x2F;&#x2F;声明i为迭代器<br>LISTINT::iterator i;</p><p>&#x2F;&#x2F;从前面向listOne容器中添加数据<br>listOne.push_front (2);<br>listOne.push_front (1);</p><p>&#x2F;&#x2F;从队尾向listOne容器中添加数据</p><p>listOne.push_back (5);<br>listOne.push_back (4);<br>listOne.push_back (9);<br>listOne.push_back (7);<br>listOne.push_back (12);</p><p>&#x2F;&#x2F;从前向后显示listOne中的数据,排序前的链表<br>cout&lt;&lt;”listOne.begin()— listOne.end():”&lt;&lt;endl;<br>for (i &#x3D; listOne.begin(); i !&#x3D; listOne.end(); ++i)<br>cout &lt;&lt; *i &lt;&lt; “ “;<br>cout &lt;&lt; endl;</p><p>listOne.sort(); &#x2F;&#x2F;用sort()函数排序,默认升序</p><p>&#x2F;&#x2F;排序完毕后的列表<br>cout&lt;&lt;”listOne.begin()— listOne.end():”&lt;&lt;endl;<br>for (i &#x3D; listOne.begin(); i !&#x3D; listOne.end(); ++i)<br>cout &lt;&lt; *i &lt;&lt; “ “;<br>cout &lt;&lt; endl;</p><p>system(“pause”); &#x2F;&#x2F;按任意键后退出</p><p>return 0;<br>}</p><p>————下面是题解————-</p><p>自己写的代码：尽量用小饼干取满足胃口 小的小孩。这个思路也是可以的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;g, vector&lt;<span class="type">int</span>&gt; &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//自己尝试写的贪心算法</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//感觉有点双指针的意思</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; g.<span class="built_in">size</span>() &amp;&amp; j &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; s.<span class="built_in">size</span>() &amp;&amp; s[j] &lt; g[i]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要么j 越界，要么 j满足最小的满足胃的</span></span><br><span class="line">        <span class="keyword">if</span> (j == s.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kage的想法：大饼干满足胃口大的小孩子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;g, vector&lt;<span class="type">int</span>&gt; &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bingganIndex = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> weikouIndex = g.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; weikouIndex &gt;= <span class="number">0</span>; weikouIndex--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bingganIndex &gt;= <span class="number">0</span> &amp;&amp; s[bingganIndex] &gt;= g[weikouIndex]) &#123;</span><br><span class="line">            result++;</span><br><span class="line">            bingganIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然卡哥这个思路也是对的。但是我总觉得这个时候用for要判断</p><p>控制胃口用for行不行，控制饼干用for行不行。所以还是挺麻烦的。统一用while就好了。因为while不存在下标的加减是由循环控制的， 下标的加减都是你控制的。这样由你控制逻辑清晰，而且你还可以选择加减出现的位置，不像for加减的位置都是固定的导致很不方便。</p><p>按照卡哥想法，用自己写的代码while的逻辑：尽量用大饼干取满足胃口大的小孩</p><p>想不出来，感觉自己下面的代码逻辑自然一些。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;g, vector&lt;<span class="type">int</span>&gt; &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//自己尝试写的贪心算法</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//感觉有点双指针的意思</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; g.<span class="built_in">size</span>() &amp;&amp; j &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; s.<span class="built_in">size</span>() &amp;&amp; s[j] &lt; g[i]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要么j 越界，要么 j满足最小的满足胃的</span></span><br><span class="line">        <span class="keyword">if</span> (j == s.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376. 摆动序列"></a><a href="https://leetcode.cn/problems/wiggle-subsequence/">376. 摆动序列</a></h1>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;理论基础&quot;&gt;&lt;a href=&quot;#理论基础&quot; class=&quot;headerlink&quot; title=&quot;理论基础&quot;&gt;&lt;/a&gt;理论基础&lt;/h1&gt;&lt;h2 id=&quot;什么是贪心&quot;&gt;&lt;a href=&quot;#什么是贪心&quot; class=&quot;headerlink&quot; title=&quot;什么是贪心&quot;&gt;&lt;/a&gt;什么是贪心&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;贪心的本质是选择每一阶段的局部最优，从而达到全局最优&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;局部最优推出全局最优，明显的例子就是取钞票的例子。&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="https://bradtorres.github.io/tags/leetcode/"/>
    
    <category term="代码随想录" scheme="https://bradtorres.github.io/tags/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Cpp49CDay09</title>
    <link href="https://bradtorres.github.io/2024/06/03/Cpp49CDay09/"/>
    <id>https://bradtorres.github.io/2024/06/03/Cpp49CDay09/</id>
    <published>2024-06-03T14:54:07.000Z</published>
    <updated>2024-06-03T14:55:18.827Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="指针的高级应用"><a href="#指针的高级应用" class="headerlink" title="指针的高级应用"></a>指针的高级应用</h1><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>想修改哪个变量，就传递那个变量的地址。</p><h3 id="想修改指针指向的对象–-gt-传递一级指针"><a href="#想修改指针指向的对象–-gt-传递一级指针" class="headerlink" title="想修改指针指向的对象–&gt;传递一级指针"></a>想修改指针指向的对象–&gt;传递一级指针</h3><h3 id="想修改指针变量的值-指针变量的指向-–-gt-传递"><a href="#想修改指针变量的值-指针变量的指向-–-gt-传递" class="headerlink" title="想修改指针变量的值(指针变量的指向)–&gt;传递"></a>想修改指针变量的值(指针变量的指向)–&gt;传递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义节点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_s</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_s</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addNode</span><span class="params">(Node* <span class="built_in">list</span>, <span class="type">int</span> data)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">Node* <span class="built_in">list</span> = <span class="literal">NULL</span>;<span class="comment">// 空链表 </span></span><br><span class="line">Node** plist = &amp;<span class="built_in">list</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> data = <span class="number">0</span>; data &lt; <span class="number">100</span>; data++)</span><br><span class="line">&#123;</span><br><span class="line">addNode(plist, data);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">list</span>-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">addNode</span><span class="params">(Node** plist, <span class="type">int</span> data)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结点</span></span><br><span class="line">Node* newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"><span class="keyword">if</span> (!newnode) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;addNode failed!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化结点</span></span><br><span class="line">newnode-&gt;data = data;</span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line">newnode-&gt;next = *plist;</span><br><span class="line">*plist = newnode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;指针的高级应用&quot;&gt;&lt;a href=&quot;#指针的高级应用&quot; class=&quot;headerlink&quot; title=&quot;指针的高级应用&quot;&gt;&lt;/a&gt;指针的高级应用&lt;/h1&gt;&lt;h2 id=&quot;总结：&quot;&gt;&lt;a href=&quot;#总结：&quot; class=&quot;headerlink&quot; title=&quot;总结：&quot;&gt;&lt;/a&gt;总结：&lt;/h2&gt;&lt;p&gt;想修改哪个变量，就传递那个变量的地址。&lt;/p&gt;
&lt;h3 id=&quot;想修改指针指向的对象–-gt-传递一级指针&quot;&gt;&lt;a href=&quot;#想修改指针指向的对象–-gt-传递一级指针&quot; class=&quot;headerlink&quot; title=&quot;想修改指针指向的对象–&amp;gt;传递一级指针&quot;&gt;&lt;/a&gt;想修改指针指向的对象–&amp;gt;传递一级指针&lt;/h3&gt;</summary>
    
    
    
    
    <category term="C++" scheme="https://bradtorres.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础课-AcWing</title>
    <link href="https://bradtorres.github.io/2024/06/03/Linux%E5%9F%BA%E7%A1%80%E8%AF%BE-AcWing/"/>
    <id>https://bradtorres.github.io/2024/06/03/Linux%E5%9F%BA%E7%A1%80%E8%AF%BE-AcWing/</id>
    <published>2024-06-03T14:18:42.000Z</published>
    <updated>2024-06-03T14:19:34.958Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-常用文件管理命令"><a href="#1-常用文件管理命令" class="headerlink" title="1. 常用文件管理命令"></a>1. 常用文件管理命令</h1><h2 id="常用命令介绍"><a href="#常用命令介绍" class="headerlink" title="常用命令介绍"></a>常用命令介绍</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(1) ctrl c: 取消命令，并且换行</span><br><span class="line">(2) ctrl u: 清空本行命令</span><br><span class="line">(3) tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项</span><br><span class="line">(4) ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件</span><br><span class="line">(5) pwd: 显示当前路径</span><br><span class="line">(6) cd XXX: 进入XXX目录下, cd .. 返回上层目录</span><br><span class="line">(7) cp XXX YYY: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如../dir_c/a.txt，表示上层目录下的dir_c文件夹下的文件a.txt</span><br><span class="line">(8) mkdir XXX: 创建目录XXX</span><br><span class="line">(9) rm XXX: 删除普通文件;  rm XXX -r: 删除文件夹</span><br><span class="line">(10) mv XXX YYY: 将XXX文件移动到YYY，和cp命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令</span><br><span class="line">(11) touch XXX: 创建一个文件</span><br><span class="line">(12) cat XXX: 展示文件XXX中的内容</span><br><span class="line">(13) 复制文本</span><br><span class="line">  windows/Linux下：Ctrl + insert，Mac下：command + c</span><br><span class="line">(14) 粘贴文本</span><br><span class="line">  windows/Linux下：Shift + insert，Mac下：command + v</span><br></pre></td></tr></table></figure><h2 id="创建作业-amp-测试作业的正确性"><a href="#创建作业-amp-测试作业的正确性" class="headerlink" title="创建作业 &amp; 测试作业的正确性"></a>创建作业 &amp; 测试作业的正确性</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">homework 1 create 可以重新创建所有lesson_1的作业</span><br><span class="line">homework 1 create id 可以单独创建lesson_1的第id个作业. e.g.</span><br><span class="line">  homework 1 create 0 可以只重新创建lesson_1的第0个作业</span><br><span class="line">homework 1 test 可以评测lesson_1的所有作业</span><br></pre></td></tr></table></figure><h1 id="第一课笔记"><a href="#第一课笔记" class="headerlink" title="第一课笔记:"></a>第一课笔记:</h1><p>一个terminal窗口就是以个屏幕, 远程连接了一个服务器, 每一个terminal可以连接到任何一个其他服务器上;<br>关掉terminal相当于只是关掉了屏幕, 但远程服务器是一直开着的;</p><p>linux的文件系统:</p><p>根目录: &#x2F;</p><p>bin目录(常用可执行文件命令)<br>etc目录<br>var目录<br>lib目录(安装包, 头文件)<br>home目录(所有用户的家目录)<br>….</p><p>特殊的: .表示当前目录, ..表示上层目录, ~&#x2F;表示家目录;</p><p>路径:<br>绝对路径: 从根目录开始描述;<br>相对路径: 从当前位置开始描述的路径;<br>4.常用命令:<br>ctrl + C: 立刻结束某进程 &#x2F; 指令;<br>ctrl + U: 立刻清空当前行;<br>tab: 补全命令 &#x2F; 文件 &#x2F; 路径;(按两次会先显示出所以满足前缀要求的选项, trie树实现)<br>pwd: 显示当前位置;<br>cd: (change directory) cd + 路径;(默认返回家目录, cd .. 返回上一层目录, cd - 返回上一个待过的目录)<br>ls: 展示当前文件夹; (ll 等价于ls -la)</p><p>参数:<br>-l : 展示详细信息;<br>-h : 人性化的显示详细信息;<br>-a : 显示所有的文件(包括被隐藏的文件, 所有被隐藏的文件都是以.开头的);<br>cp: cp 路径1 路径2; (将路径1内容复制一份放路径2里面, 复制 + 粘贴 + 重命名);<br>touch: 创建一个文件;<br>mkdir: 创建文件夹;(可以加-p创建一系列的文件夹)<br>history: 显示历史用过的指令;<br>rm: 删除, rm xxx: 删除某一文件;rm xxx -r: 删除某文件夹;(支持正则表达式)<br>mv: mv xxx yyy (剪切+ 粘贴)<br>cat: cat xxx(查看xxx文件);</p><p>mkdir dir_a dir_b dir_c;</p><p>转载自</p><p>作者：Peter_5<br>链接：<a href="https://www.acwing.com/activity/content/code/content/1661985/">https://www.acwing.com/activity/content/code/content/1661985/</a></p><h1 id="第一节课笔记"><a href="#第一节课笔记" class="headerlink" title="第一节课笔记"></a>第一节课笔记</h1><h2 id="路径"><a href="#路径" class="headerlink" title="路径:"></a>路径:</h2><p>绝对路径: 从根目录开始描述;<br>相对路径: 从当前位置开始描述的路径;<br>. 当前目录<br>.. 上级目录<br>~&#x2F; &lt;&#x3D;&#x3D;&#x3D;&gt; &#x2F;home&#x2F;acs 家目录</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>ctrl + C: 取消命令，并且换行;<br>ctrl + U: 清空本行命令;<br>tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项;<br>方向键：可以回到上一个命令；</p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件</p><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-l : 展示详细信息;</span><br><span class="line">-h : 人性化的显示详细信息;</span><br><span class="line">-a : 显示所有的文件(包括被隐藏的文件, 所有被隐藏的文件都是以.开头的);</span><br><span class="line">ll 等价于ls -la</span><br></pre></td></tr></table></figure><p>pwd: 显示当前位置;</p><p>cd: cd + 路径;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 默认返回家目录, cd .. 返回上一层目录, cd - 返回上一个待过的目录;</span><br></pre></td></tr></table></figure><p>cp: cp 路径1 路径2;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(将路径1内容复制一份放路径2里面, 复制 + 粘贴 + 重命名);</span><br><span class="line">eg:</span><br><span class="line">cp a/tmp.txt b (复制一份到粘贴到b里面)；</span><br><span class="line">cp a/tmp.txt b/tmp2.txt; (复制一份到粘贴到b里面,并重命名)</span><br><span class="line">如果复制文件夹后面加-r</span><br><span class="line">eg: cp a b -r; (将a复制一份粘贴到b里面)</span><br></pre></td></tr></table></figure><ul><li>表示本文件夹里所有文件</li></ul><p>mkdir a :创建文件夹a<br>mkdir: 创建文件夹;(可以加-p创建一系列的文件夹)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">mkdir /home/acs/a/b (在根目录下创建文件)</span><br><span class="line">mkdir a/b/c -p (在该文件夹下创建a/b/c复合文件)</span><br></pre></td></tr></table></figure><p>history: 显示历史用过的指令;</p><p>rm: 删除,<br>rm xxx: 删除某一文件;<br>rm xxx -r: 删除某文件夹;(支持正则表达式);</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">rm tmp.txt tmp2.txt (删除tmp.txt和tmp2.txt)</span><br><span class="line">rm .txt (删除所有txt文件)</span><br><span class="line">rm a/ (删除a里面所有东西)</span><br></pre></td></tr></table></figure><p>windows彻底删除文件:Shift + Delete;</p><p>mv: mv xxx yyy (剪切+ 粘贴)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">mv a/tmp.txt b/ (将a中tmp.txt文件挪到b文件夹里面)</span><br><span class="line">mv b/tmp.txt a/tmp2.txt (将b中tmp.txt文件挪到a文件夹里面并重命名为tmp2.txt)</span><br><span class="line">mv tmp2.txt tmp.txt (将tmp2.txt重命名为tmp.txt)</span><br></pre></td></tr></table></figure><p>cp与mv区别:cp(复制+粘贴), mv(剪切+粘贴)<br>mkdir与touch区别:mkdir(创建文件夹), touch(创建文件)</p><p>cat: cat xxx(查看xxx文件);</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">cat a/tmp.cpp(查看tmp.cpp文件)</span><br></pre></td></tr></table></figure><p>rm &#x2F;* -rf (删除所有文件)</p><p>作业</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd homework_0</span><br><span class="line">mkdir dir_a dir_b dir_c</span><br></pre></td></tr></table></figure><p>借鉴:<br><a href="https://www.acwing.com/activity/content/code/content/1661985/">https://www.acwing.com/activity/content/code/content/1661985/</a></p><p>转载自<br>链接：<a href="https://www.acwing.com/solution/content/101474/">https://www.acwing.com/solution/content/101474/</a></p><p>、</p><p>testtest是否存在</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;1-常用文件管理命令&quot;&gt;&lt;a href=&quot;#1-常用文件管理命令&quot; class=&quot;headerlink&quot; title=&quot;1. 常用文件管理命令&quot;&gt;&lt;/a&gt;1. 常用文件管理命令&lt;/h1&gt;&lt;h2 id=&quot;常用命令介绍&quot;&gt;&lt;a href=&quot;#常用命令介绍&quot; class=&quot;headerlink&quot; title=&quot;常用命令介绍&quot;&gt;&lt;/a&gt;常用命令介绍&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(1) ctrl c: 取消命令，并且换行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2) ctrl u: 清空本行命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(3) tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(4) ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(5) pwd: 显示当前路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(6) cd XXX: 进入XXX目录下, cd .. 返回上层目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(7) cp XXX YYY: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如../dir_c/a.txt，表示上层目录下的dir_c文件夹下的文件a.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(8) mkdir XXX: 创建目录XXX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(9) rm XXX: 删除普通文件;  rm XXX -r: 删除文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(10) mv XXX YYY: 将XXX文件移动到YYY，和cp命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(11) touch XXX: 创建一个文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(12) cat XXX: 展示文件XXX中的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(13) 复制文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  windows/Linux下：Ctrl + insert，Mac下：command + c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(14) 粘贴文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  windows/Linux下：Shift + insert，Mac下：command + v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;创建作业-amp-测试作业的正确性&quot;&gt;&lt;a href=&quot;#创建作业-amp-测试作业的正确性&quot; class=&quot;headerlink&quot; title=&quot;创建作业 &amp;amp; 测试作业的正确性&quot;&gt;&lt;/a&gt;创建作业 &amp;amp; 测试作业的正确性&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://bradtorres.github.io/tags/Linux/"/>
    
    <category term="AcWing" scheme="https://bradtorres.github.io/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>Python基础课-AcWing</title>
    <link href="https://bradtorres.github.io/2024/06/02/Python%E5%9F%BA%E7%A1%80%E8%AF%BE-AcWing/"/>
    <id>https://bradtorres.github.io/2024/06/02/Python%E5%9F%BA%E7%A1%80%E8%AF%BE-AcWing/</id>
    <published>2024-06-02T14:37:14.000Z</published>
    <updated>2024-06-08T16:01:22.262Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>q</p><p> 其实我也可以从网上复制来水博客，但是留不下的印象的话就没有意义。<strong>网上别的完好的笔记我会以链接的形式放在这里。我这篇博客里面的只会是我自己的理解和自己一个字一个字打出来的笔记</strong>。</p><h1 id="笔记1"><a href="#笔记1" class="headerlink" title="笔记1"></a>笔记1</h1><p>果然自己还是懒得做笔记。直接抓去重要的也不失为一种两得的好方法。转载声明如下</p><p>作者：yxc<br>链接：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9960888/">https://www.acwing.com/file_system/file/content/whole/index/content/9960888/</a><br>来源：AcWing<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><ol start="4"><li>输入</li></ol><p>使用input()函数，可以输入一行内容，返回的类型为str。一般配合split()、map()、int()、float()等函数使用。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())  <span class="comment"># 读入两个整数</span></span><br><span class="line"><span class="built_in">print</span>(a + b)  <span class="comment"># 计算两个数的和</span></span><br></pre></td></tr></table></figure><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603205713950.png" alt="image-20240603205713950"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603205810109.png" alt="image-20240603205810109"></p><ol start="5"><li>输出<br>使用print()函数可以输出多个变量，默认用空格隔开，且行末会默认添加回车。如果想自定义行末字符，可以添加end参数。例如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;x&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c, end=<span class="string">&#x27;!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>部分题目会要求保留若干位小数，此时可以使用round()函数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">12.34567</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">round</span>(x, <span class="number">1</span>)))  <span class="comment"># 保留1位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">round</span>(x, <span class="number">3</span>)))  <span class="comment"># 保留3位小数</span></span><br></pre></td></tr></table></figure><p>另外可以使用格式化字符串，在后面的章节会详细讲解，本章中大家会使用下面用法即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">12.34567</span></span><br><span class="line">y = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = %.1f&quot;</span> % x)  <span class="comment"># 保留1位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = %.3f&quot;</span> % (x * y))  <span class="comment"># 保留3位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = %f, y = %d&quot;</span> % (x, y))  <span class="comment"># 输出整数</span></span><br></pre></td></tr></table></figure><ol start="6"><li>其它函数<br>本章中部分题目会要求开根号，可以使用如下方式：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt  <span class="comment"># 引入开根号函数</span></span><br><span class="line">x = <span class="number">2</span></span><br><span class="line">y = sqrt(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><h1 id="笔记2"><a href="#笔记2" class="headerlink" title="笔记2"></a>笔记2</h1><p>学习语言最好的方式就是<strong>实践和模仿</strong>，每当掌握一个新功能时，就要立即将这个功能<strong>应用到实践</strong>中。——闫学灿</p><p>一、if 语句</p><ol><li>基本if-else语句</li></ol><p>当条件成立时，执行某些语句；否则执行另一些语句。<br>注意：</p><blockquote><p>if和else后需要加上冒号:<br>if语句的代码块需要缩进统一长度，规范写法是缩进4个空格。</p><p>else语句可以省略：</p></blockquote><p>当只有一条语句时，可以写在同一行，但这样写不规范，只要了解即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>: <span class="built_in">print</span>(<span class="string">&quot;%d is big!&quot;</span> % a)</span><br><span class="line"><span class="keyword">else</span>: <span class="built_in">print</span>(<span class="string">&quot;%d is small!&quot;</span> % a)</span><br></pre></td></tr></table></figure><ol start="4"><li>pass 语句<br>pass 语句不执行任何动作。语法上需要一个语句，但程序毋需执行任何动作时，可以使用该语句。例如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 先空出来等以后再实现</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><ol start="5"><li>变量的作用域<br>if语句内部的变量，可以在语句外访问。例如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    max_value = a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    max_value = b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(max_value)</span><br></pre></td></tr></table></figure><p>二、条件表达式<br>(1) 与 and<br>(2) 或 or<br>(3) 非 not</p><p>注意：运算符优先级：<code>not &gt; and &gt; or</code>。</p><p>练习：用一条if语句，判断闰年。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><p>三、三元运算<br>类似于C++、Java中的问号表达式。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">max_value = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="built_in">print</span>(max_value)</span><br></pre></td></tr></table></figure><p>四、match语句<br>python3.10开始新增了match语句。目前作业评测器的Python3采用旧版本，尚未支持match语法。</p><p>注意：</p><p>只有第一个匹配的模式会被执行。且跟C++、Java不同，匹配后只会执行当前模式，不会顺次执行后面的case。<br>可以用 | 表示匹配多个模式。<br>变量名 _ 被作为 通配符 并必定会匹配成功。<br>如果没有 case 匹配成功，则不会执行任何分支。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">status = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> status:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bad request&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not found&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">418</span> | <span class="number">420</span> | <span class="number">422</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m a teapot&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Something&#x27;s wrong with the internet&quot;</span>)</span><br></pre></td></tr></table></figure><p>五、作业题易错点<br>注意if和else语句后一定要加冒号。<br>判断语句内部的代码一定要记得缩进。<br>格式化字符串中想表示%时，需要写%%。<br>Python中交换两个变量，可以用：a, b &#x3D; b, a。<br><strong>Python中的比较运算符支持链式操作，这一点跟C++和Java等语言不同。例如，给三个数排序的代码可以这么写：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">x, y, z = a, b, c</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt;= b &gt;= c:</span><br><span class="line">    <span class="built_in">print</span>(c, b, a)</span><br><span class="line"><span class="keyword">elif</span> a &gt;= c &gt;= b:</span><br><span class="line">    <span class="built_in">print</span>(b, c, a)</span><br><span class="line"><span class="keyword">elif</span> b &gt;= a &gt;= c:</span><br><span class="line">    <span class="built_in">print</span>(c, a, b)</span><br><span class="line"><span class="keyword">elif</span> b &gt;= c &gt;= a:</span><br><span class="line">    <span class="built_in">print</span>(a, c, b)</span><br><span class="line"><span class="keyword">elif</span> c &gt;= a &gt;= b:</span><br><span class="line">    <span class="built_in">print</span>(b, a, c)</span><br><span class="line"><span class="keyword">elif</span> c &gt;= b &gt;= a:</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure><h1 id="笔记3"><a href="#笔记3" class="headerlink" title="笔记3"></a>笔记3</h1><p>一、while循环<br>可以简单理解为循环版的if语句。if语句是判断一次，如果条件成立，则执行后面的语句；while是每次判断，如果条件成立，则执行循环体中的语句，否则停止。</p><p>注意，类似于if语句，while语句也需要满足：</p><p>while<strong>后需要加上冒号</strong>:<br>while<strong>语句的代码块需要缩进统一长度，规范写法是缩进4个空</strong>格。</p><p>正确写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>错误写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">  i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>练习：求斐波那契数列的第n项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fpre = <span class="number">1</span></span><br><span class="line">fpost = <span class="number">1</span></span><br><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fiboc 0 = %d&quot;</span> % fpre)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fiboc 1 = %d&quot;</span> % fpost)</span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    fpre, fpost = fpost, fpre + fpost</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fiboc %d = %d&quot;</span> % (i, fpost))</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>死循环：循环永久执行，无法结束。我们要避免写出死循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">0</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>二、for循环<br>for循环语句用来按<strong>顺序枚举range、字符串等数据类型中的元素。类似于while和if语句，for语句同样需要满足冒号和缩进的要求。</strong></p><p>注意：本节课重在学习for循环，而非<strong>学习列表、元组、集合、字典等复杂数据类型，所以for语句与这些数据类型配合的使用技巧会放到下一章中展</strong>开。</p><ol><li>遍历字符串<br>  for语句可以遍历字符串中的每个字符。例如：</li><li>注意c本身也是字符串类型</li><li>Python目前可以认为没有char类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;python&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 注意c本身也是字符串类型</span></span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;acwing&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure><ol start="2"><li>遍历range<br>  range()函数可以生成等差数列，可以接收1个、2个或者3个整数参数：</li></ol><p>  注意是左闭右开的区间，而且是整数数列</p><p>接收1个整数参数时：range(x)会按顺序返回 <strong>0,<strong>1,2,3,…x−1 这个数列。<br>接收2个整数参数时：range(x, y)会按顺序返回 <strong>x</strong>,x+1,x+2,…,<strong>y−1</strong> 这个数。<br>接收3个整数参数时：range(x, y, z)分为两种情况：<br>z &gt; 0时，按 顺序返回 x,x+z,x+2z,x+3z,… 这个数列中</strong>小于 y</strong> 的所有数。</p><p>到 y - 1，也可能到不了，取决于z</p><p>z &lt; 0时，按顺序返回 x,x+z,x+2z,x+3z,… 这个数列中大于 y 的所有数。</p><p>到 y + 1，也可能到不了，取决于z</p><p>三、跳转语句</p><p>每每讲到这里都会说break和continue的区别。</p><p>我总结一个口诀：continue结束某一次循环的剩余部分。break结束剩余所有循环。自己懂就好，感觉剩余这个词不是很贴切，不过这也不是给零基础的人看的，纯粹是给自己一个记忆的加深，别把自己绕进去了。</p><ol><li>break<br>  可以提前从最近的一层循环中退出，一般与if语句搭配。<br>  例题：判断一个大于1的整数是否是质数。</li></ol><p>  1 既不是质数也不是合数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">is_prime = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">        is_prime = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_prime:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;is prime&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;is not prime&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>四、循环中的else子句和pass语句<br>本节内容用得不多，了解即可。</p><ol><li>循环中的else子句<br>for或while循环可以包括else子句，会在循环结束后执行。<br>不过如果循环是被break结束的，那么else子句就不会执行了。</li></ol><p>例题：判断一个大于1的整数是否是质数。</p><p>n &#x3D; int(input())</p><p>for x in range(2, n):<br>    if n % x &#x3D;&#x3D; 0:<br>        print(“%d &#x3D; %d * %d” % (n, x, n &#x2F;&#x2F; x))<br>        break<br>else:  # 注意else是for语句的子句，所以需要与for语句对齐<br>    print(“%d is a prime number” % n)<br>2. pass语句<br>类似于if语句，当for或者while循环里不想写任何代码时，可以写上pass语句，这个语句不执行任何动作。</p><p>例如：</p><p>for i in range(10):  # 不进行任何操作<br>    pass</p><p>while True:  # 死循环<br>    pass</p><p>五、多层循环<br>while和for循环内的代码块中也可以包含循环语句。</p><p>例题：将1~100打印到一个10 * 10的矩阵中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(k, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure><p>练习：打印 1∼100<br>1<br>∼<br>100<br> 中的所有质数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>):</span><br><span class="line">    is_prime = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            is_prime = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> is_prime:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>六、作业题易错点<br>注意多层for循环中所使用的循环变量尽量使用不同的变量名，防止相互干扰。<br>Python3中求一个数的绝对值，可以使用abs()函数。</p><h1 id="笔记4"><a href="#笔记4" class="headerlink" title="笔记4"></a>笔记4</h1><h2 id="列表的初始化"><a href="#列表的初始化" class="headerlink" title="列表的初始化"></a>列表的初始化</h2><p>列表需要用方括号括起来，中间的元素用逗号隔开，最后一个元素后可以多加一个逗号。</p><p>1.1 直接初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = []  <span class="comment"># 定义一个空列表</span></span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>]  <span class="comment"># 含有2个整数的列表</span></span><br><span class="line">c = [<span class="number">6</span>, <span class="string">&quot;python&quot;</span>, <span class="number">3.14</span>]  <span class="comment"># 含有3个不同类型元素的列表</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure><p>1.2 通过append函数初始化<br>append()函数可以在列表末尾添加一个元素。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># 初始化[0, 0, 0, 0, 0]</span></span><br><span class="line">    a.append(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">n = <span class="number">4</span></span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  <span class="comment"># 初始化[0, 1, 4, 9]</span></span><br><span class="line">    b.append(i * i)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3 通过for语句初始化列表长度和每个位置的数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]  <span class="comment"># 初始化[0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">n = <span class="number">4</span></span><br><span class="line">b = [i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]  <span class="comment"># 初始化[0, 1, 4, 9]</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><p>可以通过下标读&#x2F;写列表中的元素，下标从0开始，也可以是<strong>负数，负数下标</strong>表示的是除以<strong>列表长度的余数</strong>对应的位置。</p><p>负数下标相当于将列表首位相接，然后从0往前数。</p><p>如果列表长度是 n，那么下标只能取 −n∼n−1之间的整数，超出范围会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>])  <span class="comment"># 读取列表中每个位置的值</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">3</span>  <span class="comment"># 给列表中的某个位置写值</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">1</span>])  <span class="comment"># 由于-1 % 3 = 2，所以表示的是a[2]</span></span><br></pre></td></tr></table></figure><h2 id="使用循环语句遍历列表"><a href="#使用循环语句遍历列表" class="headerlink" title="使用循环语句遍历列表"></a>使用循环语句遍历列表</h2><p>可以通过<strong>下标</strong>访问，就是需要i ，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(a[i], end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以通过for … in …直接遍历，就是不需要i，例如：</p><p>但是这种方式只能读取，不能修改。</p><p>个人猜测，或者记忆口诀：感觉原因是x 是 a列表对应的一个元素的 <strong>副本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="列表的切片操作"><a href="#列表的切片操作" class="headerlink" title="列表的切片操作"></a>列表的切片操作</h2><p>列表的切片操作会返回一个新列表。用法：</p><p>a[begin:end] 会返回包含a[begin], a[begin + 1], …, a[end - 1]的列表。</p><p>记忆背诵成左闭右开的区间</p><p>省略begin时，begin的默认值是0。<br>省略end时，end的默认值是列表长度。<br>如果begin或end是负数，表示的是除以列表长度后的余数。<br>例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 输出[1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:])  <span class="comment"># 输出[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">4</span>])  <span class="comment"># 输出[0, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(a[:])  <span class="comment"># 输出[0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># 等价于print(a[1:4])</span></span><br><span class="line">切片也支持写操作：</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>:<span class="number">4</span>] = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列表的复制"><a href="#列表的复制" class="headerlink" title="列表的复制"></a>列表的复制</h2><p>列表跟其他变量类型不同，<strong>如果用等号复制列表，那么原列表和新列表是同一个列表。对新列表修改，会修改原列表的值。例如：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a, b)  <span class="comment"># 会发现a[0]和b[0]都被修改了</span></span><br></pre></td></tr></table></figure><p>使用切片，可以得到一个原列表的<strong>浅拷贝</strong>。此时再修改新列表，原列表就不会发生变化了。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a[:]</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a, b)  <span class="comment"># 会发现a[0]没有被修改</span></span><br></pre></td></tr></table></figure><h2 id="列表的运算"><a href="#列表的运算" class="headerlink" title="列表的运算"></a>列表的运算</h2><p>列表的加法可以将两个列表<strong>拼接</strong>起来，得到一个新列表。<br>列表乘以一个整数，可以将<strong>若干个自身拼接</strong>起来，得到一个新列表。<br>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">c = a + b  <span class="comment"># c相当于a和b的浅拷贝</span></span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># 输出[0, 1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">d = a * <span class="number">3</span>  <span class="comment"># d相当于a的浅拷贝</span></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出[0, 1, 2, 0, 1, 2, 0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">a += [<span class="number">3</span>]  <span class="comment"># 在a的末尾添加一个新元素3</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="列表的常用操作"><a href="#列表的常用操作" class="headerlink" title="列表的常用操作"></a>列表的常用操作</h2><p>假设a是一个列表，则：</p><p><code>len(a)</code> 返回列表长度。<br><code>a.append(x)</code> 在列表末尾添加一个新元素。<br><code>a.pop()</code> 删除列表的最后一个元素,,而且会返回被删除的元素<br><code>a.reverse()</code> 将整个列表翻转。<br><code>a.sort() </code>将整个列表从小到大排序。<br>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))  <span class="comment"># 输出3</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">a.pop()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 将[0, 1, 2, 3]的最后一个数删掉，所以输出[0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">a.reverse()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[2, 1, 0]</span></span><br><span class="line"></span><br><span class="line">a.sort()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 1, 2]</span></span><br></pre></td></tr></table></figure><p>更多详情可以看官方文档</p><p><a href="https://docs.python.org/zh-cn/3/tutorial/index.html">https://docs.python.org/zh-cn/3/tutorial/index.html</a></p><ol start="8"><li>嵌套列表<br>列表中的元素也可以是列表，例如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">matrix = [  <span class="comment"># 列表中的元素也可以是列表</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],  <span class="comment"># 最后一个元素后可以添加逗号</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">matrix[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">99</span>  <span class="comment"># 修改嵌套列表中元素的值</span></span><br><span class="line"><span class="built_in">print</span>(matrix[<span class="number">1</span>][<span class="number">0</span>])  <span class="comment"># 读取嵌套列表中元素的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):  <span class="comment"># 循环打印整个矩阵</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix[i])):</span><br><span class="line">        <span class="built_in">print</span>(matrix[i][j], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()  <span class="comment"># 在行末输出回车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:  <span class="comment"># 循环打印整个矩阵</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> row:</span><br><span class="line">        <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()  <span class="comment"># 在行末输出回车</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>嵌套列表的常用<strong>初始化方</strong>式有两种。</p><p>采用append()函数初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">matrix = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    row = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        row.append(i * <span class="number">3</span> + j)</span><br><span class="line">    matrix.append(row)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更加简单的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[i * <span class="number">3</span> + j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br></pre></td></tr></table></figure><p>采用for语句直接初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[i * <span class="number">3</span> + j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br></pre></td></tr></table></figure><h2 id="作业题扩展内容"><a href="#作业题扩展内容" class="headerlink" title="作业题扩展内容"></a>作业题扩展内容</h2><p>当需要读入一行整数时，可以用：</p><p>a &#x3D; list(map(int, input().split()))</p><p>类似地，当需要读入一行浮点数时，可以用</p><p>a &#x3D; list(map(float, input().split()))</p><p>min(a, b)可以求两个数的最小值。类似得min(a, b, c)可以求三个数的最小值，以此类推。同样地max()可以求最大值。</p><p>a[::-1]可以返回一个逆序的新列表。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;p&gt;q&lt;/p&gt;
&lt;p&gt; 其实我也可以从网上复制来水博客，但是留不下的印象的话就没有意义。&lt;strong&gt;网上别的完好的笔记我会以链接的形式放在这里。我这篇博客里面的只会是我自己的理解和自己一个字一个字打出来的笔记&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;笔记1&quot;&gt;&lt;a href=&quot;#笔记1&quot; class=&quot;headerlink&quot; title=&quot;笔记1&quot;&gt;&lt;/a&gt;笔记1&lt;/h1&gt;&lt;p&gt;果然自己还是懒得做笔记。直接抓去重要的也不失为一种两得的好方法。转载声明如下&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://bradtorres.github.io/tags/Python/"/>
    
    <category term="AcWing" scheme="https://bradtorres.github.io/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>CS50</title>
    <link href="https://bradtorres.github.io/2024/06/02/CS50/"/>
    <id>https://bradtorres.github.io/2024/06/02/CS50/</id>
    <published>2024-06-02T13:29:10.000Z</published>
    <updated>2024-06-03T14:24:08.244Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没绷住，一开始满怀期待的点开打算学习的，结果发现老师讲的太广太散，我目前不太需要这种课程，我先停下来吧。</p><p>一开始想着，跳过这个从CS61A开始，但是根据过去的经验，我一定会高估自己。然后遇到困难就放弃hhhhhh。</p><p>后来网上搜索比对半天，发现自己还是应该看CS50.毕竟自己没有系统学过python，而且好多很多帖子都说看这个，说明CS50认可度很高很高。既然是认可度高的，既然是火的，那做起来就有意义，除了得到学习的知识之外，让别人认可你学的课程，在这个分秒必争，没意义就不做（当然我不是贬义，因为大家都是肉做的，不可能天天做没意义的事情等着饿死）的世界里是尤为重要的。</p><h1 id="导航指南"><a href="#导航指南" class="headerlink" title="导航指南"></a>导航指南</h1><p>这个链接就像一个伟大的导航，几乎是看不完所有到文字视频的</p><p><a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/C/CS50/#_2">https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/C/CS50/#_2</a></p><h1 id="视频表格"><a href="#视频表格" class="headerlink" title="视频表格"></a>视频表格</h1><table><thead><tr><th align="center">serial number</th><th align="center">Title</th><th align="center">Done</th></tr></thead><tbody><tr><td align="center">P1</td><td align="center">哈佛大学介绍</td><td align="center">✔</td></tr><tr><td align="center">P2</td><td align="center">Scratch</td><td align="center">✔</td></tr><tr><td align="center">P3</td><td align="center">C语言</td><td align="center"></td></tr><tr><td align="center">P4</td><td align="center">数组</td><td align="center"></td></tr><tr><td align="center">P5</td><td align="center">算法</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">存储</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;没绷住，一开始满怀期待的点开打算学习的，结果发现老师讲的太广太散，我目前不太需要这种课程，我先停下来吧。&lt;/p&gt;
&lt;p&gt;一开始想着，跳过这个从CS61A开始，但是根据过去的经验，我一定会高估自己。然后遇到困难就放弃hhhhhh。&lt;/p&gt;
&lt;p&gt;后来网上搜索比对半天，发现自己还是应该看CS50.毕竟自己没有系统学过python，而且好多很多帖子都说看这个，说明CS50认可度很高很高。既然是认可度高的，既然是火的，那做起来就有意义，除了得到学习的知识之外，让别人认可你学的课程，在这个分秒必争，没意义就不做（当然我不是贬义，因为大家都是肉做的，不可能天天做没意义的事情等着饿死）的世界里是尤为重要的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CSDIY" scheme="https://bradtorres.github.io/tags/CSDIY/"/>
    
    <category term="CS50" scheme="https://bradtorres.github.io/tags/CS50/"/>
    
  </entry>
  
  <entry>
    <title>CS61A-Structure-and-Interpretation-of-Computer-Programs</title>
    <link href="https://bradtorres.github.io/2024/06/02/CS61A-Structure-and-Interpretation-of-Computer-Programs/"/>
    <id>https://bradtorres.github.io/2024/06/02/CS61A-Structure-and-Interpretation-of-Computer-Programs/</id>
    <published>2024-06-02T13:23:47.000Z</published>
    <updated>2024-06-09T18:08:10.193Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Spring 2024, Instructor: John DeNero</p><p>有意思的链接，希望能带给我坚持下去的兴趣</p><p><a href="https://hdu-cs.wiki/3.%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4%E4%BD%93%E7%B3%BB%E6%9E%84%E5%BB%BA/3.6.1%E4%BB%8ECS61A%E7%9C%8B%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0">https://hdu-cs.wiki/3.%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4%E4%BD%93%E7%B3%BB%E6%9E%84%E5%BB%BA/3.6.1%E4%BB%8ECS61A%E7%9C%8B%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0</a></p><p>伟大的评论区</p><blockquote><p>各位，下面的课程链接是不是上不去了，需要student id了。现在只有最新的24 spring还能上</p><p>2024-06-01 18:34</p></blockquote><p>hhhh，事实上，我发现所有到它所有的课程官方网站都进不去了，要伯克利学生的官方ID账号。所以我只能emmmmmmm</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602222502634.png" alt="image-20240602222502634"></p><p>哈哈啊哈了，四个没有一个上得去</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602222752752.png" alt="image-20240602222752752"></p><p>又逛了一遍评论区，感觉自己最近幸运值拉满了，又找到课程网站？？？也许是.下面这个网站有些锁了，有些没锁，感觉可以学。</p><p><a href="https://cs61a.org/">https://cs61a.org/</a></p><p>但是如果你是类似这种网站地址都话就肯定要伯克利的账号 了可以使用 <a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/">https://inst.eecs.berkeley.edu/~cs61a/fa20/</a> 这个版本来学习</p><p>别人的伟大的作业 </p><p>我写的 Fall 2023 版本的所有资料，包括 Discussions, Homework, Labs 和 Projects 都在<br><a href="https://github.com/cy-Yin/UCBerkeley-CS61A-Fall2023">UCBerkeley-CS61A-Fall2023</a><br>欢迎讨论</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602222854695.png" alt="image-20240602222854695"></p><p>底下太多东西了，但就到这里，，自己要先开始动手</p><p>跟着2024 Spring的时间线学完了，因为每学期的solution都会回收所以最开始找不到官方答案参照和比较一下确实蛮不方便，所以我存了一份2024sp所有的答案（除了projects，官方没给答案），官方的答案有时候确实很enlighting。之后想学的可以考虑一下做这个版本的作业。贴下我的仓库：<br><a href="https://github.com/Kettenkrado/UCB-CS61A">https://github.com/Kettenkrado/UCB-CS61A</a></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602222959165.png" alt="image-20240602222959165"></p><p>啊啊啊果然还是要听完acwing讲课才行</p><p>下面是精翻译的CS61A的视频，比机翻好太多了。</p><p><a href="https://www.bilibili.com/video/BV1ma4y1U76y/?p=5&spm_id_from=pageDriver&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1ma4y1U76y/?p=5&amp;spm_id_from=pageDriver&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p><p>找一下Gradescope的邀请码，不然做不了作业。</p><p>大家都说在本地测试就行了，既然网上每一个人说CS61A的Gradescope邀请码，那就是没有公开。</p><p>在本地测试的命令在下面，太好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ok --local</span><br></pre></td></tr></table></figure><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603172628312.png" alt="image-20240603172628312"></p><p>有文件被锁了。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603172927008.png" alt="image-20240603172927008"></p><p>成功打开，并且做了。<img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603173054877.png" alt="image-20240603173054877"></p><p>这回真的一模一样了，，就在本地测试是完全可以的。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603173323024.png" alt="image-20240603173323024"></p><p>侧面说明，在本地测试是一样的。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603173435193.png" alt="image-20240603173435193"></p><p>事实上，这个里面讲了python ok –local的命令还有很多其他的命令等等<a href="https://cs61a.org/articles/using-ok/#signing-in-with-ok">https://cs61a.org/articles/using-ok/#signing-in-with-ok</a></p><p>找到评论区说的要你enroll的网站了。不是伯克利的学生没他们注册的邮箱，果然还是登不上去网站</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603173951166.png" alt="image-20240603173951166"></p><p>做Hw01的过程中感觉自己上道了。接下来就是学acwing的语法了。</p><p>接下来两个方法</p><p>一是就这github上面的fall20的继续弄，，而是先自己学完acwing的python</p><p>我的建议是</p><p>把github的fall20 的pull下来，留着。等到之后说不定它有开放网站了。这个github上的fall20相当于备用的。</p><p>这下不用pull。不过我还是先看acwing 到Python，不然浪费钱。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;p&gt;Spring 2024, Instructor: John DeNero&lt;/p&gt;
&lt;p&gt;有意思的链接，希望能带给我坚持下去的兴趣&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hdu-cs.wiki/3.%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4%E4%BD%93%E7%B3%BB%E6%9E%84%E5%BB%BA/3.6.1%E4%BB%8ECS61A%E7%9C%8B%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0&quot;&gt;https://hdu-cs.wiki/3.%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4%E4%BD%93%E7%B3%BB%E6%9E%84%E5%BB%BA/3.6.1%E4%BB%8ECS61A%E7%9C%8B%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;伟大的评论区&lt;/p&gt;</summary>
    
    
    
    
    <category term="CSDIY" scheme="https://bradtorres.github.io/tags/CSDIY/"/>
    
    <category term="CS61A" scheme="https://bradtorres.github.io/tags/CS61A/"/>
    
    <category term="Python" scheme="https://bradtorres.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CMU CS15213: CSAPP</title>
    <link href="https://bradtorres.github.io/2024/06/02/CMU-CS15213-CSAPP/"/>
    <id>https://bradtorres.github.io/2024/06/02/CMU-CS15213-CSAPP/</id>
    <published>2024-06-02T11:53:49.000Z</published>
    <updated>2024-06-02T13:30:11.871Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CMU-CS15213-CSAPP"><a href="#CMU-CS15213-CSAPP" class="headerlink" title="CMU CS15213: CSAPP"></a>CMU CS15213: CSAPP</h1><h2 id="课程简介"><a href="#课程简介" class="headerlink" title="课程简介"></a>课程简介</h2><ul><li>所属大学：CMU</li><li>先修要求：CS61A, CS61B</li><li>编程语言：C</li><li>课程难度：🌟🌟🌟🌟🌟</li><li>预计学时：150 小时</li></ul><p>北大购买了这门课的版权并开设了 Introduction to Computer System 这门课，但其实 CSAPP 所有的课程资源和实验代码都能在它的官方主页上访问到（具体参见下方链接）。</p><p>这门课由于过于出名，全世界的码农争相学习，导致其 Project 的答案在网上几乎唾手可得。但如果你真的想锻炼自己的代码能力，希望你不要借鉴任何第三方代码。</p><p>认真学完这一门课，你对计算机系统的理解绝对会上升一个台阶。</p><h2 id="课程资源"><a href="#课程资源" class="headerlink" title="课程资源"></a>课程资源</h2><ul><li>课程网站：<a href="http://csapp.cs.cmu.edu/">http://csapp.cs.cmu.edu/</a></li><li>课程视频：<a href="https://www.bilibili.com/video/BV1iW411d7hd">https://www.bilibili.com/video/BV1iW411d7hd</a></li><li>课程教材：Computer Systems: A Programmer’s Perspective, 3&#x2F;E</li><li>课程作业：11 个 Project，<a href="http://csapp.cs.cmu.edu/3e/labs.html">代码框架全部开源</a></li></ul><p>英语有困难的同学可以参考B站UP主<a href="https://space.bilibili.com/354767108/">九曲阑干</a>对 CSAPP 的<a href="https://www.bilibili.com/video/BV1cD4y1D7uR">中文讲解</a>（据说CMU的中国留学生也在CMU的课堂上看这个视频呢）。另外如果大家在看完 CSAPP 后对书中的第七章链接有一定的疑问，推荐阅读《程序员的自我修养》这本书，书的副标题是链接，装载与库。这本书能够帮助我们完善对程序链接的理解，相信你在看完这本书以后可以对程序的链接，ELF 文件，动态库都将有一个更加深入的理解。十分推荐在读完 CSAPP，对计算机系统有一定的了解以后作为补充资料来阅读。</p><p>有关 Lab 部分，同学们亦可参考 <a href="https://arthals.ink/about-me">Arthals</a> 在北大计算机系统导论（ICS）课程中所做的详尽笔记：</p><ul><li><a href="https://arthals.ink/posts/experience/data-lab">Data Lab</a></li><li><a href="https://arthals.ink/posts/experience/bomb-lab">Bomb Lab</a></li><li><a href="https://arthals.ink/posts/experience/attack-lab">Attack Lab</a></li><li><a href="https://arthals.ink/posts/experience/arch-lab">Arch Lab</a></li><li><a href="https://arthals.ink/posts/experience/cache-lab">Cache Lab</a></li><li><a href="https://arthals.ink/posts/experience/tsh-lab">Tsh Lab</a></li><li><a href="https://arthals.ink/posts/experience/malloc-lab">Malloc Lab</a></li><li><a href="https://arthals.ink/posts/experience/proxy-lab">Proxy Lab</a></li></ul><h1 id="进度1"><a href="#进度1" class="headerlink" title="进度1"></a>进度1</h1><p>第一个学习资源【【CSAPP-深入理解计算机系统】1-1.计算机系统漫游】 <a href="https://www.bilibili.com/video/BV1cD4y1D7uR/?share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1cD4y1D7uR/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p><table><thead><tr><th align="center">九曲阑干的中文讲解</th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">1-1.计算机系统漫游</td><td align="center">ing</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="【CSAPP-深入理解计算机系统】1-1-计算机系统漫游"><a href="#【CSAPP-深入理解计算机系统】1-1-计算机系统漫游" class="headerlink" title="【CSAPP-深入理解计算机系统】1-1.计算机系统漫游"></a>【CSAPP-深入理解计算机系统】1-1.计算机系统漫游</h1><p>讲了个概述，没记笔记。</p><p>感觉以自己的水平看这些东西太难了。之恩那个一步一步慢慢来。下面这个南大的算是很好的，胜在完整性，不会突然一下子难度曲线陡然上升。</p><p>我先做 SICP吧，，感觉比较适合我这样的菜鸡。</p><p>网上别人原话：</p><p>其实国内也是有很不错的课程的，比如南京大学的ICS课程</p><p>配套实验地址如下<a href="https://nju-projectn.github.io/ics-pa-gitbook/ics2021/index.html">https://nju-projectn.github.io/ics-pa-gitbook/ics2021/index.html</a></p><p>课程录像和资料可以在jyywiki.cn&#x2F;ICS&#x2F;2021 上找到</p><p>还有南大本土化了的UCB CS61 A，<a href="https://nju-sicp.bitbucket.io/">https://nju-sicp.bitbucket.io/</a></p><p>南大本土化的课完全找不到对应的视频，，还是直接看看CS61A吧</p><h1 id="一路自学编程搜集的资源"><a href="#一路自学编程搜集的资源" class="headerlink" title="一路自学编程搜集的资源"></a>一路自学编程搜集的资源</h1><p>稀土掘金挖到的好东西。</p><p><a href="https://juejin.cn/post/6952385958226427917">https://juejin.cn/post/6952385958226427917</a></p><p>他这个对我而言更加的系统，更加的有人一步一步知道</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;CMU-CS15213-CSAPP&quot;&gt;&lt;a href=&quot;#CMU-CS15213-CSAPP&quot; class=&quot;headerlink&quot; title=&quot;CMU CS15213: CSAPP&quot;&gt;&lt;/a&gt;CMU CS15213: CSAPP&lt;/h1&gt;&lt;h2 id=&quot;课程简介&quot;&gt;&lt;a href=&quot;#课程简介&quot; class=&quot;headerlink&quot; title=&quot;课程简介&quot;&gt;&lt;/a&gt;课程简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所属大学：CMU&lt;/li&gt;
&lt;li&gt;先修要求：CS61A, CS61B&lt;/li&gt;
&lt;li&gt;编程语言：C&lt;/li&gt;
&lt;li&gt;课程难度：🌟🌟🌟🌟🌟&lt;/li&gt;
&lt;li&gt;预计学时：150 小时&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;北大购买了这门课的版权并开设了 Introduction to Computer System 这门课，但其实 CSAPP 所有的课程资源和实验代码都能在它的官方主页上访问到（具体参见下方链接）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CSDIY" scheme="https://bradtorres.github.io/tags/CSDIY/"/>
    
    <category term="CSAPP" scheme="https://bradtorres.github.io/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>2021CS61BWeek3and4</title>
    <link href="https://bradtorres.github.io/2024/06/02/2021CS61BWeek3and4/"/>
    <id>https://bradtorres.github.io/2024/06/02/2021CS61BWeek3and4/</id>
    <published>2024-06-02T11:44:25.000Z</published>
    <updated>2024-06-02T11:57:10.111Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="2021CS61BWeek3and4"><a href="#2021CS61BWeek3and4" class="headerlink" title="2021CS61BWeek3and4"></a>2021CS61BWeek3and4</h1><h1 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h1><p>24OUT表示以后24的视频非特殊情况，例如21讲的自己不懂，除非特殊情况都不看24的讲课视频。翻译成中文的视频的标题为我下面的VideoName，也尝试过写成官方网站上英文的样子，但是对学习的效率有较大的影响，所以还是写成中文。</p><table><thead><tr><th align="center">VideoName</th><th align="center">Done</th><th align="center">warning</th></tr></thead><tbody><tr><td align="center">sp24</td><td align="center">24OUT</td><td align="center"></td></tr><tr><td align="center">6.DLList, Arrays</td><td align="center">ing</td><td align="center"></td></tr><tr><td align="center">6.现场问答</td><td align="center">扫过</td><td align="center"></td></tr><tr><td align="center">sp24</td><td align="center">24OUT</td><td align="center"></td></tr><tr><td align="center">7.AList,调整大小SList</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">7.现场问答</td><td align="center">扫过</td><td align="center"></td></tr><tr><td align="center">范围，静态，链接列表</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">sp24</td><td align="center">24OUT</td><td align="center"></td></tr><tr><td align="center">8.接口和实现继承</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">8.现场问答</td><td align="center">扫过</td><td align="center"></td></tr><tr><td align="center">sp24</td><td align="center">24OUT</td><td align="center"></td></tr><tr><td align="center">9.扩展，强制类型转换，高阶函数</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">9.现场问答</td><td align="center">扫过</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>还是尽量模拟他们的表格，来一个一个完成任务吧</p><table><thead><tr><th align="center"><strong>Reading</strong></th><th align="center"><strong>Lecture</strong></th><th align="center"><strong>Discussion</strong></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><strong>Discussion</strong></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>对SLList的总结，同时引出DLList</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602192942918.png" alt="image-20240602192942918"></p><h2 id="6-DLLists-Arrays"><a href="#6-DLLists-Arrays" class="headerlink" title="6_DLLists, Arrays"></a>6_DLLists, Arrays</h2><h3 id="3-2-DLList-A-Doubly-Linked-List双向链表"><a href="#3-2-DLList-A-Doubly-Linked-List双向链表" class="headerlink" title="3.2 DLList: A Doubly-Linked List双向链表"></a><a href="https://opendatastructures.org/ods-java/3_2_DLList_Doubly_Linked_Li.html">3.2 DLList: A Doubly-Linked List</a>双向链表</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602193306165.png" alt="image-20240602193306165"></p><p>第二个哨兵</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602193444894.png" alt="image-20240602193444894"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602193548550.png" alt="image-20240602193548550"></p><h3 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602193646982.png" alt="image-20240602193646982"></p><p>双向链表配两个哨兵或者双向循环链表可以避免很多分类的情况。</p><h3 id="双向链表-泛型（Generic-DLLists）"><a href="#双向链表-泛型（Generic-DLLists）" class="headerlink" title="双向链表- 泛型（Generic DLLists）"></a>双向链表- 泛型（<em>Generic DLLists</em>）</h3><p>歇息一会，要写写作业</p><p>然后复习复习。然后就是要换个新的md文档写了，这个typora都开始卡了</p><h1 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h1><p>24OUT表示以后24的视频非特殊情况，例如21讲的自己不懂，除非特殊情况都不看24的讲课视频。翻译成中文的视频的标题为我下面的VideoName，也尝试过写成官方网站上英文的样子，但是对学习的效率有较大的影响，所以还是写成中文。</p><table><thead><tr><th align="center">VideoName</th><th align="center">Done</th><th align="center">warning</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>还是尽量模拟他们的表格，来一个一个完成任务吧</p><table><thead><tr><th align="center"><strong>Reading</strong></th><th align="center"><strong>Lecture</strong></th><th align="center"><strong>Discussion</strong></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;2021CS61BWeek3and4&quot;&gt;&lt;a href=&quot;#2021CS61BWeek3and4&quot; class=&quot;headerlink&quot; title=&quot;2021CS61BWeek3and4&quot;&gt;&lt;/a&gt;2021CS61BWeek3and4&lt;/h1&gt;&lt;h1 id=&quot;Week3&quot;&gt;&lt;a href=&quot;#Week3&quot; class=&quot;headerlink&quot; title=&quot;Week3&quot;&gt;&lt;/a&gt;Week3&lt;/h1&gt;&lt;p&gt;24OUT表示以后24的视频非特殊情况，例如21讲的自己不懂，除非特殊情况都不看24的讲课视频。翻译成中文的视频的标题为我下面的VideoName，也尝试过写成官方网站上英文的样子，但是对学习的效率有较大的影响，所以还是写成中文。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;VideoName&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Done&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;warning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;sp24&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;24OUT&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;6.DLList, Arrays&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ing&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;6.现场问答&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;扫过&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;sp24&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;24OUT&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;7.AList,调整大小SList&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;7.现场问答&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;扫过&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;范围，静态，链接列表&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;sp24&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;24OUT&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;8.接口和实现继承&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;8.现场问答&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;扫过&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;sp24&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;24OUT&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;9.扩展，强制类型转换，高阶函数&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;9.现场问答&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;扫过&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    
    <category term="CS61B" scheme="https://bradtorres.github.io/tags/CS61B/"/>
    
    <category term="CSDIY" scheme="https://bradtorres.github.io/tags/CSDIY/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA 快捷键TIPS</title>
    <link href="https://bradtorres.github.io/2024/06/02/Intellij-IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AETIPS/"/>
    <id>https://bradtorres.github.io/2024/06/02/Intellij-IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AETIPS/</id>
    <published>2024-06-02T00:57:58.000Z</published>
    <updated>2024-06-02T01:36:27.715Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Intellij-IDEA-快捷键TIPS"><a href="#Intellij-IDEA-快捷键TIPS" class="headerlink" title="Intellij IDEA 快捷键TIPS"></a>Intellij IDEA 快捷键TIPS</h1><h2 id="跨文件的跳转"><a href="#跨文件的跳转" class="headerlink" title="跨文件的跳转"></a>跨文件的跳转</h2><blockquote><p><code>Alt + LEFT / Alt + RIGHT</code> 切换到左侧&#x2F;右侧的标签页。</p></blockquote><p>需要在两三个标签页之间来回切换时，这是最高效的方式。</p><blockquote><p><code>Ctrl + E</code> 在弹窗中打开最近浏览的文件。</p></blockquote><p>开发者下一个想要浏览的文件，通常最近刚刚浏览过。如果你打开的标签页比较多，或者你想要打开的标签页刚刚关闭（用 <code>Ctrl + F4</code> 关闭标签页），那么 <code>Ctrl + E</code> 通常是你跳转到下个文件的最快方法。</p><blockquote><p><code>Ctrl + B</code> 跳转到声明。<br><code>Ctrl + Alt + B</code> 跳转到定义。<br><code>Ctrl + Shift + I</code> 在弹窗中预览定义。<br><code>Ctrl + U</code> 跳转到父类&#x2F;父类方法。</p></blockquote><p>上面四个快捷键的使用频率极高，请一定熟练掌握。</p><blockquote><p><code>Ctrl + N</code> 跳转到指定类。<br><code>Ctrl + Shift + N</code> 跳转到指定文件。<br><code>Ctrl + Shift + Alt + N</code> 跳转到指定符号。</p></blockquote><p>上面三个快捷键提供了项目内定向搜索的能力，比直接使用 <code>Ctrl + Shift + F</code> 甚至 <code>Double Shift</code> 搜索要快很多。</p><h2 id="4-2-编辑"><a href="#4-2-编辑" class="headerlink" title="4.2 编辑"></a><strong>4.2 编辑</strong></h2><ol><li>向下复制一行：Ctrl + D.</li><li>向上复制一行：需自己设置</li><li>删除所在<strong>行</strong>或光标所在<strong>行</strong>：Ctrl + X &#x2F;Ctrl + Y.</li><li>向上移动代码：Ctrl + Shift + ↓</li><li>向下移动代码： Ctrl + Shift + ↑</li><li>在光标所在<strong>行</strong>下添加一个<strong>空行</strong>： Shift + Enter.</li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;Intellij-IDEA-快捷键TIPS&quot;&gt;&lt;a href=&quot;#Intellij-IDEA-快捷键TIPS&quot; class=&quot;headerlink&quot; title=&quot;Intellij IDEA 快捷键TIPS&quot;&gt;&lt;/a&gt;Intellij IDEA 快捷键TIPS&lt;/h1&gt;&lt;h2 id=&quot;跨文件的跳转&quot;&gt;&lt;a href=&quot;#跨文件的跳转&quot; class=&quot;headerlink&quot; title=&quot;跨文件的跳转&quot;&gt;&lt;/a&gt;跨文件的跳转&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Alt + LEFT / Alt + RIGHT&lt;/code&gt; 切换到左侧&amp;#x2F;右侧的标签页。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要在两三个标签页之间来回切换时，这是最高效的方式。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MIT-Missing-Semester</title>
    <link href="https://bradtorres.github.io/2024/05/31/MIT-Missing-Semester/"/>
    <id>https://bradtorres.github.io/2024/05/31/MIT-Missing-Semester/</id>
    <published>2024-05-31T06:14:14.000Z</published>
    <updated>2024-05-31T07:08:14.164Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MIT-Missing-Semester"><a href="#MIT-Missing-Semester" class="headerlink" title="MIT-Missing-Semester"></a>MIT-Missing-Semester</h1><h2 id="自制双语字幕-计算机教育缺失的一课-2020-第1讲-课程概览与-shell✔"><a href="#自制双语字幕-计算机教育缺失的一课-2020-第1讲-课程概览与-shell✔" class="headerlink" title="[自制双语字幕] 计算机教育缺失的一课(2020) - 第1讲 - 课程概览与 shell✔"></a>[自制双语字幕] 计算机教育缺失的一课(2020) - 第1讲 - 课程概览与 shell✔</h2><p>【[自制双语字幕] 计算机教育缺失的一课(2020) - 第1讲 - 课程概览与 shell】 <a href="https://www.bilibili.com/video/BV1uc411N7eK/?share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1uc411N7eK/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p><p>不要急着一口气吃成胖子，遇到不会的就差，不会就放着。这个也是慢慢学一点。</p><p>就像之前学的git，结果自己在做CS61B的时候不就用上了吗</p><p>他这个装的虚拟机不知道为什么用不了，第一节课我都在GitBash上面操作的，大部分命令都有，没啥不一样。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531143900664.png" alt="image-20240531143900664"></p><p>看完了</p><h2 id="自制双语字幕-计算机教育缺失的一课-2020-第2讲-Shell-工具和脚本"><a href="#自制双语字幕-计算机教育缺失的一课-2020-第2讲-Shell-工具和脚本" class="headerlink" title="[自制双语字幕] 计算机教育缺失的一课(2020) - 第2讲 - Shell 工具和脚本"></a>[自制双语字幕] 计算机教育缺失的一课(2020) - 第2讲 - Shell 工具和脚本</h2><p>上的还挺有意思的，别中途放弃了</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531145934033.png" alt="image-20240531145934033"></p><p>主要的问题是GitBash他没有权限啊，没有<code>sudo</code>命令</p><p>先听到这，会停止是一种能力</p><p><a href="https://www.bilibili.com/video/BV1xa4y1g7sZ/?spm_id_from=333.788.recommend_more_video.-1&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1xa4y1g7sZ/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;MIT-Missing-Semester&quot;&gt;&lt;a href=&quot;#MIT-Missing-Semester&quot; class=&quot;headerlink&quot; title=&quot;MIT-Missing-Semester&quot;&gt;&lt;/a&gt;MIT-Missing-Semester&lt;/h1&gt;&lt;h2 id=&quot;自制双语字幕-计算机教育缺失的一课-2020-第1讲-课程概览与-shell✔&quot;&gt;&lt;a href=&quot;#自制双语字幕-计算机教育缺失的一课-2020-第1讲-课程概览与-shell✔&quot; class=&quot;headerlink&quot; title=&quot;[自制双语字幕] 计算机教育缺失的一课(2020) - 第1讲 - 课程概览与 shell✔&quot;&gt;&lt;/a&gt;[自制双语字幕] 计算机教育缺失的一课(2020) - 第1讲 - 课程概览与 shell✔&lt;/h2&gt;&lt;p&gt;【[自制双语字幕] 计算机教育缺失的一课(2020) - 第1讲 - 课程概览与 shell】 &lt;a href=&quot;https://www.bilibili.com/video/BV1uc411N7eK/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0&quot;&gt;https://www.bilibili.com/video/BV1uc411N7eK/?share_source=copy_web&amp;amp;vd_source=82180e49f17daecf14bb6f246fc29cd0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不要急着一口气吃成胖子，遇到不会的就差，不会就放着。这个也是慢慢学一点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CSDIY" scheme="https://bradtorres.github.io/tags/CSDIY/"/>
    
  </entry>
  
  <entry>
    <title>Hot100DDL乱写</title>
    <link href="https://bradtorres.github.io/2024/05/31/Hot100DDL%E4%B9%B1%E5%86%99/"/>
    <id>https://bradtorres.github.io/2024/05/31/Hot100DDL%E4%B9%B1%E5%86%99/</id>
    <published>2024-05-31T04:47:49.000Z</published>
    <updated>2024-05-31T07:44:04.771Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>s</p><p>为了100元钱，全部胡弄完了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Coursera: Algorithms I &amp; II</title>
    <link href="https://bradtorres.github.io/2024/05/31/Coursera-Algorithms-I-II/"/>
    <id>https://bradtorres.github.io/2024/05/31/Coursera-Algorithms-I-II/</id>
    <published>2024-05-31T01:38:56.000Z</published>
    <updated>2024-05-31T08:54:49.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Coursera-Algorithms-I-amp-II"><a href="#Coursera-Algorithms-I-amp-II" class="headerlink" title="Coursera: Algorithms I &amp; II"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Algo/">Coursera: Algorithms I &amp; II</a></h1><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531093957717.png" alt="image-20240531093957717"></p><p>太棒了，用的是java8，把我就不用切换jdk了</p><h2 id="第-1-周"><a href="#第-1-周" class="headerlink" title="第 1 周"></a><a href="https://www.coursera.org/learn/algorithms-part1/home/week/1">第 1 周</a></h2><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531094219326.png" alt="image-20240531094219326"></p><p>一来就碰到难题，这可真是让人头大，上网搜索解决方法。</p><p><a href="https://www.cnblogs.com/Howfars/p/13488122.html">https://www.cnblogs.com/Howfars/p/13488122.html</a></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531100148315.png" alt="image-20240531100148315"></p><p><a href="https://blog.csdn.net/weixin_43914604/article/details/105499117">https://blog.csdn.net/weixin_43914604/article/details/105499117</a></p><p>哈哈哈，，我也发现了</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531100307788.png" alt="image-20240531100307788"></p><p>md别遇到问题就放弃卧槽</p><p><a href="https://blog.csdn.net/qq_43152052/article/details/100155374">https://blog.csdn.net/qq_43152052/article/details/100155374</a></p><p><a href="https://www.cnblogs.com/Howfars/p/13488122.html">https://www.cnblogs.com/Howfars/p/13488122.html</a></p><p><a href="https://blog.csdn.net/weixin_43914604/article/details/105499117">https://blog.csdn.net/weixin_43914604/article/details/105499117</a></p><p><a href="https://algs4.cs.princeton.edu/code/">https://algs4.cs.princeton.edu/code/</a></p><p><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Algo/#_1">https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Algo/#_1</a></p><p><a href="https://www.coursera.org/learn/algorithms-part1/programming/37IH3/hello-world/instructions">https://www.coursera.org/learn/algorithms-part1/programming/37IH3/hello-world/instructions</a></p><p><a href="https://lift.cs.princeton.edu/java/windows/">https://lift.cs.princeton.edu/java/windows/</a></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;Coursera-Algorithms-I-amp-II&quot;&gt;&lt;a href=&quot;#Coursera-Algorithms-I-amp-II&quot; class=&quot;headerlink&quot; title=&quot;Coursera: Algorithms I &amp;amp; II&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Algo/&quot;&gt;Coursera: Algorithms I &amp;amp; II&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531093957717.png&quot; alt=&quot;image-20240531093957717&quot;&gt;&lt;/p&gt;
&lt;p&gt;太棒了，用的是java8，把我就不用切换jdk了&lt;/p&gt;
&lt;h2 id=&quot;第-1-周&quot;&gt;&lt;a href=&quot;#第-1-周&quot; class=&quot;headerlink&quot; title=&quot;第 1 周&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.coursera.org/learn/algorithms-part1/home/week/1&quot;&gt;第 1 周&lt;/a&gt;&lt;/h2&gt;</summary>
    
    
    
    
    <category term="CSDIY" scheme="https://bradtorres.github.io/tags/CSDIY/"/>
    
  </entry>
  
  <entry>
    <title>csDiyPath</title>
    <link href="https://bradtorres.github.io/2024/05/31/csDiyPath/"/>
    <id>https://bradtorres.github.io/2024/05/31/csDiyPath/</id>
    <published>2024-05-31T01:10:53.000Z</published>
    <updated>2024-05-31T08:54:47.746Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CS自学指南"><a href="#CS自学指南" class="headerlink" title="CS自学指南"></a>CS自学指南</h1><h1 id="前言✔"><a href="#前言✔" class="headerlink" title="前言✔"></a><a href="https://csdiy.wiki/">前言</a>✔</h1><p>看完之后只能惊叹于作者对学习的渴望，行动力之强，坚持得下去，最最重要的是，足够自觉，足够自律，足够懂事。</p><p>我也不是没看到过别人说要自学，，但是我和绝大部分人一样，看了一眼视频就匆匆放弃 。这次，我永远当不了第一个人，但是我永远可以抄袭别人，当第二个人。</p><p>作者开始的地方是CS61A，是Python入门</p><h1 id="如何使用这本书"><a href="#如何使用这本书" class="headerlink" title="如何使用这本书"></a><a href="https://csdiy.wiki/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">如何使用这本书</a></h1><h1 id="一个仅供参考的CS学习规划"><a href="#一个仅供参考的CS学习规划" class="headerlink" title="一个仅供参考的CS学习规划"></a><a href="https://csdiy.wiki/CS%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/">一个仅供参考的CS学习规划</a></h1><p>必学工具</p><p><a href="https://csdiy.wiki/%E5%A5%BD%E4%B9%A6%E6%8E%A8%E8%8D%90/">好书推荐</a></p><p>数学基础</p><p>数学进阶</p><h1 id="编程入门"><a href="#编程入门" class="headerlink" title="编程入门"></a>编程入门</h1><h2 id="MIT-Missing-Semester"><a href="#MIT-Missing-Semester" class="headerlink" title="MIT-Missing-Semester"></a><a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/MIT-Missing-Semester/">MIT-Missing-Semester</a></h2><p>正如课程名字所言：“计算机教学中消失的一个学期”，这门课将会教会你许多大学的课堂上不会涉及但却对每个 CSer 无比重要的工具或者知识点。例如 Shell 编程、命令行配置、Git、Vim、<code>tmux</code>、<code>ssh</code> 等等。如果你是一个计算机小白，那么我非常建议你学习一下这门课，因为它基本涉及了本书必学工具中的绝大部分内容。</p><p>除了 MIT 官方的学习资料外，北京大学图灵班开设的前沿计算实践中也开设了相关课程，资料位于<a href="http://vcl.pku.edu.cn/course/PFCII/2021-spring/index.html">这个网站</a>下，供大家参考。</p><p>图灵班没有北大内网进不去</p><h2 id="课程资源"><a href="#课程资源" class="headerlink" title="课程资源"></a>课程资源</h2><ul><li><p>课程网站：<a href="https://missing.csail.mit.edu/2020/">https://missing.csail.mit.edu/2020/</a></p></li><li><p>课程中文网站: <a href="https://missing-semester-cn.github.io/">https://missing-semester-cn.github.io/</a></p></li><li><p>课程视频：<a href="https://www.youtube.com/playlist?list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J">https://www.youtube.com/playlist?list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J</a></p></li><li><p>课程中文字幕视频：</p><ul><li>Missing_Semi_中译组（未完结）：<a href="https://space.bilibili.com/1010983811?spm_id_from=333.337.search-card.all.click">https://space.bilibili.com/1010983811?spm_id_from=333.337.search-card.all.click</a></li><li>刘黑黑a（已完结）：<a href="https://space.bilibili.com/518734451?spm_id_from=333.337.search-card.all.click">https://space.bilibili.com/518734451?spm_id_from=333.337.search-card.all.click</a></li></ul></li><li><p>课程作业：一些随堂小练习，具体见课程网站。</p></li></ul><h2 id="Sysadmin-DeCal"><a href="#Sysadmin-DeCal" class="headerlink" title="Sysadmin DeCal"></a><a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/DeCal/">Sysadmin DeCal</a></h2><h2 id="Python-语言"><a href="#Python-语言" class="headerlink" title="Python 语言"></a>Python 语言</h2><h3 id="UCB-CS61A-Structure-and-Interpretation-of-Computer-Programs"><a href="#UCB-CS61A-Structure-and-Interpretation-of-Computer-Programs" class="headerlink" title="UCB CS61A: Structure and Interpretation of Computer Programs"></a><a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/Python/CS61A/">UCB CS61A: Structure and Interpretation of Computer Programs</a></h3><p>md还是这个吧，试试作者口中是神课。速上速过</p><h3 id="CS50P-CS50’s-Introduction-to-Programming-with-Python"><a href="#CS50P-CS50’s-Introduction-to-Programming-with-Python" class="headerlink" title="CS50P: CS50’s Introduction to Programming with Python"></a><a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/Python/CS50P/">CS50P: CS50’s Introduction to Programming with Python</a></h3><h2 id="Java-语言"><a href="#Java-语言" class="headerlink" title="Java 语言"></a>Java 语言</h2><h3 id="MIT-6-092-Introduction-To-Programming-In-Java-https-csdiy-wiki-编程入门-Java-MIT-6-092-x2F"><a href="#MIT-6-092-Introduction-To-Programming-In-Java-https-csdiy-wiki-编程入门-Java-MIT-6-092-x2F" class="headerlink" title="[MIT 6.092: Introduction To Programming In Java](https://csdiy.wiki/编程入门/Java/MIT 6.092&#x2F;)"></a>[MIT 6.092: Introduction To Programming In Java](<a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/Java/MIT">https://csdiy.wiki/编程入门/Java/MIT</a> 6.092&#x2F;)</h3><p>自己基础真是一坨屎，连</p><p><code>javac</code> ， <code>java</code>到现在都搞不清楚。</p><p>md给我重新学</p><p>md这个没有视频啊，那我不学这个</p><p>电子基础</p><h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><h2 id="UCB-CS61B-Data-Structures-and-Algorithms"><a href="#UCB-CS61B-Data-Structures-and-Algorithms" class="headerlink" title="UCB CS61B: Data Structures and Algorithms"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/CS61B/">UCB CS61B: Data Structures and Algorithms</a></h2><h2 id="Coursera-Algorithms-I-amp-II"><a href="#Coursera-Algorithms-I-amp-II" class="headerlink" title="Coursera: Algorithms I &amp; II"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Algo/">Coursera: Algorithms I &amp; II</a></h2><p>ing</p><h2 id="MIT-6-006-Introduction-to-Algorithms"><a href="#MIT-6-006-Introduction-to-Algorithms" class="headerlink" title="MIT 6.006: Introduction to Algorithms"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/6.006/">MIT 6.006: Introduction to Algorithms</a></h2><h2 id="MIT-6-046-Design-and-Analysis-of-Algorithms"><a href="#MIT-6-046-Design-and-Analysis-of-Algorithms" class="headerlink" title="MIT 6.046: Design and Analysis of Algorithms"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/6.046/">MIT 6.046: Design and Analysis of Algorithms</a></h2><h2 id="UCB-CS170-Efficient-Algorithms-and-Intractable-Problems"><a href="#UCB-CS170-Efficient-Algorithms-and-Intractable-Problems" class="headerlink" title="UCB CS170: Efficient Algorithms and Intractable Problems"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/CS170/">UCB CS170: Efficient Algorithms and Intractable Problems</a></h2><ul><li>软件工程</li><li>计算机系统基础</li><li>体系结构</li><li>操作系统</li><li>并行与分布式系统</li><li>计算机系统安全</li><li>计算机网络</li><li>数据库系统</li><li>编译原理</li><li>编程语言设计与分析</li><li>计算机图形学</li><li>Web开发</li><li>数据科学</li><li>人工智能</li><li>机器学习</li><li>机器学习系统</li><li>深度学习</li><li>机器学习进阶</li><li><a href="https://csdiy.wiki/%E5%90%8E%E8%AE%B0/">后记</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;CS自学指南&quot;&gt;&lt;a href=&quot;#CS自学指南&quot; class=&quot;headerlink&quot; title=&quot;CS自学指南&quot;&gt;&lt;/a&gt;CS自学指南&lt;/h1&gt;&lt;h1 id=&quot;前言✔&quot;&gt;&lt;a href=&quot;#前言✔&quot; class=&quot;headerlink&quot; title=&quot;前言✔&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://csdiy.wiki/&quot;&gt;前言&lt;/a&gt;✔&lt;/h1&gt;&lt;p&gt;看完之后只能惊叹于作者对学习的渴望，行动力之强，坚持得下去，最最重要的是，足够自觉，足够自律，足够懂事。&lt;/p&gt;
&lt;p&gt;我也不是没看到过别人说要自学，，但是我和绝大部分人一样，看了一眼视频就匆匆放弃 。这次，我永远当不了第一个人，但是我永远可以抄袭别人，当第二个人。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CSDIY" scheme="https://bradtorres.github.io/tags/CSDIY/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营day24-理论基础-77</title>
    <link href="https://bradtorres.github.io/2024/05/30/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5day24-%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-77/"/>
    <id>https://bradtorres.github.io/2024/05/30/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5day24-%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-77/</id>
    <published>2024-05-30T11:49:42.000Z</published>
    <updated>2024-05-30T13:31:24.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="回溯算法理论基础"><a href="#回溯算法理论基础" class="headerlink" title="回溯算法理论基础"></a>回溯算法理论基础</h1><p>代码模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; n) <span class="built_in">output</span>(x);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">f</span>(n, t); i &lt;= <span class="built_in">g</span>(n, t); i++) &#123;</span><br><span class="line">            x[t] = <span class="built_in">h</span>(i);<span class="comment">//当前解</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">constraint</span>(t) &amp;&amp; <span class="built_in">bound</span>(t)) <span class="built_in">backtrack</span>(t + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>回溯法解决的问题都可以抽象为树形结构</strong>，是的，我指的是所有回溯法的问题都可以抽象为树形结构！</p><p>因为回溯法解决的都是在集合中递归查找子集，<strong>集合的大小就构成了树的宽度，递归的深度就构成了树的深度</strong>。</p><p>回溯法一般是在集合中递归搜索，集合的大小构成了树的宽度，递归的深度构成的树的深度。</p><p>大家可以从图中看出<strong>for循环可以理解是横向遍历，backtracking（递归）就是纵向遍历</strong>，这样就把这棵树全遍历完了，一般来说，搜索叶子节点就是找的其中一个结果了。</p><p>卡哥模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(参数)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        <span class="built_in">backtracking</span>(路径，选择列表); <span class="comment">// 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组合问题"><a href="#组合问题" class="headerlink" title="组合问题"></a>组合问题</h1><p>每一层递归就是相当于一个for循环。</p><p>嵌套多少个for循环，就相当于递归多少次</p><h2 id="经典错误，当时是我犯的错误"><a href="#经典错误，当时是我犯的错误" class="headerlink" title="经典错误，当时是我犯的错误"></a>经典错误，当时是我犯的错误</h2><p><code>            backtracking(n, k, startIndex + 1);</code>应该是<code>i + 1</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//一维数组path，存放路径</span></span><br><span class="line">    <span class="comment">//二维数组result，存放所有符合要求的path，组成结果集、</span></span><br><span class="line">    <span class="comment">//也可以不定义成全局变量，但是定义成引用变量的话，递归函数里参数过多</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>()  == k) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归过程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startIndex;i &lt;= n;i++)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">backtracking</span>(n, k, startIndex + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="正确答案"><a href="#正确答案" class="headerlink" title="正确答案"></a>正确答案</h2><p><code>i &lt;= n - (k - path.size()) + 1</code></p><p>常见剪枝思路就是缩小i的范围</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//一维数组path，存放路径</span></span><br><span class="line">    <span class="comment">//二维数组result，存放所有符合要求的path，组成结果集、</span></span><br><span class="line">    <span class="comment">//也可以不定义成全局变量，但是定义成引用变量的话，递归函数里参数过多</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>()  == k) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归过程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startIndex;i &lt;= n;i++)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">backtracking</span>(n, k, i + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剪枝操作"><a href="#剪枝操作" class="headerlink" title="剪枝操作"></a>剪枝操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//一维数组path，存放路径</span></span><br><span class="line">    <span class="comment">//二维数组result，存放所有符合要求的path，组成结果集、</span></span><br><span class="line">    <span class="comment">//也可以不定义成全局变量，但是定义成引用变量的话，递归函数里参数过多</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>()  == k) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归过程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startIndex;i &lt;= n - (k - path.<span class="built_in">size</span>()) + <span class="number">1</span>;i++)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">backtracking</span>(n, k, i + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;回溯算法理论基础&quot;&gt;&lt;a href=&quot;#回溯算法理论基础&quot; class=&quot;headerlink&quot; title=&quot;回溯算法理论基础&quot;&gt;&lt;/a&gt;回溯算法理论基础&lt;/h1&gt;&lt;p&gt;代码模板&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;backtrack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (t &amp;gt; n) &lt;span class=&quot;built_in&quot;&gt;output&lt;/span&gt;(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;built_in&quot;&gt;f&lt;/span&gt;(n, t); i &amp;lt;= &lt;span class=&quot;built_in&quot;&gt;g&lt;/span&gt;(n, t); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x[t] = &lt;span class=&quot;built_in&quot;&gt;h&lt;/span&gt;(i);&lt;span class=&quot;comment&quot;&gt;//当前解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;constraint&lt;/span&gt;(t) &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;bound&lt;/span&gt;(t)) &lt;span class=&quot;built_in&quot;&gt;backtrack&lt;/span&gt;(t + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;回溯法解决的问题都可以抽象为树形结构&lt;/strong&gt;，是的，我指的是所有回溯法的问题都可以抽象为树形结构！&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="https://bradtorres.github.io/tags/leetcode/"/>
    
    <category term="代码随想录" scheme="https://bradtorres.github.io/tags/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>2021CS61B-LabsANDHWs</title>
    <link href="https://bradtorres.github.io/2024/05/29/2021CS61B-LabsANDHWs/"/>
    <id>https://bradtorres.github.io/2024/05/29/2021CS61B-LabsANDHWs/</id>
    <published>2024-05-29T14:40:25.000Z</published>
    <updated>2024-06-08T16:08:35.363Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>摘要</p><p>Git教程</p><p><a href="https://www.bilibili.com/video/BV1HM411377j?p=1&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1HM411377j?p=1&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p><p><strong>我的博客，希望自己能够不要那么那么笨了。</strong></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529230134500.png" alt="image-20240529230134500"></p><p>我记得，好像是vscode吧，，给你看个截图</p><p>是很久以前配置的，懒得改了</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529230217348.png" alt="image-20240529230217348"></p><p>有点没绷住，git clone 的时候不能开代理，不然就会出错</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529232044779.png" alt="image-20240529232044779"></p><p>太棒了，，过去的点滴积累没有白费，，太好了！！</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529233931878.png" alt="image-20240529233931878"></p><p>我换过桌面，D盘里面的桌面是DesktopNew。真正的Desktop在C盘。里面放着cs61b</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529234714485.png" alt="image-20240529234714485"></p><p>太棒了，本来是蒙的，没想到youyouyou蒙对了</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529235312981.png" alt="image-20240529235312981"></p><p>yes，离成功又近了一步</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529235612781.png" alt="image-20240529235612781"></p><p>太棒了，，成功辣，，把他们的代码骨架skeleton都搞下来了</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529235815313.png" alt="image-20240529235815313"></p><p>哈哈到这里出错了，，但是无所谓了。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240530001235893.png" alt="image-20240530001235893"></p><p>oracleopenjdk不行就换，但这也是之后的事情了，我已经进步太多了。</p><p>哈哈哈，绷不住了，，到最后我还是用的java8跑的，无所谓了，，后面再改吧。反正前面简单从内容用不到新语言的特性</p><p>修复测试乘成功了</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240530094937378.png" alt="image-20240530094937378"></p><p>git提交应该是没出错的，但是他的自动评分系统报错，个人感觉是因jdk版本的原因。这个之后再改吧，已经是几乎成功了。</p><p>我突然其实是感觉课程不配套导致的，我的作业写的是24年的。</p><p>但是评测gradescope测评的是2021年从春季的课程</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240530111111533.png" alt="image-20240530111111533"></p><p>靠了，，放出没看懂他们的话，，现在看懂了。</p><p>既然只有21spring开放的测评机，那一切都从21Spring 的版本为准吧。版本不重要，重要的是坚持做完。</p><p>搜了搜有没有CS61B的2024Spring的入学代码，完全找不到。网上都是2021Spring的博客和笔记，个人猜测是2021Spring的Gradescope开放的，所以大家都用这个学期的版本。那我也学这个学期的版本，与大部分人同步得了。</p><p>重新换任务我也等到6.1号之后了。</p><p>真别急，谁说最后还用不用的着你的程序代码呢，慢点开始。看了看电脑设置多个jdk麻烦死了。不想动了，不管这些了。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240530111731459.png" alt="image-20240530111731459"></p><h1 id="上面都是2024SpringCS61B的Lab01的过程，我现在改成2021SpringCS61B了。"><a href="#上面都是2024SpringCS61B的Lab01的过程，我现在改成2021SpringCS61B了。" class="headerlink" title="上面都是2024SpringCS61B的Lab01的过程，我现在改成2021SpringCS61B了。"></a>上面都是2024SpringCS61B的Lab01的过程，我现在改成2021SpringCS61B了。</h1><h1 id="Week1✔"><a href="#Week1✔" class="headerlink" title="Week1✔"></a>Week1✔</h1><h2 id="Lab-1-Setup-Setting-Up-Your-Computer✔"><a href="#Lab-1-Setup-Setting-Up-Your-Computer✔" class="headerlink" title="Lab 1 Setup: Setting Up Your Computer✔"></a>Lab 1 Setup: Setting Up Your Computer✔</h2><p>hhhhhhhhhhhhh为什么我这里java HelloWorld成功了，但是之前不成功，难道真是的用户变量里面的CLASSPATH的alg4.jar导致的吗。</p><p>感觉用Windows Terminal也一样行，我试试</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531172306320.png" alt="image-20240531172306320"></p><p>果然是是的用户变量里面的CLASSPATH的alg4.jar导致的。奶奶的</p><p>那我的普林斯顿的那个之后放到后面做了。因为alg4的配置比我先做的更麻烦，我先歇一会。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531172454123.png" alt="image-20240531172454123"></p><h2 id="Lab-1-IntelliJ-Java-git✔"><a href="#Lab-1-IntelliJ-Java-git✔" class="headerlink" title="Lab 1: IntelliJ, Java, git✔"></a>Lab 1: IntelliJ, Java, git✔</h2><p>太棒了，这个也做完了。</p><p>而且自动评分器得了满分。太好了</p><p>有个小小的报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot resolve symbol &#x27;String&#x27; 和 &#x27;System’</span><br></pre></td></tr></table></figure><p>解决方法<a href="https://blog.csdn.net/wy_hhxx/article/details/121239112">https://blog.csdn.net/wy_hhxx/article/details/121239112</a></p><p>个人感觉原因是，把别人的setting导入进来的时候，别人的jdk路径和自己的jdk路径不一样，所以会有这个报错。</p><p>果然好了，不报错了</p><p>这也解决了我的选择困难症，再也不用纠结用哪个color scheme,用加州大学伯克利分校的教授同款怎么样都是好。好好哈后</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531201052203.png" alt="image-20240531201052203"></p><h2 id="HW-0-A-Java-Crash-Course✔"><a href="#HW-0-A-Java-Crash-Course✔" class="headerlink" title="HW 0: A Java Crash Course✔"></a>HW 0: A Java Crash Course✔</h2><p>讲的很细，和C++49讲的一样</p><p><strong>中断并继续</strong></p><p>有时，您可能会发现使用<code>break</code>或<code>continue</code>关键字很有用。该<code>continue</code>语句跳过循环当前迭代的其余部分，<strong>有效地直接跳转到增量条件。</strong></p><p><strong>增强的 For 循环</strong></p><p>这一点和acwing讲的一样</p><p>Java 还支持使用“增强的 for 循环”对数组进行迭代。基本思想是，在很多情况下我们实际上根本不关心索引。在这种情况下，我们避免使用涉及冒号的特殊语法来创建索引变量。</p><p>例如，在下面的代码中，我们执行的操作与<code>BreakDemo</code>上面的完全相同。但是，在这种情况下，我们不创建索引<code>i</code>。相反，从开始到，只接受<code>String</code> <code>s</code>每个的标识一次。您可以通过<a href="https://goo.gl/wmhVPM">此链接</a>试用此代码。<code>String``a``a[0]``a[a.length - 1]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnhancedForBreakDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] a = &#123;<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;laser horse&quot;</span>, <span class="string">&quot;ketchup&quot;</span>, <span class="string">&quot;horse&quot;</span>, <span class="string">&quot;horbse&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : a) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j += <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">                <span class="keyword">if</span> (s.contains(<span class="string">&quot;horse&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Project-0-2048✔"><a href="#Project-0-2048✔" class="headerlink" title="Project 0: 2048✔"></a>Project 0: 2048✔</h2><p>好难，要做吗</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://youtu.be/Xzihuj_JZBI">您可以在https://youtu.be/Xzihuj_JZBI</a>找到该项目的高级概述。</p><p>但您的任务仅存在于四种方法中<code>Model.java</code>，并且仅限于四种方法。(感觉没那么难)，其他的部分他都给我封装好 了。</p><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>在这个项目中，您将构建此游戏的核心逻辑。也就是说，我们已经整合了所有 GUI 代码、处理按键以及大量其他框架。<strong>您的工作是完成最重要和最有趣的部分。</strong></p><p>具体来说，您将在文件中填写 4 种方法<code>Model.java</code>，这些方法控制用户按下某些键后发生的情况。</p><p>在第一次移动之前，应用程序会将包含 2 或 4 的方块添加到最初为空的棋盘上的随机方格中。2 或 4 的选择是随机的，选择 2 的概率为 75%，选择 4 的概率为 25%</p><p>以下是发生合并时的完整规则，如上图所示。</p><ol><li>两块相同数值的牌<em>合并</em>为一块牌，其数字是初始数字的两倍。</li><li>合并后的图块不会在该倾斜度上再次合并。例如，如果我们有 [X, 2, 2, 4]，其中 X 代表空白区域，我们将图块向左移动，最终结果应该是 [4, 4, X, X]，而不是 [8, X, X, X]。这是因为最左边的 <strong>4 已经是合并的一部分，因此不应再次合并。</strong></li><li>当运动方向上的三个相邻图块具有相同的编号时，运动方向上的<strong>前两个</strong>图块将合并，而后面的图块则不会合并。例如，如果我们有 [X, 2, 2, 2] 并将图块向左移动，则最终结果应该是 [4, 2, X, X]，而不是 [2, 4, X, X]。</li></ol><p>根据这些规则，如果在运动方向上有四个相邻的图块具有相同的编号，它们将形成两个合并的图块。例如，如果我们有 [4, 4, 4, 4]，那么如果我们向左移动，我们最终会得到 [8, 8, X, X]。这是因为前两个图块将根据规则 3 合并，然后后面的两个图块将合并，但是由于规则 2，这些合并的图块（在我们的示例中为 8）不会在该倾斜方向上自行合并。您会在上面的动画 GIF 中找到上面列出的 3 条规则中的每一个的应用，因此请仔细观看几次以很好地理解这些规则。</p><p>注意：您的代码不会添加任何新图块！我们已经为您完成了这一部分。</p><p>您的代码需要更新分数</p><p>当当前玩家没有可用的移动（没有倾斜可以改变棋盘）或移动形成包含 2048 的方格时，游戏结束。您的代码将负责检测游戏何时结束。</p><h3 id="作业理念与课程设计"><a href="#作业理念与课程设计" class="headerlink" title="作业理念与课程设计"></a>作业理念与课程设计</h3><p>当您进行该项目的第四个最终任务（编写方法<code>tilt</code>）时，其中一个挑战是找出这些方法和实例变量中的哪些是有用的。</p><h4 id="Board"><a href="#Board" class="headerlink" title="Board"></a>Board</h4><p>此类代表棋盘本身。它有三种方法供您使用：<code>setViewingPerspective</code>、<code>tile</code>、<code>move</code>。您也可以选择使用 进行实验<code>getRandomNonNullTile</code>。</p><p><strong>您只能编辑<code>Model.java</code>此作业中的文件。Gradescope</strong>只会采用您的<code>Model.java</code>文件并使用其他文件的框架版本，因此如果您对文件进行编辑<code>Tile.java</code>，Gradescope 将无法识别该文件。</p><h3 id="你的任务"><a href="#你的任务" class="headerlink" title="你的任务"></a>你的任务</h3><p>您在这个项目中要做的工作是修改和完成<code>Model</code>类，特别是<code>emptySpaceExists</code>、<code>maxTileExists</code>和<code>atLeastOneMoveExists</code>方法 <code>tilt</code>。其他一切都已为您实现。我们建议按此顺序完成它们。前两个相对简单。第三个（<code>atLeastOneMoveExists</code>）更难，最后一种方法<code>tilt</code>可能相当困难。我们预计<code>tilt</code>您需要 3 到 10 个小时才能完成。前三种方法将处理游戏结束条件，最后一种方法<code>tilt</code>将在用户按下按键后修改棋盘。您可以阅读该方法的简短主体，<code>checkGameOver</code>以了解如何使用您的方法来检查游戏是否结束。</p><p>前面的视频和SLids和指南和现场问答都看完了。就差pro 0 了</p><p>纪念一下</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601223621803.png" alt="image-20240601223621803"></p><p>理解了，悟了。Tile t为null表示空格子，没有数字。所以为了引用空指针要先判断t !&#x3D; null，当然这也算一个小小的短路原则。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601225351001.png" alt="image-20240601225351001"></p><p>一次性写对了，很开心</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601230852419.png" alt="image-20240601230852419"></p><p>贴上我的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">atLeastOneMoveExists</span><span class="params">(Board b)</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.</span></span><br><span class="line">    <span class="keyword">if</span> (emptySpaceExists(b)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span>[] dj = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] di = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> b.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> b.tile(j, i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">jNew</span> <span class="operator">=</span> j + dj[k];</span><br><span class="line">                <span class="type">int</span> <span class="variable">iNew</span> <span class="operator">=</span> i + di[k];</span><br><span class="line">                <span class="keyword">if</span> (iNew &gt;= <span class="number">0</span> &amp;&amp; iNew &lt; len &amp;&amp; jNew &gt;= <span class="number">0</span> &amp;&amp; jNew &lt; len) &#123;</span><br><span class="line">                    <span class="type">Tile</span> <span class="variable">tNew</span> <span class="operator">=</span> b.tile(iNew,  jNew);</span><br><span class="line">                    <span class="keyword">if</span>(t.value() == tNew.value())&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四个函数</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602075351166.png" alt="image-20240602075351166"></p><p>贴上我的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tilt</span><span class="params">(Side side)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> changed;</span><br><span class="line">        changed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Modify this.board (and perhaps this.score) to account</span></span><br><span class="line">        <span class="comment">// for the tilt to the Side SIDE. If the board changed, set the</span></span><br><span class="line">        <span class="comment">// changed local variable to true.</span></span><br><span class="line">        board.setViewingPerspective(side);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; board.size(); c++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> board.size() - <span class="number">1</span>; r &gt;= <span class="number">0</span>; r--) &#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t1</span> <span class="operator">=</span> board.tile(c, r);</span><br><span class="line">                <span class="keyword">if</span> (t1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r2</span> <span class="operator">=</span> r - <span class="number">1</span>; r2 &gt;= <span class="number">0</span>; r2--) &#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">t2</span> <span class="operator">=</span> board.tile(c, r2);</span><br><span class="line">                        <span class="keyword">if</span> (t2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (t2.value() == t1.value()) &#123;</span><br><span class="line">                                board.move(c, r, t2);</span><br><span class="line">                                changed = <span class="literal">true</span>;</span><br><span class="line">                                score += <span class="number">2</span> * t1.value();</span><br><span class="line">                                r = r2;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; board.size(); c++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> board.size() - <span class="number">1</span>; r &gt;= <span class="number">0</span>; r--) &#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t1</span> <span class="operator">=</span> board.tile(c, r);</span><br><span class="line">                <span class="keyword">if</span> (t1 == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r2</span> <span class="operator">=</span> r - <span class="number">1</span>; r2 &gt;= <span class="number">0</span>; r2--) &#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">t2</span> <span class="operator">=</span> board.tile(c, r2);</span><br><span class="line">                        <span class="keyword">if</span> (t2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                            board.move(c, r, t2);</span><br><span class="line">                            changed = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        board.setViewingPerspective(Side.NORTH);</span><br><span class="line">        checkGameOver();</span><br><span class="line">        <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">            setChanged();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> changed;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行<code>testModel.java</code>也成功了。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602075532255.png" alt="image-20240602075532255"></p><p>开心，终于完成任务 了</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602080539030.png" alt="image-20240602080539030"></p><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><table><thead><tr><th align="center"></th><th align="center">DONE</th><th></th></tr></thead><tbody><tr><td align="center"><a href="https://sp21.datastructur.es/materials/lab/lab2/lab2">Debugging (due 01&#x2F;29)</a></td><td align="center"></td><td></td></tr><tr><td align="center">[<a href="https://sp21.datastructur.es/materials/proj/proj0/proj0">Project 0 due 1&#x2F;29]</a></td><td align="center">DONE</td><td></td></tr><tr><td align="center"></td><td align="center"></td><td></td></tr></tbody></table><p>现在把可能用到的网页放在这里</p><p>最主要的两个链接。</p><p><a href="https://www.gradescope.com/courses/137626">https://www.gradescope.com/courses/137626</a></p><p><a href="https://sp21.datastructur.es/">https://sp21.datastructur.es/</a></p><p>参考作业</p><p><a href="https://github.com/KANIKIG/cs61b-sp21/blob/main/proj0/game2048/Model.java">https://github.com/KANIKIG/cs61b-sp21/blob/main/proj0/game2048/Model.java</a></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;p&gt;摘要&lt;/p&gt;
&lt;p&gt;Git教程&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1HM411377j?p=1&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5&quot;&gt;https://www.bilibili.com/video/BV1HM411377j?p=1&amp;amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的博客，希望自己能够不要那么那么笨了。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="CS61B" scheme="https://bradtorres.github.io/tags/CS61B/"/>
    
    <category term="CSDIY" scheme="https://bradtorres.github.io/tags/CSDIY/"/>
    
  </entry>
  
  <entry>
    <title>2021CS61BWeek1and2</title>
    <link href="https://bradtorres.github.io/2024/05/29/2021CS61BWeek1and2/"/>
    <id>https://bradtorres.github.io/2024/05/29/2021CS61BWeek1and2/</id>
    <published>2024-05-29T02:59:04.000Z</published>
    <updated>2024-06-02T13:52:54.143Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="2021CS61BWeek1and2"><a href="#2021CS61BWeek1and2" class="headerlink" title="2021CS61BWeek1and2"></a>2021CS61BWeek1and2</h1><p>希望能坚持下去，下面这个链接给我坚持的兴趣。</p><p>怎样学习数据结构？ 伯克利神课CS61B 总结感悟，学习指南和避坑建议</p><p><a href="http://t.csdnimg.cn/6egG4">http://t.csdnimg.cn/6egG4</a></p><p>目前策略是这样</p><p>优先看完<a href="https://www.bilibili.com/video/BV1Ri421o7dS/?spm_id_from=333.999.0.0&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1Ri421o7dS/?spm_id_from=333.999.0.0&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p><p>如果有不清楚的在看英文原版</p><p><a href="https://www.bilibili.com/video/BV1QP4y1u7jv/?spm_id_from=333.337.search-card.all.click&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1QP4y1u7jv/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p><p>怎么实验室lab和家庭作业homework还不一样呢</p><p>目前进度windows安装git搞完了</p><p>这两个视频都是一样的，都是UCB CS 61B: Data Structures, Spring 2024</p><h1 id="L1-Introduction"><a href="#L1-Introduction" class="headerlink" title="L1-Introduction"></a>L1-Introduction</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String model;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> wheels;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String m)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.model = m;</span><br><span class="line">            <span class="built_in">this</span>.wheels = <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.wheels &lt; <span class="number">4</span>) &#123;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.model + <span class="string">&quot;no go vroom&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.model + <span class="string">&quot;go vroom&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWheels</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.wheels;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">driveIntoDitch</span><span class="params">(<span class="type">int</span> wheelsLost)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.wheels -= wheelsLost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;baoshijie&quot;</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;falali&quot;</span>);</span><br><span class="line">        c1.drive();</span><br><span class="line">        c1.driveIntoDitch(<span class="number">1</span>);</span><br><span class="line">        c1.drive();</span><br><span class="line">        System.out.println(c2.getWheels());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L2-Defining-and-Using-Classes"><a href="#L2-Defining-and-Using-Classes" class="headerlink" title="L2 - Defining and Using Classes"></a>L2 - Defining and Using Classes</h1><h2 id="Classes-in-Java"><a href="#Classes-in-Java" class="headerlink" title="Classes in Java"></a>Classes in Java</h2><p><code>Dog.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeNoise</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>DogLauncher.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DogLauncher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Dog.makeNoise();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>static是静态修饰符，什么叫静态修饰符呢？大家都知道，在程序中任何变量或者代码都是在编译时由系统自动分配内存来存储的，而所谓静态就是指在编译后所分配的内存会一直存在，直到程序退出内存才会释放这个空间，也就是只要程序在运行，那么这块内存就会一直存在。这样做有什么意义呢？在Java程序里面，所有的东西都是对象，而对象的抽象就是类，<strong>对于一个类而言，如果要使用他的成员，那么普通情况下必须先实例化对象后，通过对象的引用才能够访问这些成员，但是用static修饰的成员可以通过类名加“.”进行直接访问。也就是你不用实例化对象，对这整个类都是通用的，CS61B原话：用static修饰，对所有的Dog都是通用的。直接通过类名加“.”进行直接访问。</strong></p><p><code>Dog.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> weightInPounds;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> w)</span>&#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">makeNoise</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;yipyipyip!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;arooooooo!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>DogLauncher.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DogLauncher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">100</span>);</span><br><span class="line">        d1.makeNoise();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>哇，一开始觉得他们讲Dog的例子很难理解，但是听到后面豁然开朗，这个例子贯彻讲解始终，生动的比喻脱离了干涩难懂的术语，好记好懂好理解</p></blockquote><p>这两种语法上都是对的，但是用那个取决于你。</p><p><strong>你是喜欢有一个公正的观察者，还是喜欢特定的狗做把戏并将自己与其他狗进行比较</strong></p><p>&#x2F;&#x2F;所有的狗都有相同的通用的学名，那就用static关键字<br>&#x2F;&#x2F; 这是所有狗的学名，是整个类通用的东西，而不是一个变量。对于我创建的每一只狗，他都是常数<br>&#x2F;&#x2F; 不是某一特定狗的学名.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">binomen</span> <span class="operator">=</span> <span class="string">&quot;Canis familiaris&quot;</span>;</span><br></pre></td></tr></table></figure><p><code>Dog.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> weightInPounds;</span><br><span class="line">    <span class="comment">//所有的狗都有相同的通用的学名，那就用static关键字</span></span><br><span class="line">    <span class="comment">// 这是所有狗的学名，是整个类通用的东西，而不是一个变量。对于我创建的每一只狗，他都是常数</span></span><br><span class="line">    <span class="comment">// 不是某一特定狗的学名.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">binomen</span> <span class="operator">=</span> <span class="string">&quot;Canis familiaris&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> w)</span> &#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeNoise</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;yipyipyip!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;arooooooo!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title function_">maxDog</span><span class="params">(Dog d1, Dog d2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (d1.weightInPounds &gt; d2.weightInPounds)</span><br><span class="line">            <span class="keyword">return</span> d1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">maxDog</span><span class="params">(Dog d2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.weightInPounds &gt; d2.weightInPounds)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>DogLauncher.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DogLauncher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">chester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">yusuf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">17</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">larger</span> <span class="operator">=</span> Dog.maxDog(yusuf, chester);</span><br><span class="line">        larger.makeNoise();</span><br><span class="line"></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">huya</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">jaja</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">170</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">larger2</span> <span class="operator">=</span> huya.maxDog(jaja);</span><br><span class="line">        larger2.makeNoise();</span><br><span class="line"></span><br><span class="line">        System.out.println(Dog.binomen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Interactive-Debugging"><a href="#Interactive-Debugging" class="headerlink" title="Interactive Debugging"></a>Interactive Debugging</h2><p> 讲得很好，代码细节不重要，重要的是与调试器交互。就不贴代码了</p><h1 id="L3-Lists-I-References-Recursion-and-Lists"><a href="#L3-Lists-I-References-Recursion-and-Lists" class="headerlink" title="L3 - Lists I:References Recursion and Lists"></a>L3 - Lists I:References Recursion and Lists</h1><p>引用递归和列表，，是不是少了一章递归的视频</p><h2 id="Primitive-Types-Reference-Types-Parameter-Passing"><a href="#Primitive-Types-Reference-Types-Parameter-Passing" class="headerlink" title="Primitive Types ,Reference Types, Parameter Passing"></a>Primitive Types ,Reference Types, Parameter Passing</h2><p>Java可视化网站<a href="https://cscircles.cemc.uwaterloo.ca/java_visualize/#mode=display">https://cscircles.cemc.uwaterloo.ca/java_visualize/#mode=display</a></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529164851171.png" alt="image-20240529164851171"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529164914940.png" alt="image-20240529164914940"></p><p><strong>不是八种基本类型之一的任何东西都被称为引用类型</strong>（reference type）</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529165429175.png" alt="image-20240529165429175"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529165457136.png" alt="image-20240529165457136"></p><p>当你实例化一个对象的时候，实际上是创建了对该对象的引用</p><p><code>new Walrus(1000, 8.3)</code>返回内存中为海象结构体分配的空间的首地址。你可以把<code>new</code>关键字想象成返回一个数字，这个数字是在内存中的编号位，也就是地址</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529170007680.png" alt="image-20240529170007680"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Walrus someWalrus;</span><br><span class="line">someWalrus = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><code>someWalrus</code> 是一个指针类型的变量，存放了地址，我们根据这个地址找到海象的在的位置。</p><p>这里赋值为<code>NULL</code>就类似于C语言里面 <code>int *p = NULL;</code>一样</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529170344972.png" alt="image-20240529170344972"></p><p><code>someWalrus</code>并没有存放海象，相反，这个空间实际上存放着我的海象在内存中的位置</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529170441393.png" alt="image-20240529170441393"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529170643257.png" alt="image-20240529170643257"></p><p>盒子和指针表示法</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529171107791.png" alt="image-20240529171107791"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529171141488.png" alt="image-20240529171141488"></p><p>八种类型直接放内存盒子里面，因为他们是原始类型</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529171413511.png" alt="image-20240529171413511"></p><p>其余类型都是引用类型</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529171353545.png" alt="image-20240529171353545"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529171655899.png" alt="image-20240529171655899"></p><h2 id="Instantiation-of-Arrays"><a href="#Instantiation-of-Arrays" class="headerlink" title="Instantiation of Arrays"></a>Instantiation of Arrays</h2><blockquote><p><strong>数据不是八种原始类型之一</strong></p></blockquote><p>停下来，，往前找作业左了</p><h1 id="下面是2021Spring的课程笔记"><a href="#下面是2021Spring的课程笔记" class="headerlink" title="下面是2021Spring的课程笔记"></a>下面是2021Spring的课程笔记</h1><h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><p>24OUT表示以后24的视频非特殊情况，例如21讲的自己不懂，除非特殊情况都不看24的讲课视频</p><table><thead><tr><th align="center">VideoName</th><th align="center">Done</th><th align="center">warning</th></tr></thead><tbody><tr><td align="center">sp24 1.intro</td><td align="center">Done</td><td align="center"></td></tr><tr><td align="center">1.intro</td><td align="center">Done</td><td align="center"></td></tr><tr><td align="center">Discussion</td><td align="center">Done</td><td align="center"></td></tr><tr><td align="center">Lab1</td><td align="center">Done</td><td align="center"></td></tr><tr><td align="center">Project 0.intro</td><td align="center">Done</td><td align="center"></td></tr><tr><td align="center">sp24 2.Defin</td><td align="center">Done</td><td align="center">24OUT</td></tr><tr><td align="center">2.Defining</td><td align="center">Done</td><td align="center"></td></tr><tr><td align="center">2.live Q&amp;A</td><td align="center">Done</td><td align="center">快速扫过</td></tr><tr><td align="center">Week1Over</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="理清课程资料的使用思路"><a href="#理清课程资料的使用思路" class="headerlink" title="理清课程资料的使用思路"></a>理清课程资料的使用思路</h2><p>懂了，如下面的图。有特地标出来的就是24年的课，没有特地标出来就是21年的课。链接是这个</p><p>【2024 双语字幕🎉 | UCB CS 61B: Data Structures, Spring 2024】 <a href="https://www.bilibili.com/video/BV1QP4y1u7jv/?p=5&share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1QP4y1u7jv/?p=5&amp;share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p><p>但是呢，他很多21的课没做双语字幕，自动翻译的中文字幕差太多了。所以看21的课还是用这个视频</p><p>【【双语字幕】CS 61B 数据结构 | 整合版 | UCB Data Structure Spring 2021 | 转码必看 Java 算法 Leetcode】 <a href="https://www.bilibili.com/video/BV1q3411V7rS/?p=2&share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1q3411V7rS/?p=2&amp;share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p><p>但是目录和检查各个作业等等还是用第一个视频的标题把。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601104101857.png" alt="image-20240601104101857"></p><h2 id="Project-0-intro"><a href="#Project-0-intro" class="headerlink" title="Project 0.intro"></a>Project 0.intro</h2><p>有人带着看Proj 0的文档帮你在旁边讲解还是好很多，边看文档边听他讲吧。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601105150021.png" alt="image-20240601105150021"></p><p>看完了，每一个都尝试五分钟，如果不会就去看别人的讲解。</p><h2 id="2-Defining"><a href="#2-Defining" class="headerlink" title="2.Defining"></a>2.Defining</h2><p>非静态变量记忆成实例变量</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601110854061.png" alt="image-20240601110854061"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601111140111.png" alt="image-20240601111140111"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601111448403.png" alt="image-20240601111448403"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601115005446.png" alt="image-20240601115005446"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601115241087.png" alt="image-20240601115241087"></p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601213427964.png" alt="image-20240601213427964"></p><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><p>24OUT表示以后24的视频非特殊情况，例如21讲的自己不懂，除非特殊情况都不看24的讲课视频。翻译成中文的视频的标题为我下面的VideoName，也尝试过写成官方网站上英文的样子，但是对学习的效率有较大的影响，所以还是写成中文。</p><table><thead><tr><th align="center">VideoName</th><th align="center">Done</th><th align="center">warning</th></tr></thead><tbody><tr><td align="center">sp24 6.测试</td><td align="center">24OUT</td><td align="center"></td></tr><tr><td align="center">3.测试</td><td align="center">Done</td><td align="center"></td></tr><tr><td align="center">3.现场问答</td><td align="center">扫过</td><td align="center"></td></tr><tr><td align="center">sp24 3.列表1</td><td align="center">24OUT</td><td align="center"></td></tr><tr><td align="center">4.列表1</td><td align="center">Done</td><td align="center"></td></tr><tr><td align="center">4.现场问答</td><td align="center">扫过</td><td align="center"></td></tr><tr><td align="center">sp24 4.列表2</td><td align="center">24OUT</td><td align="center"></td></tr><tr><td align="center">5.列表2</td><td align="center">Done</td><td align="center"></td></tr><tr><td align="center">5.现场问答</td><td align="center">扫过</td><td align="center"></td></tr><tr><td align="center">sp24</td><td align="center">24OUT</td><td align="center"></td></tr><tr><td align="center">6.清单3</td><td align="center">ing</td><td align="center"></td></tr><tr><td align="center">6.现场问答</td><td align="center">扫过</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>还是尽量模拟他们的表格，来一个一个完成任务吧</p><table><thead><tr><th align="center"><strong>Reading</strong></th><th align="center"><strong>Lecture</strong></th><th align="center"><strong>Discussion</strong></th></tr></thead><tbody><tr><td align="center"><a href="https://joshhug.gitbooks.io/hug61b/content/chap3/chap31.html">3.1</a>正在看，  Optional不看</td><td align="center">\3. Testing<br/>[<a href="https://www.youtube.com/watch?v=j12X417J85g&list=PL8FaHk7qbOD7RM4xH3tTQgYhNsDt2Gt7o&index=1">video</a>]不看 ‌[<a href="https://docs.google.com/presentation/d/1Aop1woPUquEkAamUj3CitvX4UsPZArBUsjhZnId4C-U/edit?usp=sharing">slides</a>]看了 ‌[<a href="https://sp21.datastructur.es/materials/lectures/lec7/lec7">guide</a>] ‌[<a href="https://youtu.be/51YjFL6nBFo">live Q&amp;A</a>] ‌ ‌</td><td align="center"></td></tr><tr><td align="center"><a href="https://joshhug.gitbooks.io/hug61b/content/chap2/chap21.html">2.1</a></td><td align="center">\4. References, Recursion, and Lists<br/>[<a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD7lprwG_xdIMLrwibZDi-Ll">video</a>] ‌[<a href="https://docs.google.com/presentation/d/1HQqHSA-h1vRHeResuxmDBGNQACkmxpUBHF3m4-oKU_Q/edit?usp=sharing">slides</a>] ‌[<a href="https://sp21.datastructur.es/materials/lectures/lec3/lec3.html">guide</a>] ‌[<a href="https://youtu.be/20ZhW106838">live Q&amp;A</a>] ‌</td><td align="center"></td></tr><tr><td align="center"><a href="https://joshhug.gitbooks.io/hug61b/content/chap2/chap22.html">2.2</a></td><td align="center">\5. SLLists, Nested Classes, Sentinel Nodes<br/>[<a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7">video</a>] ‌[<a href="https://docs.google.com/presentation/d/1q6p0spGPmj8rFrQnWKp_QZJRFHg-IkHE1L9BfZc0f0Q/edit?usp=sharing">slides</a>] ‌[<a href="https://sp21.datastructur.es/materials/lectures/lec4/lec4">guide</a>] ‌[<a href="https://youtu.be/46DJBZC5Yvc">live Q&amp;A</a>] ‌</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><strong>Discussion</strong></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602090858898.png" alt="image-20240602090858898"></p><h2 id="3-Testing"><a href="#3-Testing" class="headerlink" title="3_Testing"></a>3_Testing</h2><blockquote><p><strong>Important note:</strong> You may be asking “Why are you looping through the entire array? Why don’t you just check if the arrays are equal using <code>==</code>? “. The reason is, when we test for equality of two objects, we cannot simply use the <code>==</code> operator. The <code>==</code> operator compares the literal bits in the memory boxes, e.g. <code>input == expected</code> would test whether or not the addresses of <code>input</code> and <code>expected</code> are the same, not whether the values in the arrays are the same. Instead, we used a loop in <code>testSort</code>, and print out the first mismatch. You could also use the built-in method <code>java.util.Arrays.equals</code> instead of a loop.</p></blockquote><p>TestSort.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSort</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Sort.sort(input);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!input[i].equals(expected[i])) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Mismatch in position &quot;</span> + i + <span class="string">&quot;, expected: &quot;</span> + expected[i] + <span class="string">&quot;, but got :&quot;</span> + input[i]);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testSort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Intellij IDEA junit 使用之org.junit爆红</p><p>参考这篇博客<a href="https://blog.csdn.net/qq_31424825/article/details/84873575">https://blog.csdn.net/qq_31424825/article/details/84873575</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSort</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        org.junit.Assert.assertArrayEquals(expected, input);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testSort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个伟大的事情，他这个再查看递归里面的堆栈的可视化，，真是一个伟大的插件</p><p>每一层的start和smallestIndex都显示出来。这样子递归就清楚多了。</p><p>虽然IDEA有调试的图形化插件Visualizer但是Clion好像没有</p><p>在windows下有vistual studio，针对<a href="https://so.csdn.net/so/search?q=opencv&spm=1001.2101.3001.7020">opencv</a>有image watch，在ubuntu下用Clion插件Image Watch要收费，遂研究OpenImageDebugger与CLion问题及在Clion中调试方法</p><p>搜了一搜，，感觉Clion是真没有，不过无所谓了。及时止损。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602113015253.png" alt="image-20240602113015253"></p><p>用</p><p><code>import org.junit.Test;</code></p><p><code>import static org.junit.Assert.*;</code></p><p>来简化代码</p><p>事实上，这种方法帮助你省略了，<code>main</code>函数，你不必自己在main函数里面依次调用每一个testXXX测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSort</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSort</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        assertArrayEquals(expected, input);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Test the Sort.findSmallest method.*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testfindSmallest</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">expected</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">actual</span> <span class="operator">=</span> Sort.findSmallest(input, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(expected, actual);</span><br><span class="line">        String[] input2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;pigs&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">expected2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">actual2</span> <span class="operator">=</span> Sort.findSmallest(input2, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(expected2, actual2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Test the Sort.swap method.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSwap</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Sort.swap(input, a, b);</span><br><span class="line"></span><br><span class="line">        assertArrayEquals(expected, input);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-References-Recursion-and-Lists"><a href="#4-References-Recursion-and-Lists" class="headerlink" title="4_References, Recursion, and Lists"></a>4_References, Recursion, and Lists</h2><h3 id="Primitive-Types"><a href="#Primitive-Types" class="headerlink" title="Primitive Types"></a>Primitive Types</h3><p>前半部分看过，就在上面24年的笔记上面</p><p>想起来一件事情， 如果自己还觉得无法理解，或者觉得字幕翻译的不够好的话，，可以在看对应章节的24的中文ai配音视频。它的字幕是精心翻译校对过的，同时有中文声音让人也更加专注</p><h3 id="Parameter-Passing"><a href="#Parameter-Passing" class="headerlink" title="Parameter Passing"></a>Parameter Passing</h3><p><a href="https://cscircles.cemc.uwaterloo.ca/java_visualize/#mode=display">Java Visualizer (uwaterloo.ca)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PollQuestions</span> &#123;</span><br><span class="line"><span class="number">2</span>   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="number">3</span>      <span class="type">Walrus</span> <span class="variable">walrus</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Walrus</span>(<span class="number">3500</span>, <span class="number">10.5</span>);</span><br><span class="line"><span class="number">4</span>      <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"><span class="number">5</span>      </span><br><span class="line"><span class="number">6</span>      doStuff(walrus, x);</span><br><span class="line"><span class="number">7</span>      System.out.println(walrus);</span><br><span class="line"><span class="number">8</span>      System.out.println(x);</span><br><span class="line"><span class="number">9</span>   &#125;</span><br><span class="line"><span class="number">10</span>   </span><br><span class="line"><span class="number">11</span>   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doStuff</span><span class="params">(Walrus W, <span class="type">int</span> x)</span> &#123;</span><br><span class="line"><span class="number">12</span>      W.weight = W.weight - <span class="number">100</span>;</span><br><span class="line"><span class="number">13</span>      x = x - <span class="number">5</span>;</span><br><span class="line"><span class="number">14</span>   &#125;</span><br><span class="line"><span class="number">15</span>   </span><br><span class="line"><span class="number">16</span>   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Walrus</span> &#123;</span><br><span class="line"><span class="number">17</span>      <span class="keyword">public</span> <span class="type">int</span> weight;</span><br><span class="line"><span class="number">18</span>      <span class="keyword">public</span> <span class="type">double</span> tuskSize;</span><br><span class="line"><span class="number">19</span>      </span><br><span class="line"><span class="number">20</span>      <span class="keyword">public</span> <span class="title function_">Walrus</span><span class="params">(<span class="type">int</span> w, <span class="type">double</span> ts)</span> &#123;</span><br><span class="line"><span class="number">21</span>         weight = w;</span><br><span class="line"><span class="number">22</span>         tuskSize = ts;</span><br><span class="line"><span class="number">23</span>      &#125;</span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">25</span>      <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">26</span>         <span class="keyword">return</span> String.format(<span class="string">&quot;weight: %d, tusk size: %.2f&quot;</span>, weight, tuskSize);</span><br><span class="line"><span class="number">27</span>      &#125;</span><br><span class="line"><span class="number">28</span>   &#125;</span><br><span class="line"><span class="number">29</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Instantiation-of-Arrays-1"><a href="#Instantiation-of-Arrays-1" class="headerlink" title="Instantiation of Arrays"></a>Instantiation of Arrays</h3><p>数组也属于非八种原始变量，因此数组名里面放着第一个数组元素的地址。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602124146826.png" alt="image-20240602124146826"></p><h3 id="IniList-and-Linked-Data-Structures-See-webcast-or-code-directory"><a href="#IniList-and-Linked-Data-Structures-See-webcast-or-code-directory" class="headerlink" title="IniList and Linked Data Structures(See webcast or code directory)"></a>IniList and Linked Data Structures(See webcast or code directory)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IntList</span><span class="params">(<span class="type">int</span> f, IntList r)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.first = f;</span><br><span class="line">        <span class="built_in">this</span>.rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//这好像相当于链表的头插法</span></span><br><span class="line">        <span class="type">IntList</span> <span class="variable">L</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntList</span>(<span class="number">15</span>, <span class="literal">null</span>);</span><br><span class="line">        L = <span class="keyword">new</span> <span class="title class_">IntList</span>(<span class="number">10</span>, L);</span><br><span class="line">        L = <span class="keyword">new</span> <span class="title class_">IntList</span>(<span class="number">5</span>, L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602130830923.png" alt="image-20240602130830923"></p><p>t这课堂作业要不要做，是课上直接在自己的电脑上面做呢，，还是git clone他的课程代码呢？？</p><p>课上做得了。自己又不是不会，之前写过好多类似的代码，这个不用太严肃 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title function_">incrList</span><span class="params">(IntList L, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//用dummyNode处理尾插法可以避免分类讨论</span></span><br><span class="line">        <span class="comment">//Q用尾插法，事实上Q就是dummyNode.rest,L从前往后遍历</span></span><br><span class="line">        <span class="type">IntList</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntList</span>(-<span class="number">1</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">IntList</span> <span class="variable">tailQ</span> <span class="operator">=</span> dummyNode;</span><br><span class="line">        <span class="type">IntList</span> <span class="variable">cur</span> <span class="operator">=</span> L;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">IntList</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntList</span>(cur.first + x, <span class="literal">null</span>);</span><br><span class="line">            tailQ.rest = newNode;</span><br><span class="line">            tailQ = newNode;</span><br><span class="line">            cur = cur.rest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.rest;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602150159126.png" alt="image-20240602150159126"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title function_">dincrList</span><span class="params">(IntList L, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">IntList</span> <span class="variable">cur</span> <span class="operator">=</span> L;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            cur.first += x;</span><br><span class="line">            cur = cur.rest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  L;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602150705759.png" alt="image-20240602150705759"></p><h2 id="5-SLLists-Nested-Classes-Sentinel-Notes"><a href="#5-SLLists-Nested-Classes-Sentinel-Notes" class="headerlink" title="5_SLLists, Nested Classes, Sentinel Notes"></a>5_SLLists, Nested Classes, Sentinel Notes</h2><p>nest，嵌套的意思</p><h3 id="SLList-A-Singly-Linked-List-单链表"><a href="#SLList-A-Singly-Linked-List-单链表" class="headerlink" title="SLList: A Singly-Linked List.单链表"></a><em>SLList</em>: A Singly-Linked List.单链表</h3><p><code>IntNode.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntNode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> item;</span><br><span class="line">    <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IntNode</span><span class="params">(<span class="type">int</span> i, IntNode n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = i;</span><br><span class="line">        <span class="built_in">this</span>.next = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>SLList.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InsufficientResourcesException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SLList</span> &#123;</span><br><span class="line">    <span class="comment">//理解成L链表只存放着第一个结点的地址，也就是L链表里面的元素就是一个指针变量，放着第一个结点的地址</span></span><br><span class="line">    <span class="comment">// 这就是C++49那个花生老师的写法，一模一样，，运气太好了。自己越是学习，感觉运气就越好</span></span><br><span class="line">    <span class="keyword">public</span> IntNode first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SLList</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        first = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Adds x to the front of the list*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line"><span class="comment">//        IntNode newNode = new IntNode(x, null);</span></span><br><span class="line"><span class="comment">//        newNode.next = first;</span></span><br><span class="line"><span class="comment">//        first = newNode;</span></span><br><span class="line">        <span class="comment">//上面三行在Java里面可以写成一行代码，真的难绷</span></span><br><span class="line">        first = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFirst</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.first.item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SLList</span> <span class="variable">L</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SLList</span>(<span class="number">15</span>);</span><br><span class="line">        L.addFirst(<span class="number">10</span>);</span><br><span class="line">        L.addFirst(<span class="number">5</span>);</span><br><span class="line">        System.out.println(L.getFirst());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602154320505.png" alt="image-20240602154320505"></p><h3 id="Naked-Linked-Lists-IntList-VS-SLLists"><a href="#Naked-Linked-Lists-IntList-VS-SLLists" class="headerlink" title="Naked Linked Lists (IntList) VS SLLists"></a>Naked Linked Lists (IntList) VS SLLists</h3><p>肯定是下面的 好，，大家都约定俗成了、</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602154812068.png" alt="image-20240602154812068"></p><p>吓死我了，，还以为自己写错 了。。原来只是同一事物的另一种可视化 </p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602161250228.png" alt="image-20240602161250228"></p><p>原来私有静态结构是这样用的 。private static</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602162114028.png" alt="image-20240602162114028"></p><p>为了递归的求他的大小，不得不采用这种新的编程。创建private static类型，它使用神的语言（就是说采用裸露的数据结构，naked Linked Lists)</p><p>贴上我的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InsufficientResourcesException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SLList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntNode</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">IntNode</span><span class="params">(<span class="type">int</span> i, IntNode n)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = i;</span><br><span class="line">            <span class="built_in">this</span>.next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//理解成L链表只存放着第一个结点的地址，也就是L链表里面的元素就是一个指针变量，放着第一个结点的地址</span></span><br><span class="line">    <span class="comment">// 这就是C++49那个花生老师的写法，一模一样，，运气太好了。自己越是学习，感觉运气就越好</span></span><br><span class="line">    <span class="keyword">private</span> IntNode first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SLList</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        first = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Adds x to the front of the list*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line"><span class="comment">//        IntNode newNode = new IntNode(x, null);</span></span><br><span class="line"><span class="comment">//        newNode.next = first;</span></span><br><span class="line"><span class="comment">//        first = newNode;</span></span><br><span class="line">        <span class="comment">//上面三行在Java里面可以写成一行代码，真的难绷</span></span><br><span class="line">        first = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.first == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//空表</span></span><br><span class="line">            <span class="built_in">this</span>.addFirst(x);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">IntNode</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="built_in">this</span>.first;</span><br><span class="line">            <span class="keyword">while</span> (tail.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">            tail.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//tail = tail.next;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns the size of the list that starts at IntNode p.*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">(IntNode p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + size(p.next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size(<span class="built_in">this</span>.first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sizeNoRecursion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">IntNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="built_in">this</span>.first;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SLList</span> <span class="variable">L</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SLList</span>(<span class="number">15</span>);</span><br><span class="line">        L.addFirst(<span class="number">10</span>);</span><br><span class="line">        L.addFirst(<span class="number">5</span>);</span><br><span class="line">        L.addLast(<span class="number">20</span>);</span><br><span class="line">        System.out.println(L.getFirst());</span><br><span class="line">        System.out.println(L.size());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加一个size变量，求size的时候，时间复杂度最低。</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602163651355.png" alt="image-20240602163651355"></p><p>这个教授说SSList的优势是能够实例化一个空列表，是吗？？</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602163846623.png" alt="image-20240602163846623"></p><p>他最终还是将了，，他又要写创建空表，，又要写尾插法还不带判断空表的情况，果然他还是讲了这部分的内容。</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.first == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//空表</span></span><br><span class="line">            <span class="comment">//不能再调用addFirst()函数，因为size在这儿函数里面也会++，，最终会导致size＋2</span></span><br><span class="line"><span class="comment">//            this.addFirst(x);</span></span><br><span class="line">            <span class="built_in">this</span>.first =  <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">IntNode</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="built_in">this</span>.first;</span><br><span class="line">            <span class="keyword">while</span> (tail.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">            tail.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//tail = tail.next;</span></span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后开始讲dummyNode，他这里了叫sentinel Nodes，哨兵结点</p><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602165524953.png" alt="image-20240602165524953"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InsufficientResourcesException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SLList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntNode</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">IntNode</span><span class="params">(<span class="type">int</span> i, IntNode n)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = i;</span><br><span class="line">            <span class="built_in">this</span>.next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//理解成L链表只存放着第一个结点的地址，也就是L链表里面的元素就是一个指针变量，放着第一个结点的地址</span></span><br><span class="line">    <span class="comment">// 这就是C++49那个花生老师的写法，一模一样，，运气太好了。自己越是学习，感觉运气就越好</span></span><br><span class="line"><span class="comment">//    private IntNode first;</span></span><br><span class="line">    <span class="keyword">private</span> IntNode sentinel;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Create an empty SLList</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SLList</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        sentinel = <span class="keyword">new</span> <span class="title class_">IntNode</span>(<span class="number">63</span>, <span class="literal">null</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SLList</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> <span class="title class_">IntNode</span>(<span class="number">63</span>, <span class="literal">null</span>);</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Adds x to the front of the list*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line"><span class="comment">//        IntNode newNode = new IntNode(x, null);</span></span><br><span class="line"><span class="comment">//        newNode.next = first;</span></span><br><span class="line"><span class="comment">//        first = newNode;</span></span><br><span class="line">        <span class="comment">//上面三行在Java里面可以写成一行代码，真的难绷</span></span><br><span class="line">        sentinel.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, sentinel.next);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.sentinel.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">IntNode</span> <span class="variable">p</span> <span class="operator">=</span> sentinel;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns the size of the list that starts at IntNode p.*/</span></span><br><span class="line"><span class="comment">//    private static int size(IntNode p) &#123;</span></span><br><span class="line"><span class="comment">//        if (p.next == null) return 1;</span></span><br><span class="line"><span class="comment">//        return 1 + size(p.next);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public int sizeNoRecursion() &#123;</span></span><br><span class="line"><span class="comment">//        int cnt = 0;</span></span><br><span class="line"><span class="comment">//        IntNode p = this.first;</span></span><br><span class="line"><span class="comment">//        while (p != null) &#123;</span></span><br><span class="line"><span class="comment">//            cnt++;</span></span><br><span class="line"><span class="comment">//            p = p.next;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return cnt;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SLList</span> <span class="variable">L</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SLList</span>();</span><br><span class="line"><span class="comment">//        L.addFirst(10);</span></span><br><span class="line"><span class="comment">//        L.addFirst(5);</span></span><br><span class="line">        L.addLast(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//        System.out.println(L.getFirst());</span></span><br><span class="line">        System.out.println(L.size());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不变量的好处。例如sentinel就是一种不变量，保证永远不为空</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;\assets\js\Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;2021CS61BWeek1and2&quot;&gt;&lt;a href=&quot;#2021CS61BWeek1and2&quot; class=&quot;headerlink&quot; title=&quot;2021CS61BWeek1and2&quot;&gt;&lt;/a&gt;2021CS61BWeek1and2&lt;/h1&gt;&lt;p&gt;希望能坚持下去，下面这个链接给我坚持的兴趣。&lt;/p&gt;
&lt;p&gt;怎样学习数据结构？ 伯克利神课CS61B 总结感悟，学习指南和避坑建议&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://t.csdnimg.cn/6egG4&quot;&gt;http://t.csdnimg.cn/6egG4&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="CS61B" scheme="https://bradtorres.github.io/tags/CS61B/"/>
    
    <category term="CSDIY" scheme="https://bradtorres.github.io/tags/CSDIY/"/>
    
  </entry>
  
</feed>
