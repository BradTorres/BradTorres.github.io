<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021CS61B-LabsANDHWs</title>
    <url>/2024/05/29/2021CS61B-LabsANDHWs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>摘要</p>
<p>Git教程</p>
<p><a href="https://www.bilibili.com/video/BV1HM411377j?p=1&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1HM411377j?p=1&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
<p><strong>我的博客，希望自己能够不要那么那么笨了。</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529230134500.png" alt="image-20240529230134500"></p>
<p>我记得，好像是vscode吧，，给你看个截图</p>
<p>是很久以前配置的，懒得改了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529230217348.png" alt="image-20240529230217348"></p>
<p>有点没绷住，git clone 的时候不能开代理，不然就会出错</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529232044779.png" alt="image-20240529232044779"></p>
<p>太棒了，，过去的点滴积累没有白费，，太好了！！</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529233931878.png" alt="image-20240529233931878"></p>
<p>我换过桌面，D盘里面的桌面是DesktopNew。真正的Desktop在C盘。里面放着cs61b</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529234714485.png" alt="image-20240529234714485"></p>
<p>太棒了，本来是蒙的，没想到youyouyou蒙对了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529235312981.png" alt="image-20240529235312981"></p>
<p>yes，离成功又近了一步</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529235612781.png" alt="image-20240529235612781"></p>
<p>太棒了，，成功辣，，把他们的代码骨架skeleton都搞下来了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529235815313.png" alt="image-20240529235815313"></p>
<p>哈哈到这里出错了，，但是无所谓了。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240530001235893.png" alt="image-20240530001235893"></p>
<p>oracleopenjdk不行就换，但这也是之后的事情了，我已经进步太多了。</p>
<p>哈哈哈，绷不住了，，到最后我还是用的java8跑的，无所谓了，，后面再改吧。反正前面简单从内容用不到新语言的特性</p>
<p>修复测试乘成功了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240530094937378.png" alt="image-20240530094937378"></p>
<p>git提交应该是没出错的，但是他的自动评分系统报错，个人感觉是因jdk版本的原因。这个之后再改吧，已经是几乎成功了。</p>
<p>我突然其实是感觉课程不配套导致的，我的作业写的是24年的。</p>
<p>但是评测gradescope测评的是2021年从春季的课程</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240530111111533.png" alt="image-20240530111111533"></p>
<p>靠了，，放出没看懂他们的话，，现在看懂了。</p>
<p>既然只有21spring开放的测评机，那一切都从21Spring 的版本为准吧。版本不重要，重要的是坚持做完。</p>
<p>搜了搜有没有CS61B的2024Spring的入学代码，完全找不到。网上都是2021Spring的博客和笔记，个人猜测是2021Spring的Gradescope开放的，所以大家都用这个学期的版本。那我也学这个学期的版本，与大部分人同步得了。</p>
<p>重新换任务我也等到6.1号之后了。</p>
<p>真别急，谁说最后还用不用的着你的程序代码呢，慢点开始。看了看电脑设置多个jdk麻烦死了。不想动了，不管这些了。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240530111731459.png" alt="image-20240530111731459"></p>
<h1 id="上面都是2024SpringCS61B的Lab01的过程，我现在改成2021SpringCS61B了。"><a href="#上面都是2024SpringCS61B的Lab01的过程，我现在改成2021SpringCS61B了。" class="headerlink" title="上面都是2024SpringCS61B的Lab01的过程，我现在改成2021SpringCS61B了。"></a>上面都是2024SpringCS61B的Lab01的过程，我现在改成2021SpringCS61B了。</h1><h1 id="Week1✔"><a href="#Week1✔" class="headerlink" title="Week1✔"></a>Week1✔</h1><h2 id="Lab-1-Setup-Setting-Up-Your-Computer✔"><a href="#Lab-1-Setup-Setting-Up-Your-Computer✔" class="headerlink" title="Lab 1 Setup: Setting Up Your Computer✔"></a>Lab 1 Setup: Setting Up Your Computer✔</h2><p>hhhhhhhhhhhhh为什么我这里java HelloWorld成功了，但是之前不成功，难道真是的用户变量里面的CLASSPATH的alg4.jar导致的吗。</p>
<p>感觉用Windows Terminal也一样行，我试试</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531172306320.png" alt="image-20240531172306320"></p>
<p>果然是是的用户变量里面的CLASSPATH的alg4.jar导致的。奶奶的</p>
<p>那我的普林斯顿的那个之后放到后面做了。因为alg4的配置比我先做的更麻烦，我先歇一会。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531172454123.png" alt="image-20240531172454123"></p>
<h2 id="Lab-1-IntelliJ-Java-git✔"><a href="#Lab-1-IntelliJ-Java-git✔" class="headerlink" title="Lab 1: IntelliJ, Java, git✔"></a>Lab 1: IntelliJ, Java, git✔</h2><p>太棒了，这个也做完了。</p>
<p>而且自动评分器得了满分。太好了</p>
<p>有个小小的报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Cannot resolve symbol &#x27;String&#x27; 和 &#x27;System’</span><br></pre></td></tr></table></figure>

<p>解决方法<a href="https://blog.csdn.net/wy_hhxx/article/details/121239112">https://blog.csdn.net/wy_hhxx/article/details/121239112</a></p>
<p>个人感觉原因是，把别人的setting导入进来的时候，别人的jdk路径和自己的jdk路径不一样，所以会有这个报错。</p>
<p>果然好了，不报错了</p>
<p>这也解决了我的选择困难症，再也不用纠结用哪个color scheme,用加州大学伯克利分校的教授同款怎么样都是好。好好哈后</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531201052203.png" alt="image-20240531201052203"></p>
<h2 id="HW-0-A-Java-Crash-Course✔"><a href="#HW-0-A-Java-Crash-Course✔" class="headerlink" title="HW 0: A Java Crash Course✔"></a>HW 0: A Java Crash Course✔</h2><p>讲的很细，和C++49讲的一样</p>
<p><strong>中断并继续</strong></p>
<p>有时，您可能会发现使用<code>break</code>或<code>continue</code>关键字很有用。该<code>continue</code>语句跳过循环当前迭代的其余部分，<strong>有效地直接跳转到增量条件。</strong></p>
<p><strong>增强的 For 循环</strong></p>
<p>这一点和acwing讲的一样</p>
<p>Java 还支持使用“增强的 for 循环”对数组进行迭代。基本思想是，在很多情况下我们实际上根本不关心索引。在这种情况下，我们避免使用涉及冒号的特殊语法来创建索引变量。</p>
<p>例如，在下面的代码中，我们执行的操作与<code>BreakDemo</code>上面的完全相同。但是，在这种情况下，我们不创建索引<code>i</code>。相反，从开始到，只接受<code>String</code> <code>s</code>每个的标识一次。您可以通过<a href="https://goo.gl/wmhVPM">此链接</a>试用此代码。<code>String``a``a[0]``a[a.length - 1]</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnhancedForBreakDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] a = &#123;<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;laser horse&quot;</span>, <span class="string">&quot;ketchup&quot;</span>, <span class="string">&quot;horse&quot;</span>, <span class="string">&quot;horbse&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : a) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j += <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">                <span class="keyword">if</span> (s.contains(<span class="string">&quot;horse&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Project-0-2048✔"><a href="#Project-0-2048✔" class="headerlink" title="Project 0: 2048✔"></a>Project 0: 2048✔</h2><p>好难，要做吗</p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://youtu.be/Xzihuj_JZBI">您可以在https://youtu.be/Xzihuj_JZBI</a>找到该项目的高级概述。</p>
<p>但您的任务仅存在于四种方法中<code>Model.java</code>，并且仅限于四种方法。(感觉没那么难)，其他的部分他都给我封装好 了。</p>
<h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>在这个项目中，您将构建此游戏的核心逻辑。也就是说，我们已经整合了所有 GUI 代码、处理按键以及大量其他框架。<strong>您的工作是完成最重要和最有趣的部分。</strong></p>
<p>具体来说，您将在文件中填写 4 种方法<code>Model.java</code>，这些方法控制用户按下某些键后发生的情况。</p>
<p>在第一次移动之前，应用程序会将包含 2 或 4 的方块添加到最初为空的棋盘上的随机方格中。2 或 4 的选择是随机的，选择 2 的概率为 75%，选择 4 的概率为 25%</p>
<p>以下是发生合并时的完整规则，如上图所示。</p>
<ol>
<li>两块相同数值的牌<em>合并</em>为一块牌，其数字是初始数字的两倍。</li>
<li>合并后的图块不会在该倾斜度上再次合并。例如，如果我们有 [X, 2, 2, 4]，其中 X 代表空白区域，我们将图块向左移动，最终结果应该是 [4, 4, X, X]，而不是 [8, X, X, X]。这是因为最左边的 <strong>4 已经是合并的一部分，因此不应再次合并。</strong></li>
<li>当运动方向上的三个相邻图块具有相同的编号时，运动方向上的<strong>前两个</strong>图块将合并，而后面的图块则不会合并。例如，如果我们有 [X, 2, 2, 2] 并将图块向左移动，则最终结果应该是 [4, 2, X, X]，而不是 [2, 4, X, X]。</li>
</ol>
<p>根据这些规则，如果在运动方向上有四个相邻的图块具有相同的编号，它们将形成两个合并的图块。例如，如果我们有 [4, 4, 4, 4]，那么如果我们向左移动，我们最终会得到 [8, 8, X, X]。这是因为前两个图块将根据规则 3 合并，然后后面的两个图块将合并，但是由于规则 2，这些合并的图块（在我们的示例中为 8）不会在该倾斜方向上自行合并。您会在上面的动画 GIF 中找到上面列出的 3 条规则中的每一个的应用，因此请仔细观看几次以很好地理解这些规则。</p>
<p>注意：您的代码不会添加任何新图块！我们已经为您完成了这一部分。</p>
<p>您的代码需要更新分数</p>
<p>当当前玩家没有可用的移动（没有倾斜可以改变棋盘）或移动形成包含 2048 的方格时，游戏结束。您的代码将负责检测游戏何时结束。</p>
<h3 id="作业理念与课程设计"><a href="#作业理念与课程设计" class="headerlink" title="作业理念与课程设计"></a>作业理念与课程设计</h3><p>当您进行该项目的第四个最终任务（编写方法<code>tilt</code>）时，其中一个挑战是找出这些方法和实例变量中的哪些是有用的。</p>
<h4 id="Board"><a href="#Board" class="headerlink" title="Board"></a>Board</h4><p>此类代表棋盘本身。它有三种方法供您使用：<code>setViewingPerspective</code>、<code>tile</code>、<code>move</code>。您也可以选择使用 进行实验<code>getRandomNonNullTile</code>。</p>
<p><strong>您只能编辑<code>Model.java</code>此作业中的文件。Gradescope</strong>只会采用您的<code>Model.java</code>文件并使用其他文件的框架版本，因此如果您对文件进行编辑<code>Tile.java</code>，Gradescope 将无法识别该文件。</p>
<h3 id="你的任务"><a href="#你的任务" class="headerlink" title="你的任务"></a>你的任务</h3><p>您在这个项目中要做的工作是修改和完成<code>Model</code>类，特别是<code>emptySpaceExists</code>、<code>maxTileExists</code>和<code>atLeastOneMoveExists</code>方法 <code>tilt</code>。其他一切都已为您实现。我们建议按此顺序完成它们。前两个相对简单。第三个（<code>atLeastOneMoveExists</code>）更难，最后一种方法<code>tilt</code>可能相当困难。我们预计<code>tilt</code>您需要 3 到 10 个小时才能完成。前三种方法将处理游戏结束条件，最后一种方法<code>tilt</code>将在用户按下按键后修改棋盘。您可以阅读该方法的简短主体，<code>checkGameOver</code>以了解如何使用您的方法来检查游戏是否结束。</p>
<p>前面的视频和SLids和指南和现场问答都看完了。就差pro 0 了</p>
<p>纪念一下</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601223621803.png" alt="image-20240601223621803"></p>
<p>理解了，悟了。Tile t为null表示空格子，没有数字。所以为了引用空指针要先判断t !&#x3D; null，当然这也算一个小小的短路原则。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601225351001.png" alt="image-20240601225351001"></p>
<p>一次性写对了，很开心</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601230852419.png" alt="image-20240601230852419"></p>
<p>贴上我的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">atLeastOneMoveExists</span><span class="params">(Board b)</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.</span></span><br><span class="line">    <span class="keyword">if</span> (emptySpaceExists(b)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span>[] dj = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] di = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> b.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> b.tile(j, i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">jNew</span> <span class="operator">=</span> j + dj[k];</span><br><span class="line">                <span class="type">int</span> <span class="variable">iNew</span> <span class="operator">=</span> i + di[k];</span><br><span class="line">                <span class="keyword">if</span> (iNew &gt;= <span class="number">0</span> &amp;&amp; iNew &lt; len &amp;&amp; jNew &gt;= <span class="number">0</span> &amp;&amp; jNew &lt; len) &#123;</span><br><span class="line">                    <span class="type">Tile</span> <span class="variable">tNew</span> <span class="operator">=</span> b.tile(iNew,  jNew);</span><br><span class="line">                    <span class="keyword">if</span>(t.value() == tNew.value())&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第四个函数</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602075351166.png" alt="image-20240602075351166"></p>
<p>贴上我的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tilt</span><span class="params">(Side side)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> changed;</span><br><span class="line">        changed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Modify this.board (and perhaps this.score) to account</span></span><br><span class="line">        <span class="comment">// for the tilt to the Side SIDE. If the board changed, set the</span></span><br><span class="line">        <span class="comment">// changed local variable to true.</span></span><br><span class="line">        board.setViewingPerspective(side);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; board.size(); c++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> board.size() - <span class="number">1</span>; r &gt;= <span class="number">0</span>; r--) &#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t1</span> <span class="operator">=</span> board.tile(c, r);</span><br><span class="line">                <span class="keyword">if</span> (t1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r2</span> <span class="operator">=</span> r - <span class="number">1</span>; r2 &gt;= <span class="number">0</span>; r2--) &#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">t2</span> <span class="operator">=</span> board.tile(c, r2);</span><br><span class="line">                        <span class="keyword">if</span> (t2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (t2.value() == t1.value()) &#123;</span><br><span class="line">                                board.move(c, r, t2);</span><br><span class="line">                                changed = <span class="literal">true</span>;</span><br><span class="line">                                score += <span class="number">2</span> * t1.value();</span><br><span class="line">                                r = r2;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; board.size(); c++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> board.size() - <span class="number">1</span>; r &gt;= <span class="number">0</span>; r--) &#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t1</span> <span class="operator">=</span> board.tile(c, r);</span><br><span class="line">                <span class="keyword">if</span> (t1 == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r2</span> <span class="operator">=</span> r - <span class="number">1</span>; r2 &gt;= <span class="number">0</span>; r2--) &#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">t2</span> <span class="operator">=</span> board.tile(c, r2);</span><br><span class="line">                        <span class="keyword">if</span> (t2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                            board.move(c, r, t2);</span><br><span class="line">                            changed = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        board.setViewingPerspective(Side.NORTH);</span><br><span class="line">        checkGameOver();</span><br><span class="line">        <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">            setChanged();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> changed;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>运行<code>testModel.java</code>也成功了。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602075532255.png" alt="image-20240602075532255"></p>
<p>开心，终于完成任务 了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602080539030.png" alt="image-20240602080539030"></p>
<h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">DONE</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://sp21.datastructur.es/materials/lab/lab2/lab2">Debugging (due 01&#x2F;29)</a></td>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center">[<a href="https://sp21.datastructur.es/materials/proj/proj0/proj0">Project 0 due 1&#x2F;29]</a></td>
<td align="center">DONE</td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td></td>
</tr>
</tbody></table>
<p>现在把可能用到的网页放在这里</p>
<p>最主要的两个链接。</p>
<p><a href="https://www.gradescope.com/courses/137626">https://www.gradescope.com/courses/137626</a></p>
<p><a href="https://sp21.datastructur.es/">https://sp21.datastructur.es/</a></p>
<p>参考作业</p>
<p><a href="https://github.com/KANIKIG/cs61b-sp21/blob/main/proj0/game2048/Model.java">https://github.com/KANIKIG/cs61b-sp21/blob/main/proj0/game2048/Model.java</a></p>
]]></content>
      <tags>
        <tag>CS61B</tag>
        <tag>CSDIY</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A-Structure-and-Interpretation-of-Computer-Programs</title>
    <url>/2024/06/02/CS61A-Structure-and-Interpretation-of-Computer-Programs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Spring 2024, Instructor: John DeNero</p>
<p>有意思的链接，希望能带给我坚持下去的兴趣</p>
<p><a href="https://hdu-cs.wiki/3.%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4%E4%BD%93%E7%B3%BB%E6%9E%84%E5%BB%BA/3.6.1%E4%BB%8ECS61A%E7%9C%8B%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0">https://hdu-cs.wiki/3.%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4%E4%BD%93%E7%B3%BB%E6%9E%84%E5%BB%BA/3.6.1%E4%BB%8ECS61A%E7%9C%8B%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0</a></p>
<p>伟大的评论区</p>
<blockquote>
<p>各位，下面的课程链接是不是上不去了，需要student id了。现在只有最新的24 spring还能上</p>
<p>2024-06-01 18:34</p>
</blockquote>
<p>hhhh，事实上，我发现所有到它所有的课程官方网站都进不去了，要伯克利学生的官方ID账号。所以我只能emmmmmmm</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602222502634.png" alt="image-20240602222502634"></p>
<p>哈哈啊哈了，四个没有一个上得去</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602222752752.png" alt="image-20240602222752752"></p>
<p>又逛了一遍评论区，感觉自己最近幸运值拉满了，又找到课程网站？？？也许是.下面这个网站有些锁了，有些没锁，感觉可以学。</p>
<p><a href="https://cs61a.org/">https://cs61a.org/</a></p>
<p>但是如果你是类似这种网站地址都话就肯定要伯克利的账号 了可以使用 <a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/">https://inst.eecs.berkeley.edu/~cs61a/fa20/</a> 这个版本来学习</p>
<p>别人的伟大的作业 </p>
<p>我写的 Fall 2023 版本的所有资料，包括 Discussions, Homework, Labs 和 Projects 都在<br><a href="https://github.com/cy-Yin/UCBerkeley-CS61A-Fall2023">UCBerkeley-CS61A-Fall2023</a><br>欢迎讨论</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602222854695.png" alt="image-20240602222854695"></p>
<p>底下太多东西了，但就到这里，，自己要先开始动手</p>
<p>跟着2024 Spring的时间线学完了，因为每学期的solution都会回收所以最开始找不到官方答案参照和比较一下确实蛮不方便，所以我存了一份2024sp所有的答案（除了projects，官方没给答案），官方的答案有时候确实很enlighting。之后想学的可以考虑一下做这个版本的作业。贴下我的仓库：<br><a href="https://github.com/Kettenkrado/UCB-CS61A">https://github.com/Kettenkrado/UCB-CS61A</a></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602222959165.png" alt="image-20240602222959165"></p>
<p>啊啊啊果然还是要听完acwing讲课才行</p>
<p>下面是精翻译的CS61A的视频，比机翻好太多了。</p>
<p><a href="https://www.bilibili.com/video/BV1ma4y1U76y/?p=5&spm_id_from=pageDriver&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1ma4y1U76y/?p=5&amp;spm_id_from=pageDriver&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
<p>找一下Gradescope的邀请码，不然做不了作业。</p>
<p>大家都说在本地测试就行了，既然网上每一个人说CS61A的Gradescope邀请码，那就是没有公开。</p>
<p>在本地测试的命令在下面，太好了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python ok --local</span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603172628312.png" alt="image-20240603172628312"></p>
<p>有文件被锁了。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603172927008.png" alt="image-20240603172927008"></p>
<p>成功打开，并且做了。<img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603173054877.png" alt="image-20240603173054877"></p>
<p>这回真的一模一样了，，就在本地测试是完全可以的。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603173323024.png" alt="image-20240603173323024"></p>
<p>侧面说明，在本地测试是一样的。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603173435193.png" alt="image-20240603173435193"></p>
<p>事实上，这个里面讲了python ok –local的命令还有很多其他的命令等等<a href="https://cs61a.org/articles/using-ok/#signing-in-with-ok">https://cs61a.org/articles/using-ok/#signing-in-with-ok</a></p>
<p>找到评论区说的要你enroll的网站了。不是伯克利的学生没他们注册的邮箱，果然还是登不上去网站</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603173951166.png" alt="image-20240603173951166"></p>
<p>做Hw01的过程中感觉自己上道了。接下来就是学acwing的语法了。</p>
<p>接下来两个方法</p>
<p>一是就这github上面的fall20的继续弄，，而是先自己学完acwing的python</p>
<p>我的建议是</p>
<p>把github的fall20 的pull下来，留着。等到之后说不定它有开放网站了。这个github上的fall20相当于备用的。</p>
<p>这下不用pull。不过我还是先看acwing 到Python，不然浪费钱。</p>
]]></content>
      <tags>
        <tag>CSDIY</tag>
        <tag>CS61A</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>文章发布规划2</title>
    <url>/2023/04/18/%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E8%A7%84%E5%88%922/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="文章发布规划2"><a href="#文章发布规划2" class="headerlink" title="文章发布规划2"></a>文章发布规划2</h1><p>每次美化博客都要花好长时间，有点得不偿失了。</p>
<p>之后我会停滞一段时间，也可能再也不美化博客了。</p>
<p>但是我会更加积极为大家提供更高质量的文章的。</p>
<span id="more"></span>

<p>新计划是开展</p>
<p>考研笔记速过专栏</p>
<p>PAT刷题专栏</p>
<p>acwing专栏</p>
<p>操作系统实验和课设专栏</p>
<p>也许还会有CMU15445专栏</p>
<p>有最后一个的话，估计就说明我只会发技术文章，再也没空维护美化博客了把。</p>
]]></content>
      <categories>
        <category>施工进度表</category>
      </categories>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title>文章发布规划1</title>
    <url>/2023/03/29/%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E8%A7%84%E5%88%921/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="文章发布规划1"><a href="#文章发布规划1" class="headerlink" title="文章发布规划1"></a>文章发布规划1</h1><h2 id="第一篇文章哦"><a href="#第一篇文章哦" class="headerlink" title="第一篇文章哦"></a>第一篇文章哦</h2><p>最近看到一篇大佬的博客，他说</p>
<p>“因为本人比较喜欢简介风格的，所以整个界面都是<code>简约风格</code>的，一个好的博客，应该让人一眼就能看清楚技术分类,文章也应该就是文章，<code>让人能够最好的阅读你的博客</code> 这才是我们应该做的，所以没有太多花里胡哨的东西。”</p>
<p>反省自己的话，就能发现自己太追求自己喜欢的样式，在样式上面花了太多太多功夫，而忽略了文章本身的质量。别人看你的文章并不是来选美的，而是阅读技术文章来获得知识的。所以我会渐渐简化hexo博客的界面，在整体上追求简约和干净</p>
<span id="more"></span>

<p>目前的计划是开一个大数据技术原理与应用专栏，数据结构与算法专栏和<del>我的日记间隙随笔专栏。</del></p>
<p>大数据技术原理与应用记录学习过程的收获，就相当于以前的纸质笔记本。不过既然是计算机专业的学生，当然要写博客来当作自己的笔记本啦。</p>
<p>数据结构与算法其实之前学过，但当时自己听听就完了，没有做类似的博客来记录。现在补上，正好考研也要学习数据结构，一举两得。正所谓，温故而知新,可以为师矣。</p>
<p>日记间隙随笔专栏，记录我的思考和平时的灵感想法，会有很多暴言，不要当真就好。</p>
]]></content>
      <categories>
        <category>施工进度表</category>
      </categories>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2023/04/07/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>用aplayer当作博客的播放器以及修改博客的显示字体，但当hexo d之后博客没有变化。吓得我以为出问题了，感觉发了这篇文章来测试测试，结果文章还是能同步的，但是音乐和字体好像还是没有变化。</p>
<p>暂时先不管了，我我要修改几个文章了。</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo博客进阶：为Next主题添加评论系统</title>
    <url>/2023/04/14/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%EF%BC%9A%E4%B8%BANext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/NextAddValineCommentSystem/clip_image002.jpg"></p>
<p>一个好的博客怎么能没有评论功能呢，拖了几天终于能把评论模块安排上了o(<em>￣︶￣</em>)o</p>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>为Next主题添加Valine评论系统以及添加Waline评论系统的注意事项和推荐参考博客。</p>
<span id="more"></span>

<h1 id="Hexo博客进阶：为Next主题添加评论系统"><a href="#Hexo博客进阶：为Next主题添加评论系统" class="headerlink" title="Hexo博客进阶：为Next主题添加评论系统"></a>Hexo博客进阶：为Next主题添加评论系统</h1><h2 id="博客评论模块选择"><a href="#博客评论模块选择" class="headerlink" title="博客评论模块选择"></a>博客评论模块选择</h2><h3 id="我的选择：Valine"><a href="#我的选择：Valine" class="headerlink" title="我的选择：Valine"></a>我的选择：Valine</h3><p>关于评论模块有很多选择，因为博主也没有一一用过，只能通过网络搜索来寻找一个简单好用的，以下网络上对于一些评论模块的评价：</p>
<p>静态博客无法直接构建评论系统，需要借助第三方平台的后端。NexT 主题支持 Disqus、Valine、Gitalk 等多种第三方评论系统。我推荐使用 Valine 或者 Disqus（加载评论需科学上网）。Valine 评论系统借助于 LeanCloud 存储数据，LeanCloud 的<a href="https://leancloud.cn/">国内版本</a>需要绑定域名和备案，这对于很多人来说不太方便，所以可以选择使用<a href="https://leancloud.app/">国际版</a>。目前 NexT 主题支持多评论系统，不过我认为这项功能有些多余，有谁会无聊使用多种评论系统呢？不方便管理评论，将简单的管理变得更加复杂。</p>
<p>调研了一下可用的评论系统，简单总结：</p>
<ul>
<li>Disqus: 好用好配置，但国内访问不了（弃用原因）</li>
<li>Valine: 好用好配置，但存在 <a href="https://segmentfault.com/a/1190000038175985"># 安全性问题</a></li>
<li>Github issue: 应该可用，没有亲自尝试</li>
<li>Remark42: 自行部署，但对于https网站需要一个可用域名</li>
</ul>
<p>我对评论系统的需求：</p>
<ul>
<li>用户评论方便：支持匿名评论，不强制登录，降低用户评论门槛</li>
<li>数据可迁移：将来如果切换到其他评论系统比较方便</li>
<li>不要求独立域名</li>
<li>无安全问题</li>
</ul>
<p>这几条限制加上之后，可选项也就不多了，最终选择了Valine。</p>
<p><strong>本文所用版本：</strong></p>
<p>Hexo v6.3.0</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/NextAddValineCommentSystem/clip_image004.jpg" alt="img"></p>
<p>如何查看自己的HEXO版本</p>
<p>根目录下shell命令为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>

<p>NexT v7.8.0</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/NextAddValineCommentSystem/clip_image006.jpg" alt="img"></p>
<p>如何查看自己的NEXT版本</p>
<p>主题文件夹–&gt;<code>package.json</code>–&gt;搜索<code>“version&quot;</code></p>
<h3 id="Valine-的升级：Waline"><a href="#Valine-的升级：Waline" class="headerlink" title="Valine 的升级：Waline"></a>Valine 的升级：Waline</h3><p><strong>根据读者反馈，Valine 评论系统在 Next 主题高版本 (7.+) 以上没有内置，且Valine已经很久没有更新维护了。如果想要配置体验Valine的，建议使用Next主题低版本。或者使用更加人性化且带后端的<a href="https://waline.js.org/">Waline</a></strong></p>
<p>事实上，本人也确实想过使用Valine的改进版本Waline，但遇到了这么几个问题</p>
<h4 id="QUESION1：想使用Waline的话就必须把NEXT版本升级到8-5-0"><a href="#QUESION1：想使用Waline的话就必须把NEXT版本升级到8-5-0" class="headerlink" title="QUESION1：想使用Waline的话就必须把NEXT版本升级到8.5.0"></a>QUESION1：想使用Waline的话就必须把NEXT版本升级到8.5.0</h4><p>7.8.0版本的NEXO使用Waline时，运行<code>hexo s</code>出现错误。具体的错误示例和解决办法可以参考这位大佬的博客：<a href="https://finisky.github.io/hexowaline/">Hexo使用Waline评论系统</a></p>
<p>想使用Waline的可以按照官方推荐的方式更新到v8.5.0： <a href="https://theme-next.js.org/docs/getting-started/upgrade.html">https://theme-next.js.org/docs/getting-started/upgrade.html</a></p>
<p>以下是英文文档UPGRADE部分的谷歌翻译</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/NextAddValineCommentSystem/clip_image008.png" alt="img"></p>
<h4 id="QUESION2：升级的过程比较繁琐"><a href="#QUESION2：升级的过程比较繁琐" class="headerlink" title="QUESION2：升级的过程比较繁琐"></a>QUESION2：升级的过程比较繁琐</h4><p>如果你坚持想要升级，下面是几个成功升级的大佬的经验：</p>
<p><a href="https://bambrow.com/20211124-hexo-next-upgrade/">Hexo 静态博客升级指南</a></p>
<p><a href="https://blog.juanertu.com/archives/f06684a1.html">NexT 版本更新 V8.0 记录</a></p>
<p><a href="https://drifter-games.com/2021/nextupdate/">nexT主题v5升级至v8记录</a></p>
<p><a href="https://asurada.zone/post/Update-Next-From-V7-To-V8/">Hexo Next 主题 V7 升级 V8 记录</a></p>
<h4 id="Next使用Waline评论系统方法"><a href="#Next使用Waline评论系统方法" class="headerlink" title="Next使用Waline评论系统方法"></a>Next使用Waline评论系统方法</h4><p>如果你具有探索精神，成功完成了升级。</p>
<p>那么可以参考这两位大佬的博客完成Waline评论系统的配置：</p>
<p><a href="https://www.zuicy.party/2022/05/03/Hexo_Next_%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8_Waline%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">Hexo: Next 主题使用 Waline 评论系统</a></p>
<p><strong><a href="https://blog.csdn.net/jiunian_2761/article/details/122621667">Hexo博客进阶：为 Next 主题添加 Waline 评论系统</a></strong></p>
<h2 id="Next使用Valine评论系统方法"><a href="#Next使用Valine评论系统方法" class="headerlink" title="Next使用Valine评论系统方法"></a>Next使用Valine评论系统方法</h2><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/NextAddValineCommentSystem/clip_image010.png" alt="img"></p>
<p>Valine中文文档：<a href="https://valine.js.org/">https://valine.js.org</a></p>
<p><a href="https://valine.js.org/">Valine</a> 评论系统是我认为的在国内网络环境下最好用的评论系统，可通过 Leancloud 管理评论，无广告，简洁美观。不过缺点就是，Leancloud 平台的不稳定性，在 2019 年夏季的时候，出现了一次域名停止解析的事故，原因是有人利用 Leancloud 进行一些非法行为，而平台管理人员并没有监管到位。在那次事故之后，Leancloud 加强了监管，国内用户必须进行实名注册，每一个服务器必须绑定一个备案的域名。如果你不想备案，可以选择使用 Leancloud 国际版。但谁也无法确保 Leancloud 国际版会发生什么事情。</p>
<h3 id="注册LeanCloud"><a href="#注册LeanCloud" class="headerlink" title="注册LeanCloud"></a>注册LeanCloud</h3><p>Valine的运行是基于LeanCloud的</p>
<p>首先在<a href="https://www.leancloud.cn/">LeanCloud</a>注册帐户（表示一开始以为这是外国的，结果发现这个国人的网站） 。Leancloud 国内版和国际版的配置相同，这里以国际版为例进行说明。首先进入<a href="https://leancloud.app/">官网</a>进行用户注册，注册完成后点击「创建应用」，填写应用的名称，选择「开发版」进行创建。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/NextAddValineCommentSystem/clip_image012.png" alt="img"></p>
<p>进入刚才创建好的应用，在<code>存储</code>→<code>结构化数据</code>中选择创建<code>class</code>，将class名字设为<code>Comment</code>，这个<code>Comment</code>就是评论的数据库啦。其中权限设置可以不用管，默认设定的ACL权限就是创建者可读可写，其他人可读不可写。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/NextAddValineCommentSystem/clip_image014.png" alt="img"></p>
<p>然后进入「设置」中的「安全中心」，添加 Web 安全域名，防止其他用户盗用你的 Keys 存储个人数据。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/NextAddValineCommentSystem/clip_image016.png" alt="img"></p>
<p>然后在<code>设置</code>→ <code>应用Keys</code>中找到<code>AppID</code>和<code>AppKey</code>。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/NextAddValineCommentSystem/clip_image018.jpg" alt="img"></p>
<p>回到主题配置文件中，开启 Valine，在 Valine 配置中填写 AppID 和 AppKey 即可。在该项配置中，你也可以设置评论框中的提示语，默认是「Just go go」。当你将 visitor 选项设置为 true 时，可以记录当前页面的访客数。这一部分需要填写的内容可能根据 Valine 版本的更新会有相应的增减，不过基本功能的配置思路是一样的。</p>
<h3 id="配置Next"><a href="#配置Next" class="headerlink" title="配置Next"></a>配置Next</h3><p><strong>注意：</strong>我这里用的是<code>next 7.x</code>，可以直接用valine，较早期版本可能需要安装</p>
<p>在<code>./themes/next/_config.yml</code>下面搜索<code>valine</code></p>
<p>首先可以找到<code>comments</code>，设置<code>active: valine</code></p>
<p>然后找到<code>valine</code>，把<code>appid</code>和<code>appkey</code>填入，设置<code>enable</code>为<code>true</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Valine</span></span><br><span class="line"><span class="attr">valine</span>:</span><br><span class="line"></span><br><span class="line"> <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">appid</span>: # your appid</span><br><span class="line"></span><br><span class="line"> <span class="attr">appkey</span>: # your appkey</span><br><span class="line"></span><br><span class="line"> <span class="attr">notify</span>: <span class="literal">false</span> # <span class="title class_">Mail</span> notifier</span><br><span class="line"></span><br><span class="line"> <span class="attr">verify</span>: <span class="literal">false</span> # <span class="title class_">Verification</span> code</span><br><span class="line"></span><br><span class="line"> <span class="attr">placeholder</span>: 自古评论出人才，句句胜过李太白。倘若唐朝有网友，唐诗岂止三百首！ # <span class="title class_">Comment</span> box placeholder</span><br><span class="line"></span><br><span class="line"> <span class="attr">avatar</span>: mm # <span class="title class_">Gravatar</span> style</span><br><span class="line"></span><br><span class="line"> <span class="attr">guest_info</span>: nick,mail,link # <span class="title class_">Custom</span> comment header</span><br><span class="line"></span><br><span class="line"> <span class="attr">pageSize</span>: <span class="number">10</span> # <span class="title class_">Pagination</span> size</span><br><span class="line"></span><br><span class="line"> <span class="attr">language</span>: # <span class="title class_">Language</span>, available <span class="attr">values</span>: en, zh-cn</span><br><span class="line"></span><br><span class="line"> <span class="attr">visitor</span>: <span class="literal">true</span> # <span class="title class_">Article</span> reading statistic</span><br><span class="line"></span><br><span class="line"> <span class="attr">comment_count</span>: <span class="literal">true</span> # <span class="title class_">If</span> <span class="literal">false</span>, comment count will only be displayed <span class="keyword">in</span> post page, not <span class="keyword">in</span> home page</span><br><span class="line"></span><br><span class="line"> <span class="attr">recordIP</span>: <span class="literal">true</span> # <span class="title class_">Whether</span> to record the commenter <span class="variable constant_">IP</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">serverURLs</span>: # <span class="title class_">When</span> the custom domain name is enabled, fill it <span class="keyword">in</span> here (it will be detected automatically by <span class="keyword">default</span>, no need to fill <span class="keyword">in</span>)</span><br><span class="line"></span><br><span class="line"> \#<span class="attr">post_meta_order</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="部分页面关闭评论功能"><a href="#部分页面关闭评论功能" class="headerlink" title="部分页面关闭评论功能"></a>部分页面关闭评论功能</h3><p>打开评论以后是全局都会显示评论的，因此包括<code>tags</code>这种页面也会显示，当然需要关闭评论啦，只需要在头部加上以下内容即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">comments</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>设置之前</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/NextAddValineCommentSystem/clip_image020.png" alt="img"></p>
<p>设置之后</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/NextAddValineCommentSystem/clip_image022.png" alt="img"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>更加详细的配置可以参考这个大佬的博客：</p>
<p><strong><a href="https://blog.csdn.net/jiunian_2761/article/details/97388997">Hexo博客进阶：为Next主题添加Valine评论系统</a></strong></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/06/12/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c0132712a3bce10f46fe04ab233517db910f480ee816b3b068b602c9b2b410df"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记间隙随笔</category>
      </categories>
  </entry>
  <entry>
    <title>柳比歇夫</title>
    <url>/2024/06/12/%E6%9F%B3%E6%AF%94%E6%AD%87%E5%A4%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>w</p>
<p>我真的，真的能坚持下去吗？</p>
<p>好像真的真的什么都做不到了。好想放弃好想哭好不愿意一点意义都没有。全当是老师逼我我还能坚持，但是现在，哪里有那么的人逼自己呢。</p>
<table>
<thead>
<tr>
<th align="center">timeRange</th>
<th align="center">Task</th>
<th align="center">others</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1147-1203</td>
<td align="center">把傻卵那个人的论文整合到我的带封面的论文上面去✔</td>
<td align="center">5min</td>
</tr>
<tr>
<td align="center">1203-1506</td>
<td align="center">完全合并✔<br />然后把所有评议组给的建议，不管是口头的还是在书面上写的，都改到论文上去。✔</td>
<td align="center">20min</td>
</tr>
<tr>
<td align="center">1506-1515</td>
<td align="center">检查一遍格式，✔页面页脚奇数页然后找老师</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">推荐通用讲解还是要全文背诵，自己算是运气比较好的了。</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>评议组老师给的错误：</p>
<p>2.双面打印目录。也就是说封面，郑重声明，中，英摘要单面打印，，从目录开始双面打印了。</p>
<p>9.内容没看到Hadoop所起作用，结合李传文教授说的话，那就把基于Hadoop改掉。改成基于Spring Boot 的。然后搜索所有Hadoop的词，改掉一些不太好的。✔</p>
<p>10.把spark从技术中去掉，然后对spark用上面一样的搜索删除方法✔</p>
<p>11.基于用户也改掉，免得不一致心里烦✔</p>
<ol start="12">
<li></li>
</ol>
<p>按照等情绪的要求。✔</p>
<p>把那个上传到HDFS放到推荐那里。。一是凑字数，二是Hadoop环境搭建不用放结果，三是可以很好的整块的照抄那个人发的视频。他说啥，我就写啥，反正别人也不看了。全部炒上去了，在看我是狗✔</p>
<p>第五章图表最后看一次，在看我是狗✔</p>
<p>13.改那个图片的，商品改成酒店，，，，，，，✔推荐商品改成推荐酒店服务？？？？不可能把，反正我不该代码，没啥酒店服务。就改成可能感兴趣的酒店✔</p>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu系统安装在移动固态硬盘</title>
    <url>/2024/06/09/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%9C%A8%E7%A7%BB%E5%8A%A8%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Ubuntu系统安装在移动固态硬盘自己的尝试和经验。"><a href="#Ubuntu系统安装在移动固态硬盘自己的尝试和经验。" class="headerlink" title="Ubuntu系统安装在移动固态硬盘自己的尝试和经验。"></a>Ubuntu系统安装在移动固态硬盘自己的尝试和经验。</h1><h2 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h2><p>1.把电脑的源文件上传到百度网盘备份</p>
<p>2.移动硬盘</p>
<h2 id="二、过程"><a href="#二、过程" class="headerlink" title="二、过程"></a>二、过程</h2><p>本人为了稳，找了一个在自己电脑装过双系统的室友一起尝试在移动硬盘里面装Ubuntu</p>
<p>他有一个已经做好做成了系统启动盘的U盘。因此这一部分我就不清楚。</p>
<p>本次安装过程遇到了以下两个问题。都通过google一下解决了。</p>
<p>一是RST问题，解决教程如下</p>
<p><a href="https://blog.csdn.net/qq_50341530/article/details/120310080">戴尔电脑联想电脑 装乌班图（Ubuntu）遇到RST问题完美解决</a></p>
<p>二是在一的过程里面，不让他进安全模式，而是手动先改成RAID模式，那么在Ubuntu系统进入的时候会出现让你按ctrl + d。你乖乖按之后，会出现一行红字报错。</p>
<p>解决方法：长按电源20秒，重新启动电脑，先在Bios里面将RAID模式改成AHCI。</p>
<p>然后进入Ubuntu，发现可以成功进入。然后在进入windos10，发现是安全模式，按照一的解决方案的教程之后的步骤，去掉安全引导选项，重启进入windos10就行了。</p>
<h2 id="三、后续的使用和慢慢地将win10的开发环境迁移到Ubuntu里面的记录"><a href="#三、后续的使用和慢慢地将win10的开发环境迁移到Ubuntu里面的记录" class="headerlink" title="三、后续的使用和慢慢地将win10的开发环境迁移到Ubuntu里面的记录"></a>三、后续的使用和慢慢地将win10的开发环境迁移到Ubuntu里面的记录</h2><p>4月9日尝试：<br>1.感觉自己电脑的win10的RST还是关掉了。原因是最后在BIOS里面选的还是ACHI。不过能用就行，别乱调整搞得两个系统都用不成了。</p>
<p>2.不知道为什么Ubuntu里面把整个windos 的文件都复制过去 了。</p>
<p>但是有的能用，如文档。</p>
<p>有的用不了 ，例如exe文件。</p>
<p>3.Ubuntu命令行输入poweroff关机</p>
<p>4.Ubuntu软件更新了一次，不知道有没有影响</p>
<p>5.下载了Linux的Clash以及用这个方法下载了Chrome浏览器</p>
<p><a href="https://linuxstory.org/best-way-to-install-chrome-browser-on-ubuntu-linux/">https://linuxstory.org/best-way-to-install-chrome-browser-on-ubuntu-linux/</a></p>
<p>6.检查一下在Ubuntu里面修改的文件会不会影响到windows10</p>
<p>居然影响到了。我搜搜是什么原因。</p>
<p>搜索  ubuntu里面看到了windows10的文件  这句话，看到了很多类似的情况，但都和我的不是完全符合。</p>
<p>我也别急，先这样，别出大错就行了。</p>
<p>没搜到，感觉很玄幻的原因</p>
<p>可以在Ubuntu里面看到windows10的所有文件和软件，包括C，D，E盘。甚至修改也是能在windows里面生效的。说明Ubuntu里面的并不是windows文件的副本，而是实实在在的Windows文件的源本。</p>
<p>这样的话，移动硬盘里面的1T空间并没有被浪费，感觉还是能用1T的空间。</p>
<p>然后这个小bug可能导致一些灵活地处理。？？？</p>
<p>7.不知道在Chrome浏览器里面的登陆的账号同步，能不能真正做到同步</p>
<p>我这次尝试的两个平台的的账号名字是BradTorres，邮箱是<a href="mailto:&#119;&#105;&#100;&#x6f;&#119;&#x68;&#115;&#117;&#54;&#50;&#52;&#102;&#x6f;&#114;&#x65;&#118;&#x65;&#x72;&#64;&#x6f;&#117;&#x74;&#108;&#x6f;&#x6f;&#107;&#46;&#99;&#x6f;&#109;">&#119;&#105;&#100;&#x6f;&#119;&#x68;&#115;&#117;&#54;&#50;&#52;&#102;&#x6f;&#114;&#x65;&#118;&#x65;&#x72;&#64;&#x6f;&#117;&#x74;&#108;&#x6f;&#x6f;&#107;&#46;&#99;&#x6f;&#109;</a>的那个</p>
<p>但是我还记得有另外一个名字徐文栋的账号，之后再看看吧。</p>
<h3 id="8-一些东西的验证"><a href="#8-一些东西的验证" class="headerlink" title="8.一些东西的验证"></a>8.一些东西的验证</h3><p>毕设代码在win10下面依旧能运行</p>
<p>反正是是在Ubuntu里面装python环境看看。<br>Ubuntu查看电脑空间，希望是差不多1T。果然是的，但是有windows10的d盘和e盘，，却没有c盘</p>
<h4 id="a-ubuntu安装openjdk18和IDEA"><a href="#a-ubuntu安装openjdk18和IDEA" class="headerlink" title="a.ubuntu安装openjdk18和IDEA"></a>a.ubuntu安装openjdk18和IDEA</h4><p>参考来源：<a href="https://cn.linux-console.net/?p=21404">https://cn.linux-console.net/?p=21404</a><br>安装curl或wget下载器实用程序：</p>
<p><code>sudo apt update</code><br><code>sudo apt install -y curl wget</code><br>访问 JDK 18 发布页面下载最新的存档。</p>
<p><code>curl -O https://download.java.net/java/GA/jdk18/43f95e8614114aeaa8e8a5fcf20a682d/36/GPL/openjdk-18_linux-x64_bin.tar.gz</code><br>使用 tar 命令提取下载的文件。</p>
<p><code>tar xvf openjdk-18_linux-x64_bin.tar.gz</code><br>将生成的文件夹移至 &#x2F;opt 目录。</p>
<p>sudo mv jdk-18 &#x2F;opt&#x2F;<br>配置Java环境：</p>
<p><code>sudo tee /etc/profile.d/jdk18.sh &lt;&lt;EOF</code><br><code>export JAVA_HOME=/opt/jdk-18</code><br><code>export PATH=\$PATH:\$JAVA_HOME/bin</code><br><code>EOF</code><br>获取您的配置文件并检查 java 命令</p>
<p><code>source /etc/profile.d/jdk18.sh</code><br>确认Java版本。</p>
<p><code>$ echo $JAVA_HOME</code><br><code>/opt/jdk-18</code></p>
<p><code>$ java -version</code><br><code>openjdk version &quot;18&quot; 2022-03-22</code><br><code>OpenJDK Runtime Environment (build 18+36-2087)</code><br><code>OpenJDK 64-Bit Server VM (build 18+36-2087, mixed mode, sharing)</code></p>
<p>在linux中，opt目录的位置就在主目录中，也即“&#x2F;opt”；opt是optional的缩写，是“可选”的意思，是给主机额外安装软件所摆放的目录，用来安装附加软件包，是用户级的程序目录，例如任何外部或第三方软件。</p>
<p>反正目前我的opt目录里面就只有google和jdk-18<br>opt是在&#x2F;下面一级，home也是在&#x2F;下面一级，而主目录文件夹里面只能看到home里面的东西，所以你才找不到opt。？？？？也许，这句话只是我的猜测</p>
<p>下载IDEA教程<br><a href="https://www.myfreax.com/how-to-install-intellij-idea-on-ubuntu-18-04/">https://www.myfreax.com/how-to-install-intellij-idea-on-ubuntu-18-04/</a><br>这会好象是从snap里面下载的，下载到了哪里我也不清楚<br>然后就是为啥他这个版本不要帐号登陆。我win10上面的也是社区版把。哈哈查看了一下，我的win10的IDEA是ultimate版本，还花了我的钱买了正版账号。感觉是那人的开发环境需要ultimate版本。hhhh。以后用得着的话，再说吧。自己不想管了。</p>
<p>~的意思就是home文件夹下面的hsuwindow用户里面的东西，目前的想法是把ideaProject放在hsuCoder下面，然后</p>
<p>先把ubuntu的md文档编辑用具弄好吧。</p>
<p>还有IDEA的插件放上去</p>
<p>果然装了Ubuntu出了问题，就是typora通过picgo上传图片到阿里OSS失败了。</p>
<p>还要找个全新的博客弄的方法。最好把本地的文件都上传到网络上去。但我记得这好像要服务器啥的，，很贵 的。</p>
<p>哈哈哈， 这个问题先放着吧。 </p>
<p>插件分别是</p>
<p>CodeGlance Pro</p>
<p>CS 61B</p>
<p>Java Visualizer</p>
<p>Rainbow Brackets</p>
<p>Translation</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240610021241105.png" alt="image-20240610021241105"></p>
<p>然后是看看CS61B那个环境的linux环境配置hhh</p>
<p>看看CS61A用的是什么开发环境。CS61A有推荐一个文档编辑工具</p>
<p>ee不知为何，一直卡在Ubuntu的登陆页面循环了。搜索原因</p>
<p>看是看了上面 的，我感觉我实在profile.d里面修改环境变量的呀</p>
<p>hhh搞不清楚了，先凑合着用再说，以后再搞这个。<br>我确实进去了ubuntu，然后在profile.d里面才找到了两个自己设置的环境变量。<br>不知道为什么和教程里面现实的不一样，可能有转义字符什么的。反正我先把我看到的结果放到这里，以后出了问题在来处理<br>hsuwindow@hsuwindow-G5-5500:&#x2F;etc&#x2F;profile.d$ cat jdk18.sh<br>export JAVA_HOME&#x3D;&#x2F;opt&#x2F;jdk-18&#x2F;<br>export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</p>
<p>是yan一下IDEA是否能用，能yongxiazaipython<br>希望装python的时候多注意一下。反正我对比他的图片是没看到我的profile里面有多余的语句的。</p>
<p>先用这个方法<a href="https://brucetg.github.io/2018/04/30/Ubuntu%E5%BE%AA%E7%8E%AF%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98%E3%80%81%E6%A1%8C%E9%9D%A2%E8%8F%9C%E5%8D%95%E5%92%8C%E4%BE%A7%E8%BE%B9%E6%A0%8F%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/">https://brucetg.github.io/2018/04/30/Ubuntu%E5%BE%AA%E7%8E%AF%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98%E3%80%81%E6%A1%8C%E9%9D%A2%E8%8F%9C%E5%8D%95%E5%92%8C%E4%BE%A7%E8%BE%B9%E6%A0%8F%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</a></p>
<p>解决方法</p>
<p><a href="https://cloud.tencent.com/developer/article/1978958">https://cloud.tencent.com/developer/article/1978958</a></p>
<p><a href="https://blog.csdn.net/ameyume/article/details/6378212">https://blog.csdn.net/ameyume/article/details/6378212</a></p>
<p><a href="https://bbs.21ic.com/icview-912062-1-1.html">https://bbs.21ic.com/icview-912062-1-1.html</a></p>
<p>办法如下：</p>
<p>\1. 进入了登录界面后，不用输入密码，按住Ctrl+Alt+F1（听说F1～F6都行）</p>
<p>\2. 进入了ubuntu的命令行界面，先输入用户名回车，然后输入密码回车（纯新手，不懂，习惯的直接密码了，折腾了很久）</p>
<p>3.1 输入sudo vi &#x2F;etc&#x2F;profile，打开了profile文件，将多余的语句删除掉，输入:wq回车保存，输入 sudo reboot重启。</p>
<p>（</p>
<p>3.2 另一方法：</p>
<p>在桌面中操作，</p>
<p>进入了命令行界面，输完用户名和密码；</p>
<p>输入startx，进入了桌面界面，使用Alt+T打开终端，在终端中输入sudo gedit &#x2F;etc&#x2F;profile编辑环境变量，将多余的语句删除掉，点保存后关掉，在终端中输入sudo reboot 重启。</p>
<p>）</p>
<p>在登录界面输入密码就OK了。</p>
<p>这是我在网上找的方法，请大神验证一下。。。。</p>
<p>六月十日六月十一日记录，感觉自己越勤劳，越践行那些过去自己看不上的真理，才发现自己的幸运值。事实上，不是自己幸运，而是因为真理的帮助。我不信佛，不迷信，但真理的作用真的震撼了我。不是自己践行了真理，自己电脑就要重装win10了。整个非常的麻烦。而且硬盘也不会装的进去。也不会趁着有朋友帮助安装ubuntu系统。哈哈哈哈哈哈哈哈哈哈哈。最后一步了。明天找老师，向神向真理服从。你会得到一切。人外有人天外有天。服从就是进步的最快捷径。</p>
<p>伟大无需多言，电脑修好了。</p>
<p>运气太好了，找到上传不了picgo的原因了。因为一开始挂了梯子。尤其是这个新梯子，有时候明明是国内线路，但是它切换的很慢很慢，那些网页什么的你要刷新一下才行。那这个picgo估计更加的敏感，所以就频频上传失败。你确保在每次上传图片的时候，把梯子关掉就行了。</p>
<p>感觉之前那个梯子切换的快，所以就算挂梯子也没问题，但也是有时出现上传失败的情况，只是很少。</p>
<p>但无论怎么样，不挂梯子上传图片几乎不会出问题，成功率是最高的。</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营第31天-理论基础-455-376-53</title>
    <url>/2024/06/07/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC31%E5%A4%A9-%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-455-376-53/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><h2 id="什么是贪心"><a href="#什么是贪心" class="headerlink" title="什么是贪心"></a>什么是贪心</h2><p><strong>贪心的本质是选择每一阶段的局部最优，从而达到全局最优</strong>。</p>
<p>局部最优推出全局最优，明显的例子就是取钞票的例子。</p>
<h2 id="贪心的两个极端"><a href="#贪心的两个极端" class="headerlink" title="贪心的两个极端"></a>贪心的两个极端</h2><p>很简单感觉是常识性的东西</p>
<p>很难感觉人类无法思考出来</p>
<h2 id="贪心的套路"><a href="#贪心的套路" class="headerlink" title="贪心的套路"></a>贪心的套路</h2><p>贪心无套路，你也无法去总结出一个方法论。见过就会，没见过就不会。</p>
<p>想清楚局部最优解是什么，然后这个局部最优能不能推出全局最优。</p>
<p>不想敲代码，动脑筋了。我燃尽了。</p>
<h2 id="贪心一般解题步骤"><a href="#贪心一般解题步骤" class="headerlink" title="贪心一般解题步骤"></a>贪心一般解题步骤</h2><p>贪心算法一般分为如下四步：</p>
<ul>
<li>将问题分解为若干个子问题</li>
<li>找出适合的贪心策略</li>
<li>求解每一个子问题的最优解</li>
<li>将局部最优解堆叠成全局最优解</li>
</ul>
<p>这个四步其实过于理论化了，我们平时在做贪心类的题目 很难去按照这四步去思考，真是有点“鸡肋”。</p>
<p>做题的时候，只要想清楚 局部最优 是什么，如果推导出全局最优，其实就够了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>不好意思了，贪心没有套路，说白了就是常识性推导加上举反例</strong>。</p>
<h1 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a><a href="https://leetcode.cn/problems/assign-cookies/">455. 分发饼干</a></h1><p>要sort排序，无脑看成reverse了</p>
<p>sort是将统一从小到大排序，或者统一从大到小排序。</p>
<p>reverse就只是单纯的把原本的顺序反过来。所以reverse之后的顺序，要看它原来的顺序。</p>
<p>下面sort的使用方法转载自</p>
<p><a href="https://www.cnblogs.com/stones-dream/p/10183210.html">https://www.cnblogs.com/stones-dream/p/10183210.html</a></p>
<p>sort(first_pointer,first_pointer+n,cmp)</p>
<p>该函数可以给数组，或者链表list、向量排序。</p>
<p>实现原理：sort并不是简单的快速排序，它对普通的快速排序进行了优化，此外，它还结合了插入排序和推排序。系统会根据你的数据形式和数据量自动选择合适的排序方法，这并不是说它每次排序只选择一种方法，它是在一次完整排序中不同的情况选用不同方法，比如给一个数据量较大的数组排序，开始采用快速排序，分段递归，分段之后每一段的数据量达到一个较小值后它就不继续往下递归，而是选择插入排序，如果递归的太深，他会选择推排序。</p>
<p>此函数有3个参数：</p>
<p>参数1：第一个参数是数组的首地址，一般写上数组名就可以，因为数组名是一个指针常量。</p>
<p>参数2：第二个参数相对较好理解，即首地址加上数组的长度n（代表尾地址的下一地址）。</p>
<p>参数3：默认可以不填，如果不填sort会默认按数组升序排序。也就是1,2,3,4排序。也可以自定义一个排序函数，改排序方式为降序什么的，也就是4,3,2,1这样。</p>
<p>使用此函数需先包含：</p>
<p>#include <algorithm><br>并且导出命名空间：</p>
<p>using namespace std;<br>简单例子：对数组A的0~n-1元素进行升序排序，只要写sort(A,A+n)即可；对于向量V也一样，sort(v.begin(),v.end())即可。</p>
<p>自己编写排序规则函数</p>
<p>例如：<br>bool compare(int a,int b)<br>{<br>return a&lt;b; &#x2F;&#x2F;升序排列，如果改为return a&gt;b，则为降序</p>
<p>}<br>sort扩展</p>
<p>sort不只是能像上面那样简单的使用，我们可以对sort进行扩展，关键就在于第三个参数&lt;cmp比较函数&gt;，我们想降序排列，或者说我不是一个简简单单的数组，而是结构体、类怎么办，下面给出一些方法和例子。</p>
<p>方法一：定义比较函数（最常用）<br>&#x2F;&#x2F;情况一：数组排列<br>int A[100];<br>bool cmp1(int a,int b)&#x2F;&#x2F;int为数组数据类型<br>{<br>return a&gt;b;&#x2F;&#x2F;降序排列<br>&#x2F;&#x2F;return a&lt;b;&#x2F;&#x2F;默认的升序排列<br>}<br>sort(A,A+100,cmp1);</p>
<p>&#x2F;&#x2F;情况二：结构体排序<br>Student Stu[100];<br>bool cmp2(Student a,Student b)<br>{<br>return a.id&gt;b.id;&#x2F;&#x2F;按照学号降序排列<br>&#x2F;&#x2F;return a.id&lt;b.id;&#x2F;&#x2F;按照学号升序排列<br>}<br>sort(Stu,Stu+100,cmp2);<br>注：比较方法也可以放在结构体中或类中定义。</p>
<p>方法二：使用标准库函数</p>
<p>另外，其实我们还可以再懒一点，在标准库中已经有现成的。它在哪呢？答案是functional，我们include进来试试看。functional提供了一堆基于模板的比较函数对象，它们是：equal_to<Type>、not_equal_to<Type>、greater<Type>、greater_equal<Type>、less<Type>、less_equal<Type>。这些东西的用法看名字就知道了。在这里，我么sort要用到的也只是greater和less就足够了，用法如下：</p>
<p>● 升序：sort(begin,end,less<data-type>())</p>
<p>● 降序：sort(begin,end,greater<data-type>())</p>
<p>缺点：也只是实现简单的排序，结构体不适用。</p>
<p>#include <iostream><br>#include <cstdio><br>#include <algorithm><br>#include <functional></p>
<p>using namespace std;<br>&#x2F;&#x2F;简单使用方法<br>sort(A,A+100,greater<int>());&#x2F;&#x2F;降序排列<br>sort(A,A+100,less<int>());&#x2F;&#x2F;升序排列<br>方法三：重载结构体或类的比较运算符</p>
<p>&#x2F;&#x2F;情况一：在结构体内部重载<br>typedef struct Student{<br>int id;<br>string name;<br>double grade;</p>
<p>bool operator&lt;(const Student&amp; s)<br>{<br>return id&gt;s.id;&#x2F;&#x2F;降序排列<br>&#x2F;&#x2F;return id&lt;s.id;&#x2F;&#x2F;升序排列<br>}<br>};<br>vector<Student> V;<br>sort(V.begin(),V.end());<br>&#x2F;&#x2F;情况二：在外部重载<br>vector<Student> V;<br>bool operator&lt;(const Student&amp; s1, const Student&amp; s2)<br>{<br>return s1.id&gt;s2.id;&#x2F;&#x2F;降序排列<br>&#x2F;&#x2F;return s1.id&lt;s2.id;&#x2F;&#x2F;升序排列<br>}<br>sort(V.begin(),V.end());<br>注意：一定要重载&lt;运算符，因为系统默认是降序，用的是&lt;运算符。</p>
<p>方法四：声明比较类（少用）</p>
<p>struct Less<br>{<br>bool operator()(const Student&amp; s1, const Student&amp; s2)<br>{<br>return s1.id&lt;s2.id; &#x2F;&#x2F;升序排列<br>}<br>};<br>sort(sutVector.begin(),stuVector.end(),Less());<br>一个list（链表）使用sort()实例：</p>
<p>#include “stdafx.h”<br>#include <iostream><br>#include <list><br>#include <numeric><br>#include <algorithm><br>#include “stdlib.h”<br>#include &lt;stdio.h&gt;</p>
<p>using namespace std;</p>
<p>&#x2F;&#x2F;给list起一个别名LISTINT<br>typedef list<int> LISTINT;<br>&#x2F;&#x2F;再起一个别名 LISTCHAR<br>typedef list<int> LISTCHAR;</p>
<p>int _tmain(int argc, _TCHAR* argv[])<br>{</p>
<p>&#x2F;&#x2F;用list容器处理整型数据<br>&#x2F;&#x2F;用LISTINT创建一个名为listOne的list对象<br>LISTINT listOne;<br>&#x2F;&#x2F;声明i为迭代器<br>LISTINT::iterator i;</p>
<p>&#x2F;&#x2F;从前面向listOne容器中添加数据<br>listOne.push_front (2);<br>listOne.push_front (1);</p>
<p>&#x2F;&#x2F;从队尾向listOne容器中添加数据</p>
<p>listOne.push_back (5);<br>listOne.push_back (4);<br>listOne.push_back (9);<br>listOne.push_back (7);<br>listOne.push_back (12);</p>
<p>&#x2F;&#x2F;从前向后显示listOne中的数据,排序前的链表<br>cout&lt;&lt;”listOne.begin()— listOne.end():”&lt;&lt;endl;<br>for (i &#x3D; listOne.begin(); i !&#x3D; listOne.end(); ++i)<br>cout &lt;&lt; *i &lt;&lt; “ “;<br>cout &lt;&lt; endl;</p>
<p>listOne.sort(); &#x2F;&#x2F;用sort()函数排序,默认升序</p>
<p>&#x2F;&#x2F;排序完毕后的列表<br>cout&lt;&lt;”listOne.begin()— listOne.end():”&lt;&lt;endl;<br>for (i &#x3D; listOne.begin(); i !&#x3D; listOne.end(); ++i)<br>cout &lt;&lt; *i &lt;&lt; “ “;<br>cout &lt;&lt; endl;</p>
<p>system(“pause”); &#x2F;&#x2F;按任意键后退出</p>
<p>return 0;<br>}</p>
<p>————下面是题解————-</p>
<p>自己写的代码：尽量用小饼干取满足胃口 小的小孩。这个思路也是可以的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;g, vector&lt;<span class="type">int</span>&gt; &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//自己尝试写的贪心算法</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//感觉有点双指针的意思</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; g.<span class="built_in">size</span>() &amp;&amp; j &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; s.<span class="built_in">size</span>() &amp;&amp; s[j] &lt; g[i]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要么j 越界，要么 j满足最小的满足胃的</span></span><br><span class="line">        <span class="keyword">if</span> (j == s.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>kage的想法：大饼干满足胃口大的小孩子</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;g, vector&lt;<span class="type">int</span>&gt; &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bingganIndex = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> weikouIndex = g.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; weikouIndex &gt;= <span class="number">0</span>; weikouIndex--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bingganIndex &gt;= <span class="number">0</span> &amp;&amp; s[bingganIndex] &gt;= g[weikouIndex]) &#123;</span><br><span class="line">            result++;</span><br><span class="line">            bingganIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然卡哥这个思路也是对的。但是我总觉得这个时候用for要判断</p>
<p>控制胃口用for行不行，控制饼干用for行不行。所以还是挺麻烦的。统一用while就好了。因为while不存在下标的加减是由循环控制的， 下标的加减都是你控制的。这样由你控制逻辑清晰，而且你还可以选择加减出现的位置，不像for加减的位置都是固定的导致很不方便。</p>
<p>按照卡哥想法，用自己写的代码while的逻辑：尽量用大饼干取满足胃口大的小孩</p>
<p>想不出来，感觉自己下面的代码逻辑自然一些。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;g, vector&lt;<span class="type">int</span>&gt; &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//自己尝试写的贪心算法</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//感觉有点双指针的意思</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; g.<span class="built_in">size</span>() &amp;&amp; j &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; s.<span class="built_in">size</span>() &amp;&amp; s[j] &lt; g[i]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要么j 越界，要么 j满足最小的满足胃的</span></span><br><span class="line">        <span class="keyword">if</span> (j == s.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376. 摆动序列"></a><a href="https://leetcode.cn/problems/wiggle-subsequence/">376. 摆动序列</a></h1>]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>Cpp49CDay09</title>
    <url>/2024/06/03/Cpp49CDay09/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="指针的高级应用"><a href="#指针的高级应用" class="headerlink" title="指针的高级应用"></a>指针的高级应用</h1><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>想修改哪个变量，就传递那个变量的地址。</p>
<h3 id="想修改指针指向的对象–-gt-传递一级指针"><a href="#想修改指针指向的对象–-gt-传递一级指针" class="headerlink" title="想修改指针指向的对象–&gt;传递一级指针"></a>想修改指针指向的对象–&gt;传递一级指针</h3><h3 id="想修改指针变量的值-指针变量的指向-–-gt-传递"><a href="#想修改指针变量的值-指针变量的指向-–-gt-传递" class="headerlink" title="想修改指针变量的值(指针变量的指向)–&gt;传递"></a>想修改指针变量的值(指针变量的指向)–&gt;传递</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义节点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_s</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node_s</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addNode</span><span class="params">(Node* <span class="built_in">list</span>, <span class="type">int</span> data)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	Node* <span class="built_in">list</span> = <span class="literal">NULL</span>;<span class="comment">// 空链表 </span></span><br><span class="line">	Node** plist = &amp;<span class="built_in">list</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> data = <span class="number">0</span>; data &lt; <span class="number">100</span>; data++)</span><br><span class="line">	&#123;</span><br><span class="line">		addNode(plist, data);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">list</span>-&gt;data);</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">addNode</span><span class="params">(Node** plist, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建结点</span></span><br><span class="line">	Node* newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	<span class="keyword">if</span> (!newnode) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;addNode failed!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化结点</span></span><br><span class="line">	newnode-&gt;data = data;</span><br><span class="line">	<span class="comment">//头插法</span></span><br><span class="line">	newnode-&gt;next = *plist;</span><br><span class="line">	*plist = newnode;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2>]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础课-AcWing</title>
    <url>/2024/06/03/Linux%E5%9F%BA%E7%A1%80%E8%AF%BE-AcWing/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-常用文件管理命令"><a href="#1-常用文件管理命令" class="headerlink" title="1. 常用文件管理命令"></a>1. 常用文件管理命令</h1><h2 id="常用命令介绍"><a href="#常用命令介绍" class="headerlink" title="常用命令介绍"></a>常用命令介绍</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(1) ctrl c: 取消命令，并且换行</span><br><span class="line">(2) ctrl u: 清空本行命令</span><br><span class="line">(3) tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项</span><br><span class="line">(4) ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件</span><br><span class="line">(5) pwd: 显示当前路径</span><br><span class="line">(6) cd XXX: 进入XXX目录下, cd .. 返回上层目录</span><br><span class="line">(7) cp XXX YYY: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如../dir_c/a.txt，表示上层目录下的dir_c文件夹下的文件a.txt</span><br><span class="line">(8) mkdir XXX: 创建目录XXX</span><br><span class="line">(9) rm XXX: 删除普通文件;  rm XXX -r: 删除文件夹</span><br><span class="line">(10) mv XXX YYY: 将XXX文件移动到YYY，和cp命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令</span><br><span class="line">(11) touch XXX: 创建一个文件</span><br><span class="line">(12) cat XXX: 展示文件XXX中的内容</span><br><span class="line">(13) 复制文本</span><br><span class="line">  windows/Linux下：Ctrl + insert，Mac下：command + c</span><br><span class="line">(14) 粘贴文本</span><br><span class="line">  windows/Linux下：Shift + insert，Mac下：command + v</span><br></pre></td></tr></table></figure>



<h2 id="创建作业-amp-测试作业的正确性"><a href="#创建作业-amp-测试作业的正确性" class="headerlink" title="创建作业 &amp; 测试作业的正确性"></a>创建作业 &amp; 测试作业的正确性</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">homework 1 create 可以重新创建所有lesson_1的作业</span><br><span class="line">homework 1 create id 可以单独创建lesson_1的第id个作业. e.g.</span><br><span class="line">  homework 1 create 0 可以只重新创建lesson_1的第0个作业</span><br><span class="line">homework 1 test 可以评测lesson_1的所有作业</span><br></pre></td></tr></table></figure>



<h1 id="第一课笔记"><a href="#第一课笔记" class="headerlink" title="第一课笔记:"></a>第一课笔记:</h1><p>一个terminal窗口就是以个屏幕, 远程连接了一个服务器, 每一个terminal可以连接到任何一个其他服务器上;<br>关掉terminal相当于只是关掉了屏幕, 但远程服务器是一直开着的;</p>
<p>linux的文件系统:</p>
<p>根目录: &#x2F;</p>
<p>bin目录(常用可执行文件命令)<br>etc目录<br>var目录<br>lib目录(安装包, 头文件)<br>home目录(所有用户的家目录)<br>….</p>
<p>特殊的: .表示当前目录, ..表示上层目录, ~&#x2F;表示家目录;</p>
<p>路径:<br>绝对路径: 从根目录开始描述;<br>相对路径: 从当前位置开始描述的路径;<br>4.常用命令:<br>ctrl + C: 立刻结束某进程 &#x2F; 指令;<br>ctrl + U: 立刻清空当前行;<br>tab: 补全命令 &#x2F; 文件 &#x2F; 路径;(按两次会先显示出所以满足前缀要求的选项, trie树实现)<br>pwd: 显示当前位置;<br>cd: (change directory) cd + 路径;(默认返回家目录, cd .. 返回上一层目录, cd - 返回上一个待过的目录)<br>ls: 展示当前文件夹; (ll 等价于ls -la)</p>
<p>参数:<br>-l : 展示详细信息;<br>-h : 人性化的显示详细信息;<br>-a : 显示所有的文件(包括被隐藏的文件, 所有被隐藏的文件都是以.开头的);<br>cp: cp 路径1 路径2; (将路径1内容复制一份放路径2里面, 复制 + 粘贴 + 重命名);<br>touch: 创建一个文件;<br>mkdir: 创建文件夹;(可以加-p创建一系列的文件夹)<br>history: 显示历史用过的指令;<br>rm: 删除, rm xxx: 删除某一文件;rm xxx -r: 删除某文件夹;(支持正则表达式)<br>mv: mv xxx yyy (剪切+ 粘贴)<br>cat: cat xxx(查看xxx文件);</p>
<p>mkdir dir_a dir_b dir_c;</p>
<p>转载自</p>
<p>作者：Peter_5<br>链接：<a href="https://www.acwing.com/activity/content/code/content/1661985/">https://www.acwing.com/activity/content/code/content/1661985/</a></p>
<h1 id="第一节课笔记"><a href="#第一节课笔记" class="headerlink" title="第一节课笔记"></a>第一节课笔记</h1><h2 id="路径"><a href="#路径" class="headerlink" title="路径:"></a>路径:</h2><p>绝对路径: 从根目录开始描述;<br>相对路径: 从当前位置开始描述的路径;<br>. 当前目录<br>.. 上级目录<br>~&#x2F; &lt;&#x3D;&#x3D;&#x3D;&gt; &#x2F;home&#x2F;acs 家目录</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>ctrl + C: 取消命令，并且换行;<br>ctrl + U: 清空本行命令;<br>tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项;<br>方向键：可以回到上一个命令；</p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件</p>
<h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-l : 展示详细信息;</span><br><span class="line">-h : 人性化的显示详细信息;</span><br><span class="line">-a : 显示所有的文件(包括被隐藏的文件, 所有被隐藏的文件都是以.开头的);</span><br><span class="line">ll 等价于ls -la</span><br></pre></td></tr></table></figure>

<p>pwd: 显示当前位置;</p>
<p>cd: cd + 路径;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 默认返回家目录, cd .. 返回上一层目录, cd - 返回上一个待过的目录;</span><br></pre></td></tr></table></figure>

<p>cp: cp 路径1 路径2;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(将路径1内容复制一份放路径2里面, 复制 + 粘贴 + 重命名);</span><br><span class="line">eg:</span><br><span class="line">cp a/tmp.txt b (复制一份到粘贴到b里面)；</span><br><span class="line">cp a/tmp.txt b/tmp2.txt; (复制一份到粘贴到b里面,并重命名)</span><br><span class="line">如果复制文件夹后面加-r</span><br><span class="line">eg: cp a b -r; (将a复制一份粘贴到b里面)</span><br></pre></td></tr></table></figure>



<ul>
<li>表示本文件夹里所有文件</li>
</ul>
<p>mkdir a :创建文件夹a<br>mkdir: 创建文件夹;(可以加-p创建一系列的文件夹)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line">mkdir /home/acs/a/b (在根目录下创建文件)</span><br><span class="line">mkdir a/b/c -p (在该文件夹下创建a/b/c复合文件)</span><br></pre></td></tr></table></figure>

<p>history: 显示历史用过的指令;</p>
<p>rm: 删除,<br>rm xxx: 删除某一文件;<br>rm xxx -r: 删除某文件夹;(支持正则表达式);</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line">rm tmp.txt tmp2.txt (删除tmp.txt和tmp2.txt)</span><br><span class="line">rm .txt (删除所有txt文件)</span><br><span class="line">rm a/ (删除a里面所有东西)</span><br></pre></td></tr></table></figure>

<p>windows彻底删除文件:Shift + Delete;</p>
<p>mv: mv xxx yyy (剪切+ 粘贴)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line">mv a/tmp.txt b/ (将a中tmp.txt文件挪到b文件夹里面)</span><br><span class="line">mv b/tmp.txt a/tmp2.txt (将b中tmp.txt文件挪到a文件夹里面并重命名为tmp2.txt)</span><br><span class="line">mv tmp2.txt tmp.txt (将tmp2.txt重命名为tmp.txt)</span><br></pre></td></tr></table></figure>

<p>cp与mv区别:cp(复制+粘贴), mv(剪切+粘贴)<br>mkdir与touch区别:mkdir(创建文件夹), touch(创建文件)</p>
<p>cat: cat xxx(查看xxx文件);</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line">cat a/tmp.cpp(查看tmp.cpp文件)</span><br></pre></td></tr></table></figure>

<p>rm &#x2F;* -rf (删除所有文件)</p>
<p>作业</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd homework_0</span><br><span class="line">mkdir dir_a dir_b dir_c</span><br></pre></td></tr></table></figure>

<p>借鉴:<br><a href="https://www.acwing.com/activity/content/code/content/1661985/">https://www.acwing.com/activity/content/code/content/1661985/</a></p>
<p>转载自<br>链接：<a href="https://www.acwing.com/solution/content/101474/">https://www.acwing.com/solution/content/101474/</a></p>
<p>、</p>
<p>testtest是否存在</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>AcWing</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础课-AcWing</title>
    <url>/2024/06/02/Python%E5%9F%BA%E7%A1%80%E8%AF%BE-AcWing/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>q</p>
<p> 其实我也可以从网上复制来水博客，但是留不下的印象的话就没有意义。<strong>网上别的完好的笔记我会以链接的形式放在这里。我这篇博客里面的只会是我自己的理解和自己一个字一个字打出来的笔记</strong>。</p>
<h1 id="笔记1"><a href="#笔记1" class="headerlink" title="笔记1"></a>笔记1</h1><p>果然自己还是懒得做笔记。直接抓去重要的也不失为一种两得的好方法。转载声明如下</p>
<p>作者：yxc<br>链接：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9960888/">https://www.acwing.com/file_system/file/content/whole/index/content/9960888/</a><br>来源：AcWing<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<ol start="4">
<li>输入</li>
</ol>
<p>使用input()函数，可以输入一行内容，返回的类型为str。一般配合split()、map()、int()、float()等函数使用。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())  <span class="comment"># 读入两个整数</span></span><br><span class="line"><span class="built_in">print</span>(a + b)  <span class="comment"># 计算两个数的和</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603205713950.png" alt="image-20240603205713950"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240603205810109.png" alt="image-20240603205810109"></p>
<ol start="5">
<li>输出<br>使用print()函数可以输出多个变量，默认用空格隔开，且行末会默认添加回车。如果想自定义行末字符，可以添加end参数。例如：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;x&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c, end=<span class="string">&#x27;!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<p>部分题目会要求保留若干位小数，此时可以使用round()函数。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">12.34567</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">round</span>(x, <span class="number">1</span>)))  <span class="comment"># 保留1位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">round</span>(x, <span class="number">3</span>)))  <span class="comment"># 保留3位小数</span></span><br></pre></td></tr></table></figure>

<p>另外可以使用格式化字符串，在后面的章节会详细讲解，本章中大家会使用下面用法即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">12.34567</span></span><br><span class="line">y = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = %.1f&quot;</span> % x)  <span class="comment"># 保留1位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = %.3f&quot;</span> % (x * y))  <span class="comment"># 保留3位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = %f, y = %d&quot;</span> % (x, y))  <span class="comment"># 输出整数</span></span><br></pre></td></tr></table></figure>



<ol start="6">
<li>其它函数<br>本章中部分题目会要求开根号，可以使用如下方式：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt  <span class="comment"># 引入开根号函数</span></span><br><span class="line">x = <span class="number">2</span></span><br><span class="line">y = sqrt(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>

<h1 id="笔记2"><a href="#笔记2" class="headerlink" title="笔记2"></a>笔记2</h1><p>学习语言最好的方式就是<strong>实践和模仿</strong>，每当掌握一个新功能时，就要立即将这个功能<strong>应用到实践</strong>中。——闫学灿</p>
<p>一、if 语句</p>
<ol>
<li>基本if-else语句</li>
</ol>
<p>当条件成立时，执行某些语句；否则执行另一些语句。<br>注意：</p>
<blockquote>
<p>if和else后需要加上冒号:<br>if语句的代码块需要缩进统一长度，规范写法是缩进4个空格。</p>
<p>else语句可以省略：</p>
</blockquote>
<p>当只有一条语句时，可以写在同一行，但这样写不规范，只要了解即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>: <span class="built_in">print</span>(<span class="string">&quot;%d is big!&quot;</span> % a)</span><br><span class="line"><span class="keyword">else</span>: <span class="built_in">print</span>(<span class="string">&quot;%d is small!&quot;</span> % a)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>pass 语句<br>pass 语句不执行任何动作。语法上需要一个语句，但程序毋需执行任何动作时，可以使用该语句。例如：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 先空出来等以后再实现</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>变量的作用域<br>if语句内部的变量，可以在语句外访问。例如：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    max_value = a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    max_value = b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(max_value)</span><br></pre></td></tr></table></figure>

<p>二、条件表达式<br>(1) 与 and<br>(2) 或 or<br>(3) 非 not</p>
<p>注意：运算符优先级：<code>not &gt; and &gt; or</code>。</p>
<p>练习：用一条if语句，判断闰年。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>三、三元运算<br>类似于C++、Java中的问号表达式。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">max_value = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="built_in">print</span>(max_value)</span><br></pre></td></tr></table></figure>

<p>四、match语句<br>python3.10开始新增了match语句。目前作业评测器的Python3采用旧版本，尚未支持match语法。</p>
<p>注意：</p>
<p>只有第一个匹配的模式会被执行。且跟C++、Java不同，匹配后只会执行当前模式，不会顺次执行后面的case。<br>可以用 | 表示匹配多个模式。<br>变量名 _ 被作为 通配符 并必定会匹配成功。<br>如果没有 case 匹配成功，则不会执行任何分支。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">status = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> status:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bad request&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not found&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">418</span> | <span class="number">420</span> | <span class="number">422</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m a teapot&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Something&#x27;s wrong with the internet&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>五、作业题易错点<br>注意if和else语句后一定要加冒号。<br>判断语句内部的代码一定要记得缩进。<br>格式化字符串中想表示%时，需要写%%。<br>Python中交换两个变量，可以用：a, b &#x3D; b, a。<br><strong>Python中的比较运算符支持链式操作，这一点跟C++和Java等语言不同。例如，给三个数排序的代码可以这么写：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">x, y, z = a, b, c</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt;= b &gt;= c:</span><br><span class="line">    <span class="built_in">print</span>(c, b, a)</span><br><span class="line"><span class="keyword">elif</span> a &gt;= c &gt;= b:</span><br><span class="line">    <span class="built_in">print</span>(b, c, a)</span><br><span class="line"><span class="keyword">elif</span> b &gt;= a &gt;= c:</span><br><span class="line">    <span class="built_in">print</span>(c, a, b)</span><br><span class="line"><span class="keyword">elif</span> b &gt;= c &gt;= a:</span><br><span class="line">    <span class="built_in">print</span>(a, c, b)</span><br><span class="line"><span class="keyword">elif</span> c &gt;= a &gt;= b:</span><br><span class="line">    <span class="built_in">print</span>(b, a, c)</span><br><span class="line"><span class="keyword">elif</span> c &gt;= b &gt;= a:</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure>

<h1 id="笔记3"><a href="#笔记3" class="headerlink" title="笔记3"></a>笔记3</h1><p>一、while循环<br>可以简单理解为循环版的if语句。if语句是判断一次，如果条件成立，则执行后面的语句；while是每次判断，如果条件成立，则执行循环体中的语句，否则停止。</p>
<p>注意，类似于if语句，while语句也需要满足：</p>
<p>while<strong>后需要加上冒号</strong>:<br>while<strong>语句的代码块需要缩进统一长度，规范写法是缩进4个空</strong>格。</p>
<p>正确写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>错误写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">  i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>练习：求斐波那契数列的第n项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fpre = <span class="number">1</span></span><br><span class="line">fpost = <span class="number">1</span></span><br><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fiboc 0 = %d&quot;</span> % fpre)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fiboc 1 = %d&quot;</span> % fpost)</span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    fpre, fpost = fpost, fpre + fpost</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fiboc %d = %d&quot;</span> % (i, fpost))</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>死循环：循环永久执行，无法结束。我们要避免写出死循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="number">0</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<p>二、for循环<br>for循环语句用来按<strong>顺序枚举range、字符串等数据类型中的元素。类似于while和if语句，for语句同样需要满足冒号和缩进的要求。</strong></p>
<p>注意：本节课重在学习for循环，而非<strong>学习列表、元组、集合、字典等复杂数据类型，所以for语句与这些数据类型配合的使用技巧会放到下一章中展</strong>开。</p>
<ol>
<li>遍历字符串<br>  for语句可以遍历字符串中的每个字符。例如：</li>
<li>注意c本身也是字符串类型</li>
<li>Python目前可以认为没有char类型</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;python&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 注意c本身也是字符串类型</span></span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;acwing&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>遍历range<br>  range()函数可以生成等差数列，可以接收1个、2个或者3个整数参数：</li>
</ol>
<p>  注意是左闭右开的区间，而且是整数数列</p>
<p>接收1个整数参数时：range(x)会按顺序返回 <strong>0,<strong>1,2,3,…x−1 这个数列。<br>接收2个整数参数时：range(x, y)会按顺序返回 <strong>x</strong>,x+1,x+2,…,<strong>y−1</strong> 这个数。<br>接收3个整数参数时：range(x, y, z)分为两种情况：<br>z &gt; 0时，按 顺序返回 x,x+z,x+2z,x+3z,… 这个数列中</strong>小于 y</strong> 的所有数。</p>
<p>到 y - 1，也可能到不了，取决于z</p>
<p>z &lt; 0时，按顺序返回 x,x+z,x+2z,x+3z,… 这个数列中大于 y 的所有数。</p>
<p>到 y + 1，也可能到不了，取决于z</p>
<p>三、跳转语句</p>
<p>每每讲到这里都会说break和continue的区别。</p>
<p>我总结一个口诀：continue结束某一次循环的剩余部分。break结束剩余所有循环。自己懂就好，感觉剩余这个词不是很贴切，不过这也不是给零基础的人看的，纯粹是给自己一个记忆的加深，别把自己绕进去了。</p>
<ol>
<li>break<br>  可以提前从最近的一层循环中退出，一般与if语句搭配。<br>  例题：判断一个大于1的整数是否是质数。</li>
</ol>
<p>  1 既不是质数也不是合数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">is_prime = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">        is_prime = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_prime:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;is prime&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;is not prime&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>四、循环中的else子句和pass语句<br>本节内容用得不多，了解即可。</p>
<ol>
<li>循环中的else子句<br>for或while循环可以包括else子句，会在循环结束后执行。<br>不过如果循环是被break结束的，那么else子句就不会执行了。</li>
</ol>
<p>例题：判断一个大于1的整数是否是质数。</p>
<p>n &#x3D; int(input())</p>
<p>for x in range(2, n):<br>    if n % x &#x3D;&#x3D; 0:<br>        print(“%d &#x3D; %d * %d” % (n, x, n &#x2F;&#x2F; x))<br>        break<br>else:  # 注意else是for语句的子句，所以需要与for语句对齐<br>    print(“%d is a prime number” % n)<br>2. pass语句<br>类似于if语句，当for或者while循环里不想写任何代码时，可以写上pass语句，这个语句不执行任何动作。</p>
<p>例如：</p>
<p>for i in range(10):  # 不进行任何操作<br>    pass</p>
<p>while True:  # 死循环<br>    pass</p>
<p>五、多层循环<br>while和for循环内的代码块中也可以包含循环语句。</p>
<p>例题：将1~100打印到一个10 * 10的矩阵中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(k, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure>

<p>练习：打印 1∼100<br>1<br>∼<br>100<br> 中的所有质数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>):</span><br><span class="line">    is_prime = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            is_prime = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> is_prime:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p>六、作业题易错点<br>注意多层for循环中所使用的循环变量尽量使用不同的变量名，防止相互干扰。<br>Python3中求一个数的绝对值，可以使用abs()函数。</p>
<h1 id="笔记4"><a href="#笔记4" class="headerlink" title="笔记4"></a>笔记4</h1><h2 id="列表的初始化"><a href="#列表的初始化" class="headerlink" title="列表的初始化"></a>列表的初始化</h2><p>列表需要用方括号括起来，中间的元素用逗号隔开，最后一个元素后可以多加一个逗号。</p>
<p>1.1 直接初始化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = []  <span class="comment"># 定义一个空列表</span></span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>]  <span class="comment"># 含有2个整数的列表</span></span><br><span class="line">c = [<span class="number">6</span>, <span class="string">&quot;python&quot;</span>, <span class="number">3.14</span>]  <span class="comment"># 含有3个不同类型元素的列表</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure>


<p>1.2 通过append函数初始化<br>append()函数可以在列表末尾添加一个元素。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># 初始化[0, 0, 0, 0, 0]</span></span><br><span class="line">    a.append(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">n = <span class="number">4</span></span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  <span class="comment"># 初始化[0, 1, 4, 9]</span></span><br><span class="line">    b.append(i * i)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.3 通过for语句初始化列表长度和每个位置的数值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]  <span class="comment"># 初始化[0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">n = <span class="number">4</span></span><br><span class="line">b = [i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]  <span class="comment"># 初始化[0, 1, 4, 9]</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>

<h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><p>可以通过下标读&#x2F;写列表中的元素，下标从0开始，也可以是<strong>负数，负数下标</strong>表示的是除以<strong>列表长度的余数</strong>对应的位置。</p>
<p>负数下标相当于将列表首位相接，然后从0往前数。</p>
<p>如果列表长度是 n，那么下标只能取 −n∼n−1之间的整数，超出范围会报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>])  <span class="comment"># 读取列表中每个位置的值</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">3</span>  <span class="comment"># 给列表中的某个位置写值</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">1</span>])  <span class="comment"># 由于-1 % 3 = 2，所以表示的是a[2]</span></span><br></pre></td></tr></table></figure>

<h2 id="使用循环语句遍历列表"><a href="#使用循环语句遍历列表" class="headerlink" title="使用循环语句遍历列表"></a>使用循环语句遍历列表</h2><p>可以通过<strong>下标</strong>访问，就是需要i ，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(a[i], end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>可以通过for … in …直接遍历，就是不需要i，例如：</p>
<p>但是这种方式只能读取，不能修改。</p>
<p>个人猜测，或者记忆口诀：感觉原因是x 是 a列表对应的一个元素的 <strong>副本</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="列表的切片操作"><a href="#列表的切片操作" class="headerlink" title="列表的切片操作"></a>列表的切片操作</h2><p>列表的切片操作会返回一个新列表。用法：</p>
<p>a[begin:end] 会返回包含a[begin], a[begin + 1], …, a[end - 1]的列表。</p>
<p>记忆背诵成左闭右开的区间</p>
<p>省略begin时，begin的默认值是0。<br>省略end时，end的默认值是列表长度。<br>如果begin或end是负数，表示的是除以列表长度后的余数。<br>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 输出[1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:])  <span class="comment"># 输出[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">4</span>])  <span class="comment"># 输出[0, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(a[:])  <span class="comment"># 输出[0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># 等价于print(a[1:4])</span></span><br><span class="line">切片也支持写操作：</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>:<span class="number">4</span>] = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="列表的复制"><a href="#列表的复制" class="headerlink" title="列表的复制"></a>列表的复制</h2><p>列表跟其他变量类型不同，<strong>如果用等号复制列表，那么原列表和新列表是同一个列表。对新列表修改，会修改原列表的值。例如：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a, b)  <span class="comment"># 会发现a[0]和b[0]都被修改了</span></span><br></pre></td></tr></table></figure>

<p>使用切片，可以得到一个原列表的<strong>浅拷贝</strong>。此时再修改新列表，原列表就不会发生变化了。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a[:]</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a, b)  <span class="comment"># 会发现a[0]没有被修改</span></span><br></pre></td></tr></table></figure>

<h2 id="列表的运算"><a href="#列表的运算" class="headerlink" title="列表的运算"></a>列表的运算</h2><p>列表的加法可以将两个列表<strong>拼接</strong>起来，得到一个新列表。<br>列表乘以一个整数，可以将<strong>若干个自身拼接</strong>起来，得到一个新列表。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">c = a + b  <span class="comment"># c相当于a和b的浅拷贝</span></span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># 输出[0, 1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">d = a * <span class="number">3</span>  <span class="comment"># d相当于a的浅拷贝</span></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出[0, 1, 2, 0, 1, 2, 0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">a += [<span class="number">3</span>]  <span class="comment"># 在a的末尾添加一个新元素3</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h2 id="列表的常用操作"><a href="#列表的常用操作" class="headerlink" title="列表的常用操作"></a>列表的常用操作</h2><p>假设a是一个列表，则：</p>
<p><code>len(a)</code> 返回列表长度。<br><code>a.append(x)</code> 在列表末尾添加一个新元素。<br><code>a.pop()</code> 删除列表的最后一个元素,,而且会返回被删除的元素<br><code>a.reverse()</code> 将整个列表翻转。<br><code>a.sort() </code>将整个列表从小到大排序。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))  <span class="comment"># 输出3</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">a.pop()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 将[0, 1, 2, 3]的最后一个数删掉，所以输出[0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">a.reverse()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[2, 1, 0]</span></span><br><span class="line"></span><br><span class="line">a.sort()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 1, 2]</span></span><br></pre></td></tr></table></figure>

<p>更多详情可以看官方文档</p>
<p><a href="https://docs.python.org/zh-cn/3/tutorial/index.html">https://docs.python.org/zh-cn/3/tutorial/index.html</a></p>
<ol start="8">
<li>嵌套列表<br>列表中的元素也可以是列表，例如：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [  <span class="comment"># 列表中的元素也可以是列表</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],  <span class="comment"># 最后一个元素后可以添加逗号</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">matrix[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">99</span>  <span class="comment"># 修改嵌套列表中元素的值</span></span><br><span class="line"><span class="built_in">print</span>(matrix[<span class="number">1</span>][<span class="number">0</span>])  <span class="comment"># 读取嵌套列表中元素的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):  <span class="comment"># 循环打印整个矩阵</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix[i])):</span><br><span class="line">        <span class="built_in">print</span>(matrix[i][j], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()  <span class="comment"># 在行末输出回车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:  <span class="comment"># 循环打印整个矩阵</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> row:</span><br><span class="line">        <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()  <span class="comment"># 在行末输出回车</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>嵌套列表的常用<strong>初始化方</strong>式有两种。</p>
<p>采用append()函数初始化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    row = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        row.append(i * <span class="number">3</span> + j)</span><br><span class="line">    matrix.append(row)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更加简单的写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[i * <span class="number">3</span> + j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br></pre></td></tr></table></figure>

<p>采用for语句直接初始化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[i * <span class="number">3</span> + j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br></pre></td></tr></table></figure>

<h2 id="作业题扩展内容"><a href="#作业题扩展内容" class="headerlink" title="作业题扩展内容"></a>作业题扩展内容</h2><p>当需要读入一行整数时，可以用：</p>
<p>a &#x3D; list(map(int, input().split()))</p>
<p>类似地，当需要读入一行浮点数时，可以用</p>
<p>a &#x3D; list(map(float, input().split()))</p>
<p>min(a, b)可以求两个数的最小值。类似得min(a, b, c)可以求三个数的最小值，以此类推。同样地max()可以求最大值。</p>
<p>a[::-1]可以返回一个逆序的新列表。</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>AcWing</tag>
      </tags>
  </entry>
  <entry>
    <title>CS50</title>
    <url>/2024/06/02/CS50/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没绷住，一开始满怀期待的点开打算学习的，结果发现老师讲的太广太散，我目前不太需要这种课程，我先停下来吧。</p>
<p>一开始想着，跳过这个从CS61A开始，但是根据过去的经验，我一定会高估自己。然后遇到困难就放弃hhhhhh。</p>
<p>后来网上搜索比对半天，发现自己还是应该看CS50.毕竟自己没有系统学过python，而且好多很多帖子都说看这个，说明CS50认可度很高很高。既然是认可度高的，既然是火的，那做起来就有意义，除了得到学习的知识之外，让别人认可你学的课程，在这个分秒必争，没意义就不做（当然我不是贬义，因为大家都是肉做的，不可能天天做没意义的事情等着饿死）的世界里是尤为重要的。</p>
<h1 id="导航指南"><a href="#导航指南" class="headerlink" title="导航指南"></a>导航指南</h1><p>这个链接就像一个伟大的导航，几乎是看不完所有到文字视频的</p>
<p><a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/C/CS50/#_2">https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/C/CS50/#_2</a></p>
<h1 id="视频表格"><a href="#视频表格" class="headerlink" title="视频表格"></a>视频表格</h1><table>
<thead>
<tr>
<th align="center">serial number</th>
<th align="center">Title</th>
<th align="center">Done</th>
</tr>
</thead>
<tbody><tr>
<td align="center">P1</td>
<td align="center">哈佛大学介绍</td>
<td align="center">✔</td>
</tr>
<tr>
<td align="center">P2</td>
<td align="center">Scratch</td>
<td align="center">✔</td>
</tr>
<tr>
<td align="center">P3</td>
<td align="center">C语言</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">P4</td>
<td align="center">数组</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">P5</td>
<td align="center">算法</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">存储</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>CSDIY</tag>
        <tag>CS50</tag>
      </tags>
  </entry>
  <entry>
    <title>CMU CS15213: CSAPP</title>
    <url>/2024/06/02/CMU-CS15213-CSAPP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CMU-CS15213-CSAPP"><a href="#CMU-CS15213-CSAPP" class="headerlink" title="CMU CS15213: CSAPP"></a>CMU CS15213: CSAPP</h1><h2 id="课程简介"><a href="#课程简介" class="headerlink" title="课程简介"></a>课程简介</h2><ul>
<li>所属大学：CMU</li>
<li>先修要求：CS61A, CS61B</li>
<li>编程语言：C</li>
<li>课程难度：🌟🌟🌟🌟🌟</li>
<li>预计学时：150 小时</li>
</ul>
<p>北大购买了这门课的版权并开设了 Introduction to Computer System 这门课，但其实 CSAPP 所有的课程资源和实验代码都能在它的官方主页上访问到（具体参见下方链接）。</p>
<p>这门课由于过于出名，全世界的码农争相学习，导致其 Project 的答案在网上几乎唾手可得。但如果你真的想锻炼自己的代码能力，希望你不要借鉴任何第三方代码。</p>
<p>认真学完这一门课，你对计算机系统的理解绝对会上升一个台阶。</p>
<h2 id="课程资源"><a href="#课程资源" class="headerlink" title="课程资源"></a>课程资源</h2><ul>
<li>课程网站：<a href="http://csapp.cs.cmu.edu/">http://csapp.cs.cmu.edu/</a></li>
<li>课程视频：<a href="https://www.bilibili.com/video/BV1iW411d7hd">https://www.bilibili.com/video/BV1iW411d7hd</a></li>
<li>课程教材：Computer Systems: A Programmer’s Perspective, 3&#x2F;E</li>
<li>课程作业：11 个 Project，<a href="http://csapp.cs.cmu.edu/3e/labs.html">代码框架全部开源</a></li>
</ul>
<p>英语有困难的同学可以参考B站UP主<a href="https://space.bilibili.com/354767108/">九曲阑干</a>对 CSAPP 的<a href="https://www.bilibili.com/video/BV1cD4y1D7uR">中文讲解</a>（据说CMU的中国留学生也在CMU的课堂上看这个视频呢）。另外如果大家在看完 CSAPP 后对书中的第七章链接有一定的疑问，推荐阅读《程序员的自我修养》这本书，书的副标题是链接，装载与库。这本书能够帮助我们完善对程序链接的理解，相信你在看完这本书以后可以对程序的链接，ELF 文件，动态库都将有一个更加深入的理解。十分推荐在读完 CSAPP，对计算机系统有一定的了解以后作为补充资料来阅读。</p>
<p>有关 Lab 部分，同学们亦可参考 <a href="https://arthals.ink/about-me">Arthals</a> 在北大计算机系统导论（ICS）课程中所做的详尽笔记：</p>
<ul>
<li><a href="https://arthals.ink/posts/experience/data-lab">Data Lab</a></li>
<li><a href="https://arthals.ink/posts/experience/bomb-lab">Bomb Lab</a></li>
<li><a href="https://arthals.ink/posts/experience/attack-lab">Attack Lab</a></li>
<li><a href="https://arthals.ink/posts/experience/arch-lab">Arch Lab</a></li>
<li><a href="https://arthals.ink/posts/experience/cache-lab">Cache Lab</a></li>
<li><a href="https://arthals.ink/posts/experience/tsh-lab">Tsh Lab</a></li>
<li><a href="https://arthals.ink/posts/experience/malloc-lab">Malloc Lab</a></li>
<li><a href="https://arthals.ink/posts/experience/proxy-lab">Proxy Lab</a></li>
</ul>
<h1 id="进度1"><a href="#进度1" class="headerlink" title="进度1"></a>进度1</h1><p>第一个学习资源【【CSAPP-深入理解计算机系统】1-1.计算机系统漫游】 <a href="https://www.bilibili.com/video/BV1cD4y1D7uR/?share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1cD4y1D7uR/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p>
<table>
<thead>
<tr>
<th align="center">九曲阑干的中文讲解</th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">1-1.计算机系统漫游</td>
<td align="center">ing</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h1 id="【CSAPP-深入理解计算机系统】1-1-计算机系统漫游"><a href="#【CSAPP-深入理解计算机系统】1-1-计算机系统漫游" class="headerlink" title="【CSAPP-深入理解计算机系统】1-1.计算机系统漫游"></a>【CSAPP-深入理解计算机系统】1-1.计算机系统漫游</h1><p>讲了个概述，没记笔记。</p>
<p>感觉以自己的水平看这些东西太难了。之恩那个一步一步慢慢来。下面这个南大的算是很好的，胜在完整性，不会突然一下子难度曲线陡然上升。</p>
<p>我先做 SICP吧，，感觉比较适合我这样的菜鸡。</p>
<p>网上别人原话：</p>
<p>其实国内也是有很不错的课程的，比如南京大学的ICS课程</p>
<p>配套实验地址如下<a href="https://nju-projectn.github.io/ics-pa-gitbook/ics2021/index.html">https://nju-projectn.github.io/ics-pa-gitbook/ics2021/index.html</a></p>
<p>课程录像和资料可以在jyywiki.cn&#x2F;ICS&#x2F;2021 上找到</p>
<p>还有南大本土化了的UCB CS61 A，<a href="https://nju-sicp.bitbucket.io/">https://nju-sicp.bitbucket.io/</a></p>
<p>南大本土化的课完全找不到对应的视频，，还是直接看看CS61A吧</p>
<h1 id="一路自学编程搜集的资源"><a href="#一路自学编程搜集的资源" class="headerlink" title="一路自学编程搜集的资源"></a>一路自学编程搜集的资源</h1><p>稀土掘金挖到的好东西。</p>
<p><a href="https://juejin.cn/post/6952385958226427917">https://juejin.cn/post/6952385958226427917</a></p>
<p>他这个对我而言更加的系统，更加的有人一步一步知道</p>
]]></content>
      <tags>
        <tag>CSDIY</tag>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>2021CS61BWeek3and4</title>
    <url>/2024/06/02/2021CS61BWeek3and4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="2021CS61BWeek3and4"><a href="#2021CS61BWeek3and4" class="headerlink" title="2021CS61BWeek3and4"></a>2021CS61BWeek3and4</h1><h1 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h1><p>24OUT表示以后24的视频非特殊情况，例如21讲的自己不懂，除非特殊情况都不看24的讲课视频。翻译成中文的视频的标题为我下面的VideoName，也尝试过写成官方网站上英文的样子，但是对学习的效率有较大的影响，所以还是写成中文。</p>
<table>
<thead>
<tr>
<th align="center">VideoName</th>
<th align="center">Done</th>
<th align="center">warning</th>
</tr>
</thead>
<tbody><tr>
<td align="center">sp24</td>
<td align="center">24OUT</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">6.DLList, Arrays</td>
<td align="center">ing</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">6.现场问答</td>
<td align="center">扫过</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">sp24</td>
<td align="center">24OUT</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">7.AList,调整大小SList</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">7.现场问答</td>
<td align="center">扫过</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">范围，静态，链接列表</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">sp24</td>
<td align="center">24OUT</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8.接口和实现继承</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8.现场问答</td>
<td align="center">扫过</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">sp24</td>
<td align="center">24OUT</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">9.扩展，强制类型转换，高阶函数</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">9.现场问答</td>
<td align="center">扫过</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>还是尽量模拟他们的表格，来一个一个完成任务吧</p>
<table>
<thead>
<tr>
<th align="center"><strong>Reading</strong></th>
<th align="center"><strong>Lecture</strong></th>
<th align="center"><strong>Discussion</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>Discussion</strong></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>对SLList的总结，同时引出DLList</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602192942918.png" alt="image-20240602192942918"></p>
<h2 id="6-DLLists-Arrays"><a href="#6-DLLists-Arrays" class="headerlink" title="6_DLLists, Arrays"></a>6_DLLists, Arrays</h2><h3 id="3-2-DLList-A-Doubly-Linked-List双向链表"><a href="#3-2-DLList-A-Doubly-Linked-List双向链表" class="headerlink" title="3.2 DLList: A Doubly-Linked List双向链表"></a><a href="https://opendatastructures.org/ods-java/3_2_DLList_Doubly_Linked_Li.html">3.2 DLList: A Doubly-Linked List</a>双向链表</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602193306165.png" alt="image-20240602193306165"></p>
<p>第二个哨兵</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602193444894.png" alt="image-20240602193444894"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602193548550.png" alt="image-20240602193548550"></p>
<h3 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602193646982.png" alt="image-20240602193646982"></p>
<p>双向链表配两个哨兵或者双向循环链表可以避免很多分类的情况。</p>
<h3 id="双向链表-泛型（Generic-DLLists）"><a href="#双向链表-泛型（Generic-DLLists）" class="headerlink" title="双向链表- 泛型（Generic DLLists）"></a>双向链表- 泛型（<em>Generic DLLists</em>）</h3><p>歇息一会，要写写作业</p>
<p>然后复习复习。然后就是要换个新的md文档写了，这个typora都开始卡了</p>
<h1 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h1><p>24OUT表示以后24的视频非特殊情况，例如21讲的自己不懂，除非特殊情况都不看24的讲课视频。翻译成中文的视频的标题为我下面的VideoName，也尝试过写成官方网站上英文的样子，但是对学习的效率有较大的影响，所以还是写成中文。</p>
<table>
<thead>
<tr>
<th align="center">VideoName</th>
<th align="center">Done</th>
<th align="center">warning</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>还是尽量模拟他们的表格，来一个一个完成任务吧</p>
<table>
<thead>
<tr>
<th align="center"><strong>Reading</strong></th>
<th align="center"><strong>Lecture</strong></th>
<th align="center"><strong>Discussion</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>CS61B</tag>
        <tag>CSDIY</tag>
      </tags>
  </entry>
  <entry>
    <title>Intellij IDEA 快捷键TIPS</title>
    <url>/2024/06/02/Intellij-IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AETIPS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Intellij-IDEA-快捷键TIPS"><a href="#Intellij-IDEA-快捷键TIPS" class="headerlink" title="Intellij IDEA 快捷键TIPS"></a>Intellij IDEA 快捷键TIPS</h1><h2 id="跨文件的跳转"><a href="#跨文件的跳转" class="headerlink" title="跨文件的跳转"></a>跨文件的跳转</h2><blockquote>
<p><code>Alt + LEFT / Alt + RIGHT</code> 切换到左侧&#x2F;右侧的标签页。</p>
</blockquote>
<p>需要在两三个标签页之间来回切换时，这是最高效的方式。</p>
<blockquote>
<p><code>Ctrl + E</code> 在弹窗中打开最近浏览的文件。</p>
</blockquote>
<p>开发者下一个想要浏览的文件，通常最近刚刚浏览过。如果你打开的标签页比较多，或者你想要打开的标签页刚刚关闭（用 <code>Ctrl + F4</code> 关闭标签页），那么 <code>Ctrl + E</code> 通常是你跳转到下个文件的最快方法。</p>
<blockquote>
<p><code>Ctrl + B</code> 跳转到声明。<br><code>Ctrl + Alt + B</code> 跳转到定义。<br><code>Ctrl + Shift + I</code> 在弹窗中预览定义。<br><code>Ctrl + U</code> 跳转到父类&#x2F;父类方法。</p>
</blockquote>
<p>上面四个快捷键的使用频率极高，请一定熟练掌握。</p>
<blockquote>
<p><code>Ctrl + N</code> 跳转到指定类。<br><code>Ctrl + Shift + N</code> 跳转到指定文件。<br><code>Ctrl + Shift + Alt + N</code> 跳转到指定符号。</p>
</blockquote>
<p>上面三个快捷键提供了项目内定向搜索的能力，比直接使用 <code>Ctrl + Shift + F</code> 甚至 <code>Double Shift</code> 搜索要快很多。</p>
<h2 id="4-2-编辑"><a href="#4-2-编辑" class="headerlink" title="4.2 编辑"></a><strong>4.2 编辑</strong></h2><ol>
<li>向下复制一行：Ctrl + D.</li>
<li>向上复制一行：需自己设置</li>
<li>删除所在<strong>行</strong>或光标所在<strong>行</strong>：Ctrl + X &#x2F;Ctrl + Y.</li>
<li>向上移动代码：Ctrl + Shift + ↓</li>
<li>向下移动代码： Ctrl + Shift + ↑</li>
<li>在光标所在<strong>行</strong>下添加一个<strong>空行</strong>： Shift + Enter.</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>MIT-Missing-Semester</title>
    <url>/2024/05/31/MIT-Missing-Semester/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MIT-Missing-Semester"><a href="#MIT-Missing-Semester" class="headerlink" title="MIT-Missing-Semester"></a>MIT-Missing-Semester</h1><h2 id="自制双语字幕-计算机教育缺失的一课-2020-第1讲-课程概览与-shell✔"><a href="#自制双语字幕-计算机教育缺失的一课-2020-第1讲-课程概览与-shell✔" class="headerlink" title="[自制双语字幕] 计算机教育缺失的一课(2020) - 第1讲 - 课程概览与 shell✔"></a>[自制双语字幕] 计算机教育缺失的一课(2020) - 第1讲 - 课程概览与 shell✔</h2><p>【[自制双语字幕] 计算机教育缺失的一课(2020) - 第1讲 - 课程概览与 shell】 <a href="https://www.bilibili.com/video/BV1uc411N7eK/?share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1uc411N7eK/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p>
<p>不要急着一口气吃成胖子，遇到不会的就差，不会就放着。这个也是慢慢学一点。</p>
<p>就像之前学的git，结果自己在做CS61B的时候不就用上了吗</p>
<p>他这个装的虚拟机不知道为什么用不了，第一节课我都在GitBash上面操作的，大部分命令都有，没啥不一样。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531143900664.png" alt="image-20240531143900664"></p>
<p>看完了</p>
<h2 id="自制双语字幕-计算机教育缺失的一课-2020-第2讲-Shell-工具和脚本"><a href="#自制双语字幕-计算机教育缺失的一课-2020-第2讲-Shell-工具和脚本" class="headerlink" title="[自制双语字幕] 计算机教育缺失的一课(2020) - 第2讲 - Shell 工具和脚本"></a>[自制双语字幕] 计算机教育缺失的一课(2020) - 第2讲 - Shell 工具和脚本</h2><p>上的还挺有意思的，别中途放弃了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531145934033.png" alt="image-20240531145934033"></p>
<p>主要的问题是GitBash他没有权限啊，没有<code>sudo</code>命令</p>
<p>先听到这，会停止是一种能力</p>
<p><a href="https://www.bilibili.com/video/BV1xa4y1g7sZ/?spm_id_from=333.788.recommend_more_video.-1&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1xa4y1g7sZ/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
]]></content>
      <tags>
        <tag>CSDIY</tag>
      </tags>
  </entry>
  <entry>
    <title>Hot100DDL乱写</title>
    <url>/2024/05/31/Hot100DDL%E4%B9%B1%E5%86%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>s</p>
<p>为了100元钱，全部胡弄完了</p>
]]></content>
  </entry>
  <entry>
    <title>Coursera: Algorithms I &amp; II</title>
    <url>/2024/05/31/Coursera-Algorithms-I-II/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Coursera-Algorithms-I-amp-II"><a href="#Coursera-Algorithms-I-amp-II" class="headerlink" title="Coursera: Algorithms I &amp; II"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Algo/">Coursera: Algorithms I &amp; II</a></h1><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531093957717.png" alt="image-20240531093957717"></p>
<p>太棒了，用的是java8，把我就不用切换jdk了</p>
<h2 id="第-1-周"><a href="#第-1-周" class="headerlink" title="第 1 周"></a><a href="https://www.coursera.org/learn/algorithms-part1/home/week/1">第 1 周</a></h2><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531094219326.png" alt="image-20240531094219326"></p>
<p>一来就碰到难题，这可真是让人头大，上网搜索解决方法。</p>
<p><a href="https://www.cnblogs.com/Howfars/p/13488122.html">https://www.cnblogs.com/Howfars/p/13488122.html</a></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531100148315.png" alt="image-20240531100148315"></p>
<p><a href="https://blog.csdn.net/weixin_43914604/article/details/105499117">https://blog.csdn.net/weixin_43914604/article/details/105499117</a></p>
<p>哈哈哈，，我也发现了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240531100307788.png" alt="image-20240531100307788"></p>
<p>md别遇到问题就放弃卧槽</p>
<p><a href="https://blog.csdn.net/qq_43152052/article/details/100155374">https://blog.csdn.net/qq_43152052/article/details/100155374</a></p>
<p><a href="https://www.cnblogs.com/Howfars/p/13488122.html">https://www.cnblogs.com/Howfars/p/13488122.html</a></p>
<p><a href="https://blog.csdn.net/weixin_43914604/article/details/105499117">https://blog.csdn.net/weixin_43914604/article/details/105499117</a></p>
<p><a href="https://algs4.cs.princeton.edu/code/">https://algs4.cs.princeton.edu/code/</a></p>
<p><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Algo/#_1">https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Algo/#_1</a></p>
<p><a href="https://www.coursera.org/learn/algorithms-part1/programming/37IH3/hello-world/instructions">https://www.coursera.org/learn/algorithms-part1/programming/37IH3/hello-world/instructions</a></p>
<p><a href="https://lift.cs.princeton.edu/java/windows/">https://lift.cs.princeton.edu/java/windows/</a></p>
]]></content>
      <tags>
        <tag>CSDIY</tag>
      </tags>
  </entry>
  <entry>
    <title>csDiyPath</title>
    <url>/2024/05/31/csDiyPath/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CS自学指南"><a href="#CS自学指南" class="headerlink" title="CS自学指南"></a>CS自学指南</h1><h1 id="前言✔"><a href="#前言✔" class="headerlink" title="前言✔"></a><a href="https://csdiy.wiki/">前言</a>✔</h1><p>看完之后只能惊叹于作者对学习的渴望，行动力之强，坚持得下去，最最重要的是，足够自觉，足够自律，足够懂事。</p>
<p>我也不是没看到过别人说要自学，，但是我和绝大部分人一样，看了一眼视频就匆匆放弃 。这次，我永远当不了第一个人，但是我永远可以抄袭别人，当第二个人。</p>
<p>作者开始的地方是CS61A，是Python入门</p>
<h1 id="如何使用这本书"><a href="#如何使用这本书" class="headerlink" title="如何使用这本书"></a><a href="https://csdiy.wiki/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">如何使用这本书</a></h1><h1 id="一个仅供参考的CS学习规划"><a href="#一个仅供参考的CS学习规划" class="headerlink" title="一个仅供参考的CS学习规划"></a><a href="https://csdiy.wiki/CS%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/">一个仅供参考的CS学习规划</a></h1><p>必学工具</p>
<p><a href="https://csdiy.wiki/%E5%A5%BD%E4%B9%A6%E6%8E%A8%E8%8D%90/">好书推荐</a></p>
<p>数学基础</p>
<p>数学进阶</p>
<h1 id="编程入门"><a href="#编程入门" class="headerlink" title="编程入门"></a>编程入门</h1><h2 id="MIT-Missing-Semester"><a href="#MIT-Missing-Semester" class="headerlink" title="MIT-Missing-Semester"></a><a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/MIT-Missing-Semester/">MIT-Missing-Semester</a></h2><p>正如课程名字所言：“计算机教学中消失的一个学期”，这门课将会教会你许多大学的课堂上不会涉及但却对每个 CSer 无比重要的工具或者知识点。例如 Shell 编程、命令行配置、Git、Vim、<code>tmux</code>、<code>ssh</code> 等等。如果你是一个计算机小白，那么我非常建议你学习一下这门课，因为它基本涉及了本书必学工具中的绝大部分内容。</p>
<p>除了 MIT 官方的学习资料外，北京大学图灵班开设的前沿计算实践中也开设了相关课程，资料位于<a href="http://vcl.pku.edu.cn/course/PFCII/2021-spring/index.html">这个网站</a>下，供大家参考。</p>
<p>图灵班没有北大内网进不去</p>
<h2 id="课程资源"><a href="#课程资源" class="headerlink" title="课程资源"></a>课程资源</h2><ul>
<li><p>课程网站：<a href="https://missing.csail.mit.edu/2020/">https://missing.csail.mit.edu/2020/</a></p>
</li>
<li><p>课程中文网站: <a href="https://missing-semester-cn.github.io/">https://missing-semester-cn.github.io/</a></p>
</li>
<li><p>课程视频：<a href="https://www.youtube.com/playlist?list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J">https://www.youtube.com/playlist?list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J</a></p>
</li>
<li><p>课程中文字幕视频：</p>
<ul>
<li>Missing_Semi_中译组（未完结）：<a href="https://space.bilibili.com/1010983811?spm_id_from=333.337.search-card.all.click">https://space.bilibili.com/1010983811?spm_id_from=333.337.search-card.all.click</a></li>
<li>刘黑黑a（已完结）：<a href="https://space.bilibili.com/518734451?spm_id_from=333.337.search-card.all.click">https://space.bilibili.com/518734451?spm_id_from=333.337.search-card.all.click</a></li>
</ul>
</li>
<li><p>课程作业：一些随堂小练习，具体见课程网站。</p>
</li>
</ul>
<h2 id="Sysadmin-DeCal"><a href="#Sysadmin-DeCal" class="headerlink" title="Sysadmin DeCal"></a><a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/DeCal/">Sysadmin DeCal</a></h2><h2 id="Python-语言"><a href="#Python-语言" class="headerlink" title="Python 语言"></a>Python 语言</h2><h3 id="UCB-CS61A-Structure-and-Interpretation-of-Computer-Programs"><a href="#UCB-CS61A-Structure-and-Interpretation-of-Computer-Programs" class="headerlink" title="UCB CS61A: Structure and Interpretation of Computer Programs"></a><a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/Python/CS61A/">UCB CS61A: Structure and Interpretation of Computer Programs</a></h3><p>md还是这个吧，试试作者口中是神课。速上速过</p>
<h3 id="CS50P-CS50’s-Introduction-to-Programming-with-Python"><a href="#CS50P-CS50’s-Introduction-to-Programming-with-Python" class="headerlink" title="CS50P: CS50’s Introduction to Programming with Python"></a><a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/Python/CS50P/">CS50P: CS50’s Introduction to Programming with Python</a></h3><h2 id="Java-语言"><a href="#Java-语言" class="headerlink" title="Java 语言"></a>Java 语言</h2><h3 id="MIT-6-092-Introduction-To-Programming-In-Java-https-csdiy-wiki-编程入门-Java-MIT-6-092-x2F"><a href="#MIT-6-092-Introduction-To-Programming-In-Java-https-csdiy-wiki-编程入门-Java-MIT-6-092-x2F" class="headerlink" title="[MIT 6.092: Introduction To Programming In Java](https://csdiy.wiki/编程入门/Java/MIT 6.092&#x2F;)"></a>[MIT 6.092: Introduction To Programming In Java](<a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/Java/MIT">https://csdiy.wiki/编程入门/Java/MIT</a> 6.092&#x2F;)</h3><p>自己基础真是一坨屎，连</p>
<p><code>javac</code> ， <code>java</code>到现在都搞不清楚。</p>
<p>md给我重新学</p>
<p>md这个没有视频啊，那我不学这个</p>
<p>电子基础</p>
<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><h2 id="UCB-CS61B-Data-Structures-and-Algorithms"><a href="#UCB-CS61B-Data-Structures-and-Algorithms" class="headerlink" title="UCB CS61B: Data Structures and Algorithms"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/CS61B/">UCB CS61B: Data Structures and Algorithms</a></h2><h2 id="Coursera-Algorithms-I-amp-II"><a href="#Coursera-Algorithms-I-amp-II" class="headerlink" title="Coursera: Algorithms I &amp; II"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Algo/">Coursera: Algorithms I &amp; II</a></h2><p>ing</p>
<h2 id="MIT-6-006-Introduction-to-Algorithms"><a href="#MIT-6-006-Introduction-to-Algorithms" class="headerlink" title="MIT 6.006: Introduction to Algorithms"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/6.006/">MIT 6.006: Introduction to Algorithms</a></h2><h2 id="MIT-6-046-Design-and-Analysis-of-Algorithms"><a href="#MIT-6-046-Design-and-Analysis-of-Algorithms" class="headerlink" title="MIT 6.046: Design and Analysis of Algorithms"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/6.046/">MIT 6.046: Design and Analysis of Algorithms</a></h2><h2 id="UCB-CS170-Efficient-Algorithms-and-Intractable-Problems"><a href="#UCB-CS170-Efficient-Algorithms-and-Intractable-Problems" class="headerlink" title="UCB CS170: Efficient Algorithms and Intractable Problems"></a><a href="https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/CS170/">UCB CS170: Efficient Algorithms and Intractable Problems</a></h2><ul>
<li>软件工程</li>
<li>计算机系统基础</li>
<li>体系结构</li>
<li>操作系统</li>
<li>并行与分布式系统</li>
<li>计算机系统安全</li>
<li>计算机网络</li>
<li>数据库系统</li>
<li>编译原理</li>
<li>编程语言设计与分析</li>
<li>计算机图形学</li>
<li>Web开发</li>
<li>数据科学</li>
<li>人工智能</li>
<li>机器学习</li>
<li>机器学习系统</li>
<li>深度学习</li>
<li>机器学习进阶</li>
<li><a href="https://csdiy.wiki/%E5%90%8E%E8%AE%B0/">后记</a></li>
</ul>
]]></content>
      <tags>
        <tag>CSDIY</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营day24-理论基础-77</title>
    <url>/2024/05/30/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5day24-%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-77/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="回溯算法理论基础"><a href="#回溯算法理论基础" class="headerlink" title="回溯算法理论基础"></a>回溯算法理论基础</h1><p>代码模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; n) <span class="built_in">output</span>(x);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">f</span>(n, t); i &lt;= <span class="built_in">g</span>(n, t); i++) &#123;</span><br><span class="line">            x[t] = <span class="built_in">h</span>(i);<span class="comment">//当前解</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">constraint</span>(t) &amp;&amp; <span class="built_in">bound</span>(t)) <span class="built_in">backtrack</span>(t + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>回溯法解决的问题都可以抽象为树形结构</strong>，是的，我指的是所有回溯法的问题都可以抽象为树形结构！</p>
<p>因为回溯法解决的都是在集合中递归查找子集，<strong>集合的大小就构成了树的宽度，递归的深度就构成了树的深度</strong>。</p>
<p>回溯法一般是在集合中递归搜索，集合的大小构成了树的宽度，递归的深度构成的树的深度。</p>
<p>大家可以从图中看出<strong>for循环可以理解是横向遍历，backtracking（递归）就是纵向遍历</strong>，这样就把这棵树全遍历完了，一般来说，搜索叶子节点就是找的其中一个结果了。</p>
<p>卡哥模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(参数)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        <span class="built_in">backtracking</span>(路径，选择列表); <span class="comment">// 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="组合问题"><a href="#组合问题" class="headerlink" title="组合问题"></a>组合问题</h1><p>每一层递归就是相当于一个for循环。</p>
<p>嵌套多少个for循环，就相当于递归多少次</p>
<h2 id="经典错误，当时是我犯的错误"><a href="#经典错误，当时是我犯的错误" class="headerlink" title="经典错误，当时是我犯的错误"></a>经典错误，当时是我犯的错误</h2><p><code>            backtracking(n, k, startIndex + 1);</code>应该是<code>i + 1</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//一维数组path，存放路径</span></span><br><span class="line">    <span class="comment">//二维数组result，存放所有符合要求的path，组成结果集、</span></span><br><span class="line">    <span class="comment">//也可以不定义成全局变量，但是定义成引用变量的话，递归函数里参数过多</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>()  == k) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归过程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startIndex;i &lt;= n;i++)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">backtracking</span>(n, k, startIndex + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="正确答案"><a href="#正确答案" class="headerlink" title="正确答案"></a>正确答案</h2><p><code>i &lt;= n - (k - path.size()) + 1</code></p>
<p>常见剪枝思路就是缩小i的范围</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//一维数组path，存放路径</span></span><br><span class="line">    <span class="comment">//二维数组result，存放所有符合要求的path，组成结果集、</span></span><br><span class="line">    <span class="comment">//也可以不定义成全局变量，但是定义成引用变量的话，递归函数里参数过多</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>()  == k) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归过程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startIndex;i &lt;= n;i++)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">backtracking</span>(n, k, i + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="剪枝操作"><a href="#剪枝操作" class="headerlink" title="剪枝操作"></a>剪枝操作</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//一维数组path，存放路径</span></span><br><span class="line">    <span class="comment">//二维数组result，存放所有符合要求的path，组成结果集、</span></span><br><span class="line">    <span class="comment">//也可以不定义成全局变量，但是定义成引用变量的话，递归函数里参数过多</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>()  == k) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归过程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startIndex;i &lt;= n - (k - path.<span class="built_in">size</span>()) + <span class="number">1</span>;i++)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">backtracking</span>(n, k, i + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>2021CS61BWeek1and2</title>
    <url>/2024/05/29/2021CS61BWeek1and2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="2021CS61BWeek1and2"><a href="#2021CS61BWeek1and2" class="headerlink" title="2021CS61BWeek1and2"></a>2021CS61BWeek1and2</h1><p>希望能坚持下去，下面这个链接给我坚持的兴趣。</p>
<p>怎样学习数据结构？ 伯克利神课CS61B 总结感悟，学习指南和避坑建议</p>
<p><a href="http://t.csdnimg.cn/6egG4">http://t.csdnimg.cn/6egG4</a></p>
<p>目前策略是这样</p>
<p>优先看完<a href="https://www.bilibili.com/video/BV1Ri421o7dS/?spm_id_from=333.999.0.0&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1Ri421o7dS/?spm_id_from=333.999.0.0&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
<p>如果有不清楚的在看英文原版</p>
<p><a href="https://www.bilibili.com/video/BV1QP4y1u7jv/?spm_id_from=333.337.search-card.all.click&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1QP4y1u7jv/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
<p>怎么实验室lab和家庭作业homework还不一样呢</p>
<p>目前进度windows安装git搞完了</p>
<p>这两个视频都是一样的，都是UCB CS 61B: Data Structures, Spring 2024</p>
<h1 id="L1-Introduction"><a href="#L1-Introduction" class="headerlink" title="L1-Introduction"></a>L1-Introduction</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String model;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> wheels;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String m)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.model = m;</span><br><span class="line">            <span class="built_in">this</span>.wheels = <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.wheels &lt; <span class="number">4</span>) &#123;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.model + <span class="string">&quot;no go vroom&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.model + <span class="string">&quot;go vroom&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWheels</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.wheels;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">driveIntoDitch</span><span class="params">(<span class="type">int</span> wheelsLost)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.wheels -= wheelsLost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;baoshijie&quot;</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;falali&quot;</span>);</span><br><span class="line">        c1.drive();</span><br><span class="line">        c1.driveIntoDitch(<span class="number">1</span>);</span><br><span class="line">        c1.drive();</span><br><span class="line">        System.out.println(c2.getWheels());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L2-Defining-and-Using-Classes"><a href="#L2-Defining-and-Using-Classes" class="headerlink" title="L2 - Defining and Using Classes"></a>L2 - Defining and Using Classes</h1><h2 id="Classes-in-Java"><a href="#Classes-in-Java" class="headerlink" title="Classes in Java"></a>Classes in Java</h2><p><code>Dog.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeNoise</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>DogLauncher.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DogLauncher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Dog.makeNoise();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>static是静态修饰符，什么叫静态修饰符呢？大家都知道，在程序中任何变量或者代码都是在编译时由系统自动分配内存来存储的，而所谓静态就是指在编译后所分配的内存会一直存在，直到程序退出内存才会释放这个空间，也就是只要程序在运行，那么这块内存就会一直存在。这样做有什么意义呢？在Java程序里面，所有的东西都是对象，而对象的抽象就是类，<strong>对于一个类而言，如果要使用他的成员，那么普通情况下必须先实例化对象后，通过对象的引用才能够访问这些成员，但是用static修饰的成员可以通过类名加“.”进行直接访问。也就是你不用实例化对象，对这整个类都是通用的，CS61B原话：用static修饰，对所有的Dog都是通用的。直接通过类名加“.”进行直接访问。</strong>	</p>
<p><code>Dog.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> weightInPounds;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> w)</span>&#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">makeNoise</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;yipyipyip!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;arooooooo!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>DogLauncher.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DogLauncher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">100</span>);</span><br><span class="line">        d1.makeNoise();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>哇，一开始觉得他们讲Dog的例子很难理解，但是听到后面豁然开朗，这个例子贯彻讲解始终，生动的比喻脱离了干涩难懂的术语，好记好懂好理解</p>
</blockquote>
<p>这两种语法上都是对的，但是用那个取决于你。</p>
<p><strong>你是喜欢有一个公正的观察者，还是喜欢特定的狗做把戏并将自己与其他狗进行比较</strong></p>
<p>&#x2F;&#x2F;所有的狗都有相同的通用的学名，那就用static关键字<br>&#x2F;&#x2F; 这是所有狗的学名，是整个类通用的东西，而不是一个变量。对于我创建的每一只狗，他都是常数<br>&#x2F;&#x2F; 不是某一特定狗的学名.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">binomen</span> <span class="operator">=</span> <span class="string">&quot;Canis familiaris&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>Dog.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> weightInPounds;</span><br><span class="line">    <span class="comment">//所有的狗都有相同的通用的学名，那就用static关键字</span></span><br><span class="line">    <span class="comment">// 这是所有狗的学名，是整个类通用的东西，而不是一个变量。对于我创建的每一只狗，他都是常数</span></span><br><span class="line">    <span class="comment">// 不是某一特定狗的学名.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">binomen</span> <span class="operator">=</span> <span class="string">&quot;Canis familiaris&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> w)</span> &#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeNoise</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;yipyipyip!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;arooooooo!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title function_">maxDog</span><span class="params">(Dog d1, Dog d2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (d1.weightInPounds &gt; d2.weightInPounds)</span><br><span class="line">            <span class="keyword">return</span> d1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">maxDog</span><span class="params">(Dog d2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.weightInPounds &gt; d2.weightInPounds)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>DogLauncher.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DogLauncher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">chester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">yusuf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">17</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">larger</span> <span class="operator">=</span> Dog.maxDog(yusuf, chester);</span><br><span class="line">        larger.makeNoise();</span><br><span class="line"></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">huya</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">jaja</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">170</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">larger2</span> <span class="operator">=</span> huya.maxDog(jaja);</span><br><span class="line">        larger2.makeNoise();</span><br><span class="line"></span><br><span class="line">        System.out.println(Dog.binomen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Interactive-Debugging"><a href="#Interactive-Debugging" class="headerlink" title="Interactive Debugging"></a>Interactive Debugging</h2><p> 讲得很好，代码细节不重要，重要的是与调试器交互。就不贴代码了</p>
<h1 id="L3-Lists-I-References-Recursion-and-Lists"><a href="#L3-Lists-I-References-Recursion-and-Lists" class="headerlink" title="L3 - Lists I:References Recursion and Lists"></a>L3 - Lists I:References Recursion and Lists</h1><p>引用递归和列表，，是不是少了一章递归的视频</p>
<h2 id="Primitive-Types-Reference-Types-Parameter-Passing"><a href="#Primitive-Types-Reference-Types-Parameter-Passing" class="headerlink" title="Primitive Types ,Reference Types, Parameter Passing"></a>Primitive Types ,Reference Types, Parameter Passing</h2><p>Java可视化网站<a href="https://cscircles.cemc.uwaterloo.ca/java_visualize/#mode=display">https://cscircles.cemc.uwaterloo.ca/java_visualize/#mode=display</a></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529164851171.png" alt="image-20240529164851171"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529164914940.png" alt="image-20240529164914940"></p>
<p><strong>不是八种基本类型之一的任何东西都被称为引用类型</strong>（reference type）</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529165429175.png" alt="image-20240529165429175"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529165457136.png" alt="image-20240529165457136"></p>
<p>当你实例化一个对象的时候，实际上是创建了对该对象的引用</p>
<p><code>new Walrus(1000, 8.3)</code>返回内存中为海象结构体分配的空间的首地址。你可以把<code>new</code>关键字想象成返回一个数字，这个数字是在内存中的编号位，也就是地址</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529170007680.png" alt="image-20240529170007680"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Walrus someWalrus;</span><br><span class="line">someWalrus = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p><code>someWalrus</code> 是一个指针类型的变量，存放了地址，我们根据这个地址找到海象的在的位置。</p>
<p>这里赋值为<code>NULL</code>就类似于C语言里面 <code>int *p = NULL;</code>一样</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529170344972.png" alt="image-20240529170344972"></p>
<p><code>someWalrus</code>并没有存放海象，相反，这个空间实际上存放着我的海象在内存中的位置</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529170441393.png" alt="image-20240529170441393"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529170643257.png" alt="image-20240529170643257"></p>
<p>盒子和指针表示法</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529171107791.png" alt="image-20240529171107791"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529171141488.png" alt="image-20240529171141488"></p>
<p>八种类型直接放内存盒子里面，因为他们是原始类型</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529171413511.png" alt="image-20240529171413511"></p>
<p>其余类型都是引用类型</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529171353545.png" alt="image-20240529171353545"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240529171655899.png" alt="image-20240529171655899"></p>
<h2 id="Instantiation-of-Arrays"><a href="#Instantiation-of-Arrays" class="headerlink" title="Instantiation of Arrays"></a>Instantiation of Arrays</h2><blockquote>
<p><strong>数据不是八种原始类型之一</strong></p>
</blockquote>
<p>停下来，，往前找作业左了</p>
<h1 id="下面是2021Spring的课程笔记"><a href="#下面是2021Spring的课程笔记" class="headerlink" title="下面是2021Spring的课程笔记"></a>下面是2021Spring的课程笔记</h1><h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><p>24OUT表示以后24的视频非特殊情况，例如21讲的自己不懂，除非特殊情况都不看24的讲课视频</p>
<table>
<thead>
<tr>
<th align="center">VideoName</th>
<th align="center">Done</th>
<th align="center">warning</th>
</tr>
</thead>
<tbody><tr>
<td align="center">sp24 1.intro</td>
<td align="center">Done</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">1.intro</td>
<td align="center">Done</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Discussion</td>
<td align="center">Done</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Lab1</td>
<td align="center">Done</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Project 0.intro</td>
<td align="center">Done</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">sp24 2.Defin</td>
<td align="center">Done</td>
<td align="center">24OUT</td>
</tr>
<tr>
<td align="center">2.Defining</td>
<td align="center">Done</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">2.live Q&amp;A</td>
<td align="center">Done</td>
<td align="center">快速扫过</td>
</tr>
<tr>
<td align="center">Week1Over</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="理清课程资料的使用思路"><a href="#理清课程资料的使用思路" class="headerlink" title="理清课程资料的使用思路"></a>理清课程资料的使用思路</h2><p>懂了，如下面的图。有特地标出来的就是24年的课，没有特地标出来就是21年的课。链接是这个</p>
<p>【2024 双语字幕🎉 | UCB CS 61B: Data Structures, Spring 2024】 <a href="https://www.bilibili.com/video/BV1QP4y1u7jv/?p=5&share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1QP4y1u7jv/?p=5&amp;share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p>
<p>但是呢，他很多21的课没做双语字幕，自动翻译的中文字幕差太多了。所以看21的课还是用这个视频</p>
<p>【【双语字幕】CS 61B 数据结构 | 整合版 | UCB Data Structure Spring 2021 | 转码必看 Java 算法 Leetcode】 <a href="https://www.bilibili.com/video/BV1q3411V7rS/?p=2&share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1q3411V7rS/?p=2&amp;share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p>
<p>但是目录和检查各个作业等等还是用第一个视频的标题把。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601104101857.png" alt="image-20240601104101857"></p>
<h2 id="Project-0-intro"><a href="#Project-0-intro" class="headerlink" title="Project 0.intro"></a>Project 0.intro</h2><p>有人带着看Proj 0的文档帮你在旁边讲解还是好很多，边看文档边听他讲吧。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601105150021.png" alt="image-20240601105150021"></p>
<p>看完了，每一个都尝试五分钟，如果不会就去看别人的讲解。</p>
<h2 id="2-Defining"><a href="#2-Defining" class="headerlink" title="2.Defining"></a>2.Defining</h2><p>非静态变量记忆成实例变量</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601110854061.png" alt="image-20240601110854061"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601111140111.png" alt="image-20240601111140111"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601111448403.png" alt="image-20240601111448403"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601115005446.png" alt="image-20240601115005446"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601115241087.png" alt="image-20240601115241087"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240601213427964.png" alt="image-20240601213427964"></p>
<h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><p>24OUT表示以后24的视频非特殊情况，例如21讲的自己不懂，除非特殊情况都不看24的讲课视频。翻译成中文的视频的标题为我下面的VideoName，也尝试过写成官方网站上英文的样子，但是对学习的效率有较大的影响，所以还是写成中文。</p>
<table>
<thead>
<tr>
<th align="center">VideoName</th>
<th align="center">Done</th>
<th align="center">warning</th>
</tr>
</thead>
<tbody><tr>
<td align="center">sp24 6.测试</td>
<td align="center">24OUT</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">3.测试</td>
<td align="center">Done</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">3.现场问答</td>
<td align="center">扫过</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">sp24 3.列表1</td>
<td align="center">24OUT</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">4.列表1</td>
<td align="center">Done</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">4.现场问答</td>
<td align="center">扫过</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">sp24 4.列表2</td>
<td align="center">24OUT</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">5.列表2</td>
<td align="center">Done</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">5.现场问答</td>
<td align="center">扫过</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">sp24</td>
<td align="center">24OUT</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">6.清单3</td>
<td align="center">ing</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">6.现场问答</td>
<td align="center">扫过</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>还是尽量模拟他们的表格，来一个一个完成任务吧</p>
<table>
<thead>
<tr>
<th align="center"><strong>Reading</strong></th>
<th align="center"><strong>Lecture</strong></th>
<th align="center"><strong>Discussion</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://joshhug.gitbooks.io/hug61b/content/chap3/chap31.html">3.1</a>正在看，  Optional不看</td>
<td align="center">\3. Testing<br/>[<a href="https://www.youtube.com/watch?v=j12X417J85g&list=PL8FaHk7qbOD7RM4xH3tTQgYhNsDt2Gt7o&index=1">video</a>]不看 ‌[<a href="https://docs.google.com/presentation/d/1Aop1woPUquEkAamUj3CitvX4UsPZArBUsjhZnId4C-U/edit?usp=sharing">slides</a>]看了 ‌[<a href="https://sp21.datastructur.es/materials/lectures/lec7/lec7">guide</a>] ‌[<a href="https://youtu.be/51YjFL6nBFo">live Q&amp;A</a>] ‌ ‌</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><a href="https://joshhug.gitbooks.io/hug61b/content/chap2/chap21.html">2.1</a></td>
<td align="center">\4. References, Recursion, and Lists<br/>[<a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD7lprwG_xdIMLrwibZDi-Ll">video</a>] ‌[<a href="https://docs.google.com/presentation/d/1HQqHSA-h1vRHeResuxmDBGNQACkmxpUBHF3m4-oKU_Q/edit?usp=sharing">slides</a>] ‌[<a href="https://sp21.datastructur.es/materials/lectures/lec3/lec3.html">guide</a>] ‌[<a href="https://youtu.be/20ZhW106838">live Q&amp;A</a>] ‌</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><a href="https://joshhug.gitbooks.io/hug61b/content/chap2/chap22.html">2.2</a></td>
<td align="center">\5. SLLists, Nested Classes, Sentinel Nodes<br/>[<a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7">video</a>] ‌[<a href="https://docs.google.com/presentation/d/1q6p0spGPmj8rFrQnWKp_QZJRFHg-IkHE1L9BfZc0f0Q/edit?usp=sharing">slides</a>] ‌[<a href="https://sp21.datastructur.es/materials/lectures/lec4/lec4">guide</a>] ‌[<a href="https://youtu.be/46DJBZC5Yvc">live Q&amp;A</a>] ‌</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>Discussion</strong></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602090858898.png" alt="image-20240602090858898"></p>
<h2 id="3-Testing"><a href="#3-Testing" class="headerlink" title="3_Testing"></a>3_Testing</h2><blockquote>
<p><strong>Important note:</strong> You may be asking “Why are you looping through the entire array? Why don’t you just check if the arrays are equal using <code>==</code>? “. The reason is, when we test for equality of two objects, we cannot simply use the <code>==</code> operator. The <code>==</code> operator compares the literal bits in the memory boxes, e.g. <code>input == expected</code> would test whether or not the addresses of <code>input</code> and <code>expected</code> are the same, not whether the values in the arrays are the same. Instead, we used a loop in <code>testSort</code>, and print out the first mismatch. You could also use the built-in method <code>java.util.Arrays.equals</code> instead of a loop.</p>
</blockquote>
<p>TestSort.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSort</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Sort.sort(input);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!input[i].equals(expected[i])) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Mismatch in position &quot;</span> + i + <span class="string">&quot;, expected: &quot;</span> + expected[i] + <span class="string">&quot;, but got :&quot;</span> + input[i]);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testSort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Intellij IDEA junit 使用之org.junit爆红</p>
<p>参考这篇博客<a href="https://blog.csdn.net/qq_31424825/article/details/84873575">https://blog.csdn.net/qq_31424825/article/details/84873575</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSort</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        org.junit.Assert.assertArrayEquals(expected, input);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testSort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一个伟大的事情，他这个再查看递归里面的堆栈的可视化，，真是一个伟大的插件</p>
<p>每一层的start和smallestIndex都显示出来。这样子递归就清楚多了。</p>
<p>虽然IDEA有调试的图形化插件Visualizer但是Clion好像没有</p>
<p>在windows下有vistual studio，针对<a href="https://so.csdn.net/so/search?q=opencv&spm=1001.2101.3001.7020">opencv</a>有image watch，在ubuntu下用Clion插件Image Watch要收费，遂研究OpenImageDebugger与CLion问题及在Clion中调试方法</p>
<p>搜了一搜，，感觉Clion是真没有，不过无所谓了。及时止损。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602113015253.png" alt="image-20240602113015253"></p>
<p>用</p>
<p><code>import org.junit.Test;</code></p>
<p><code>import static org.junit.Assert.*;</code></p>
<p>来简化代码</p>
<p>事实上，这种方法帮助你省略了，<code>main</code>函数，你不必自己在main函数里面依次调用每一个testXXX测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSort</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSort</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        assertArrayEquals(expected, input);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Test the Sort.findSmallest method.*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testfindSmallest</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">expected</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">actual</span> <span class="operator">=</span> Sort.findSmallest(input, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(expected, actual);</span><br><span class="line">        String[] input2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;pigs&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">expected2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">actual2</span> <span class="operator">=</span> Sort.findSmallest(input2, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(expected2, actual2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Test the Sort.swap method.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSwap</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Sort.swap(input, a, b);</span><br><span class="line"></span><br><span class="line">        assertArrayEquals(expected, input);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-References-Recursion-and-Lists"><a href="#4-References-Recursion-and-Lists" class="headerlink" title="4_References, Recursion, and Lists"></a>4_References, Recursion, and Lists</h2><h3 id="Primitive-Types"><a href="#Primitive-Types" class="headerlink" title="Primitive Types"></a>Primitive Types</h3><p>前半部分看过，就在上面24年的笔记上面</p>
<p>想起来一件事情， 如果自己还觉得无法理解，或者觉得字幕翻译的不够好的话，，可以在看对应章节的24的中文ai配音视频。它的字幕是精心翻译校对过的，同时有中文声音让人也更加专注</p>
<h3 id="Parameter-Passing"><a href="#Parameter-Passing" class="headerlink" title="Parameter Passing"></a>Parameter Passing</h3><p><a href="https://cscircles.cemc.uwaterloo.ca/java_visualize/#mode=display">Java Visualizer (uwaterloo.ca)</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PollQuestions</span> &#123;</span><br><span class="line"><span class="number">2</span>	   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="number">3</span>	      <span class="type">Walrus</span> <span class="variable">walrus</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Walrus</span>(<span class="number">3500</span>, <span class="number">10.5</span>);</span><br><span class="line"><span class="number">4</span>	      <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"><span class="number">5</span>	      </span><br><span class="line"><span class="number">6</span>	      doStuff(walrus, x);</span><br><span class="line"><span class="number">7</span>	      System.out.println(walrus);</span><br><span class="line"><span class="number">8</span>	      System.out.println(x);</span><br><span class="line"><span class="number">9</span>	   &#125;</span><br><span class="line"><span class="number">10</span>	   </span><br><span class="line"><span class="number">11</span>	   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doStuff</span><span class="params">(Walrus W, <span class="type">int</span> x)</span> &#123;</span><br><span class="line"><span class="number">12</span>	      W.weight = W.weight - <span class="number">100</span>;</span><br><span class="line"><span class="number">13</span>	      x = x - <span class="number">5</span>;</span><br><span class="line"><span class="number">14</span>	   &#125;</span><br><span class="line"><span class="number">15</span>	   </span><br><span class="line"><span class="number">16</span>	   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Walrus</span> &#123;</span><br><span class="line"><span class="number">17</span>	      <span class="keyword">public</span> <span class="type">int</span> weight;</span><br><span class="line"><span class="number">18</span>	      <span class="keyword">public</span> <span class="type">double</span> tuskSize;</span><br><span class="line"><span class="number">19</span>	      </span><br><span class="line"><span class="number">20</span>	      <span class="keyword">public</span> <span class="title function_">Walrus</span><span class="params">(<span class="type">int</span> w, <span class="type">double</span> ts)</span> &#123;</span><br><span class="line"><span class="number">21</span>	         weight = w;</span><br><span class="line"><span class="number">22</span>	         tuskSize = ts;</span><br><span class="line"><span class="number">23</span>	      &#125;</span><br><span class="line"><span class="number">24</span>	</span><br><span class="line"><span class="number">25</span>	      <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">26</span>	         <span class="keyword">return</span> String.format(<span class="string">&quot;weight: %d, tusk size: %.2f&quot;</span>, weight, tuskSize);</span><br><span class="line"><span class="number">27</span>	      &#125;</span><br><span class="line"><span class="number">28</span>	   &#125;</span><br><span class="line"><span class="number">29</span>	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Instantiation-of-Arrays-1"><a href="#Instantiation-of-Arrays-1" class="headerlink" title="Instantiation of Arrays"></a>Instantiation of Arrays</h3><p>数组也属于非八种原始变量，因此数组名里面放着第一个数组元素的地址。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602124146826.png" alt="image-20240602124146826"></p>
<h3 id="IniList-and-Linked-Data-Structures-See-webcast-or-code-directory"><a href="#IniList-and-Linked-Data-Structures-See-webcast-or-code-directory" class="headerlink" title="IniList and Linked Data Structures(See webcast or code directory)"></a>IniList and Linked Data Structures(See webcast or code directory)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IntList</span><span class="params">(<span class="type">int</span> f, IntList r)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.first = f;</span><br><span class="line">        <span class="built_in">this</span>.rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//这好像相当于链表的头插法</span></span><br><span class="line">        <span class="type">IntList</span> <span class="variable">L</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntList</span>(<span class="number">15</span>, <span class="literal">null</span>);</span><br><span class="line">        L = <span class="keyword">new</span> <span class="title class_">IntList</span>(<span class="number">10</span>, L);</span><br><span class="line">        L = <span class="keyword">new</span> <span class="title class_">IntList</span>(<span class="number">5</span>, L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602130830923.png" alt="image-20240602130830923"></p>
<p>t这课堂作业要不要做，是课上直接在自己的电脑上面做呢，，还是git clone他的课程代码呢？？</p>
<p>课上做得了。自己又不是不会，之前写过好多类似的代码，这个不用太严肃 的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title function_">incrList</span><span class="params">(IntList L, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//用dummyNode处理尾插法可以避免分类讨论</span></span><br><span class="line">        <span class="comment">//Q用尾插法，事实上Q就是dummyNode.rest,L从前往后遍历</span></span><br><span class="line">        <span class="type">IntList</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntList</span>(-<span class="number">1</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">IntList</span> <span class="variable">tailQ</span> <span class="operator">=</span> dummyNode;</span><br><span class="line">        <span class="type">IntList</span> <span class="variable">cur</span> <span class="operator">=</span> L;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">IntList</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntList</span>(cur.first + x, <span class="literal">null</span>);</span><br><span class="line">            tailQ.rest = newNode;</span><br><span class="line">            tailQ = newNode;</span><br><span class="line">            cur = cur.rest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.rest;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602150159126.png" alt="image-20240602150159126"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title function_">dincrList</span><span class="params">(IntList L, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">IntList</span> <span class="variable">cur</span> <span class="operator">=</span> L;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            cur.first += x;</span><br><span class="line">            cur = cur.rest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  L;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602150705759.png" alt="image-20240602150705759"></p>
<h2 id="5-SLLists-Nested-Classes-Sentinel-Notes"><a href="#5-SLLists-Nested-Classes-Sentinel-Notes" class="headerlink" title="5_SLLists, Nested Classes, Sentinel Notes"></a>5_SLLists, Nested Classes, Sentinel Notes</h2><p>nest，嵌套的意思</p>
<h3 id="SLList-A-Singly-Linked-List-单链表"><a href="#SLList-A-Singly-Linked-List-单链表" class="headerlink" title="SLList: A Singly-Linked List.单链表"></a><em>SLList</em>: A Singly-Linked List.单链表</h3><p><code>IntNode.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntNode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> item;</span><br><span class="line">    <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IntNode</span><span class="params">(<span class="type">int</span> i, IntNode n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = i;</span><br><span class="line">        <span class="built_in">this</span>.next = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>SLList.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InsufficientResourcesException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SLList</span> &#123;</span><br><span class="line">    <span class="comment">//理解成L链表只存放着第一个结点的地址，也就是L链表里面的元素就是一个指针变量，放着第一个结点的地址</span></span><br><span class="line">    <span class="comment">// 这就是C++49那个花生老师的写法，一模一样，，运气太好了。自己越是学习，感觉运气就越好</span></span><br><span class="line">    <span class="keyword">public</span> IntNode first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SLList</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        first = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Adds x to the front of the list*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line"><span class="comment">//        IntNode newNode = new IntNode(x, null);</span></span><br><span class="line"><span class="comment">//        newNode.next = first;</span></span><br><span class="line"><span class="comment">//        first = newNode;</span></span><br><span class="line">        <span class="comment">//上面三行在Java里面可以写成一行代码，真的难绷</span></span><br><span class="line">        first = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFirst</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.first.item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SLList</span> <span class="variable">L</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SLList</span>(<span class="number">15</span>);</span><br><span class="line">        L.addFirst(<span class="number">10</span>);</span><br><span class="line">        L.addFirst(<span class="number">5</span>);</span><br><span class="line">        System.out.println(L.getFirst());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602154320505.png" alt="image-20240602154320505"></p>
<h3 id="Naked-Linked-Lists-IntList-VS-SLLists"><a href="#Naked-Linked-Lists-IntList-VS-SLLists" class="headerlink" title="Naked Linked Lists (IntList) VS SLLists"></a>Naked Linked Lists (IntList) VS SLLists</h3><p>肯定是下面的 好，，大家都约定俗成了、</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602154812068.png" alt="image-20240602154812068"></p>
<p>吓死我了，，还以为自己写错 了。。原来只是同一事物的另一种可视化 </p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602161250228.png" alt="image-20240602161250228"></p>
<p>原来私有静态结构是这样用的 。private static</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602162114028.png" alt="image-20240602162114028"></p>
<p>为了递归的求他的大小，不得不采用这种新的编程。创建private static类型，它使用神的语言（就是说采用裸露的数据结构，naked Linked Lists)</p>
<p>贴上我的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InsufficientResourcesException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SLList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntNode</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">IntNode</span><span class="params">(<span class="type">int</span> i, IntNode n)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = i;</span><br><span class="line">            <span class="built_in">this</span>.next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//理解成L链表只存放着第一个结点的地址，也就是L链表里面的元素就是一个指针变量，放着第一个结点的地址</span></span><br><span class="line">    <span class="comment">// 这就是C++49那个花生老师的写法，一模一样，，运气太好了。自己越是学习，感觉运气就越好</span></span><br><span class="line">    <span class="keyword">private</span> IntNode first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SLList</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        first = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Adds x to the front of the list*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line"><span class="comment">//        IntNode newNode = new IntNode(x, null);</span></span><br><span class="line"><span class="comment">//        newNode.next = first;</span></span><br><span class="line"><span class="comment">//        first = newNode;</span></span><br><span class="line">        <span class="comment">//上面三行在Java里面可以写成一行代码，真的难绷</span></span><br><span class="line">        first = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.first == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//空表</span></span><br><span class="line">            <span class="built_in">this</span>.addFirst(x);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">IntNode</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="built_in">this</span>.first;</span><br><span class="line">            <span class="keyword">while</span> (tail.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">            tail.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//tail = tail.next;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns the size of the list that starts at IntNode p.*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">(IntNode p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + size(p.next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size(<span class="built_in">this</span>.first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sizeNoRecursion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">IntNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="built_in">this</span>.first;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SLList</span> <span class="variable">L</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SLList</span>(<span class="number">15</span>);</span><br><span class="line">        L.addFirst(<span class="number">10</span>);</span><br><span class="line">        L.addFirst(<span class="number">5</span>);</span><br><span class="line">        L.addLast(<span class="number">20</span>);</span><br><span class="line">        System.out.println(L.getFirst());</span><br><span class="line">        System.out.println(L.size());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>加一个size变量，求size的时候，时间复杂度最低。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602163651355.png" alt="image-20240602163651355"></p>
<p>这个教授说SSList的优势是能够实例化一个空列表，是吗？？</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602163846623.png" alt="image-20240602163846623"></p>
<p>他最终还是将了，，他又要写创建空表，，又要写尾插法还不带判断空表的情况，果然他还是讲了这部分的内容。</p>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.first == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//空表</span></span><br><span class="line">            <span class="comment">//不能再调用addFirst()函数，因为size在这儿函数里面也会++，，最终会导致size＋2</span></span><br><span class="line"><span class="comment">//            this.addFirst(x);</span></span><br><span class="line">            <span class="built_in">this</span>.first =  <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">IntNode</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="built_in">this</span>.first;</span><br><span class="line">            <span class="keyword">while</span> (tail.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">            tail.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//tail = tail.next;</span></span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>然后开始讲dummyNode，他这里了叫sentinel Nodes，哨兵结点</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/PKUFlyingPig/image-20240602165524953.png" alt="image-20240602165524953"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InsufficientResourcesException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SLList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntNode</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">IntNode</span><span class="params">(<span class="type">int</span> i, IntNode n)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = i;</span><br><span class="line">            <span class="built_in">this</span>.next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//理解成L链表只存放着第一个结点的地址，也就是L链表里面的元素就是一个指针变量，放着第一个结点的地址</span></span><br><span class="line">    <span class="comment">// 这就是C++49那个花生老师的写法，一模一样，，运气太好了。自己越是学习，感觉运气就越好</span></span><br><span class="line"><span class="comment">//    private IntNode first;</span></span><br><span class="line">    <span class="keyword">private</span> IntNode sentinel;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Create an empty SLList</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SLList</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        sentinel = <span class="keyword">new</span> <span class="title class_">IntNode</span>(<span class="number">63</span>, <span class="literal">null</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SLList</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> <span class="title class_">IntNode</span>(<span class="number">63</span>, <span class="literal">null</span>);</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Adds x to the front of the list*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line"><span class="comment">//        IntNode newNode = new IntNode(x, null);</span></span><br><span class="line"><span class="comment">//        newNode.next = first;</span></span><br><span class="line"><span class="comment">//        first = newNode;</span></span><br><span class="line">        <span class="comment">//上面三行在Java里面可以写成一行代码，真的难绷</span></span><br><span class="line">        sentinel.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, sentinel.next);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.sentinel.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">IntNode</span> <span class="variable">p</span> <span class="operator">=</span> sentinel;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns the size of the list that starts at IntNode p.*/</span></span><br><span class="line"><span class="comment">//    private static int size(IntNode p) &#123;</span></span><br><span class="line"><span class="comment">//        if (p.next == null) return 1;</span></span><br><span class="line"><span class="comment">//        return 1 + size(p.next);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public int sizeNoRecursion() &#123;</span></span><br><span class="line"><span class="comment">//        int cnt = 0;</span></span><br><span class="line"><span class="comment">//        IntNode p = this.first;</span></span><br><span class="line"><span class="comment">//        while (p != null) &#123;</span></span><br><span class="line"><span class="comment">//            cnt++;</span></span><br><span class="line"><span class="comment">//            p = p.next;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return cnt;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SLList</span> <span class="variable">L</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SLList</span>();</span><br><span class="line"><span class="comment">//        L.addFirst(10);</span></span><br><span class="line"><span class="comment">//        L.addFirst(5);</span></span><br><span class="line">        L.addLast(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//        System.out.println(L.getFirst());</span></span><br><span class="line">        System.out.println(L.size());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>不变量的好处。例如sentinel就是一种不变量，保证永远不为空</p>
]]></content>
      <tags>
        <tag>CS61B</tag>
        <tag>CSDIY</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT6.006 1. Algorithmic Thinking, Peak Finding 算法思维，峰值寻找</title>
    <url>/2024/05/28/MIT6-006-1-Algorithmic-Thinking-Peak-Finding-%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%EF%BC%8C%E5%B3%B0%E5%80%BC%E5%AF%BB%E6%89%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://www.cnblogs.com/alvinai/p/12620772.html">https://www.cnblogs.com/alvinai/p/12620772.html</a></p>
<p><a href="https://www.cnblogs.com/alvinai/category/1687839.html?page=2">https://www.cnblogs.com/alvinai/category/1687839.html?page=2</a></p>
<p><a href="https://www.bilibili.com/video/BV1b7411e7ZP/?spm_id_from=333.337.search-card.all.click&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1b7411e7ZP/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
<p><a href="https://www.bilibili.com/video/BV1fu41127MN/?p=2&spm_id_from=pageDriver&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1fu41127MN/?p=2&amp;spm_id_from=pageDriver&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
]]></content>
      <tags>
        <tag>MIT6.006</tag>
        <tag>公开课学习</tag>
      </tags>
  </entry>
  <entry>
    <title>qingkongDS</title>
    <url>/2024/05/27/%E9%9D%92%E7%A9%BA%E3%81%AE%E9%9C%9E%E5%85%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="图结构篇"><a href="#图结构篇" class="headerlink" title="图结构篇"></a>图结构篇</h1><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>我们可以来总结一下性质：</p>
<ul>
<li>无向图的邻接矩阵一定是一个对称矩阵，因此，有时为了节省时间，我们可以只存放上半部分。</li>
<li>对于无向图，邻接矩阵的第<code>i</code>行非0（或非∞）的个数就是第<code>i</code>个顶点的度。</li>
<li>对于有向图，邻接矩阵的第<code>i</code>行非0（或非∞）的个数就是第<code>i</code>个顶点的出度（纵向就是入度了）</li>
</ul>
<p>接着我们来看看如何通过代码实现，首先我们需要对结构体进行一下定义，这里我们以有向图为例：</p>
<p>版权声明：本文为柏码知识库版权所有，禁止一切未经授权的转载、发布、出售等行为，违者将被追究法律责任。</p>
<p>原文链接：<a href="https://www.itbaima.cn/document/lqv77apvx82nkkio">https://www.itbaima.cn/document/lqv77apvx82nkkio</a></p>
<p>转载自这位大佬，仅用于个人的学习和记笔记，无任何其他商业用途。如果造成了困扰和不便之处，请微信联系我。微信号BradTorres</p>
<p>我一定删除所有博文。</p>
]]></content>
      <tags>
        <tag>DataStructure</tag>
      </tags>
  </entry>
  <entry>
    <title>qingkongC</title>
    <url>/2024/05/26/%E9%9D%92%E7%A9%BA%E3%81%AE%E9%9C%9E%E5%85%89C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="实战：斐波那契数列解法其二"><a href="#实战：斐波那契数列解法其二" class="headerlink" title="实战：斐波那契数列解法其二"></a>实战：斐波那契数列解法其二</h3><p>学习了数组，我们来看看如何利用数组来计算斐波那契数列，这里采用动态规划的思想。</p>
<blockquote>
<p>动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有<a href="https://baike.baidu.com/item/%E6%9C%80%E4%BC%98%E5%80%BC">最优值</a>的解。动态规划算法与<a href="https://baike.baidu.com/item/%E5%88%86%E6%B2%BB%E6%B3%95">分治法</a>类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从<a href="https://baike.baidu.com/item/%E8%BF%99%E4%BA%9B%E5%AD%90">这些子</a>问题的解得到原问题的解。</p>
</blockquote>
<p>我们可以在一开始创建一个数组，然后从最开始的条件不断向后推导，从斐波那契数列的规律我们可以得知：</p>
<ul>
<li><code>fib[i] = fib[i - 1] + fib[i - 2]</code>（这里<code>fib</code>代表斐波那契数列）</li>
</ul>
<p>版权声明：本文为柏码知识库版权所有，禁止一切未经授权的转载、发布、出售等行为，违者将被追究法律责任。</p>
<p>原文链接：<a href="https://www.itbaima.cn/document/lqv77apvx82nkkio">https://www.itbaima.cn/document/lqv77apvx82nkkio</a></p>
<p>转载自这位大佬，仅用于个人的学习和记笔记，无任何其他商业用途。如果造成了困扰和不便之处，请微信联系我。微信号BradTorres</p>
<p>我一定删除所有博文。</p>
<p>得到这样的一个关系（递推方程）就好办了，我们要求解数列第<code>i</code>个位置上的数，只需要知道<code>i - 1</code>和<code>i - 2</code>的值即可，这样，一个大问题，就分成了两个小问题，比如现在我们要求解斐波那契数列的第5个元素：</p>
<ul>
<li><code>fib[4] = fib[3] + fib[2]</code>现在我们只需要知道<code>fib[3]</code>和<code>fib[2]</code>即可，那么我们接着来看：</li>
<li><code>fib[3] = fib[2] + fib[1]</code>以及<code>fib[2] = fib[1] + fib[0]</code></li>
<li>由于<code>fib[0]</code>和<code>fib[1]</code>我们已经明确知道是<code>1</code>了，那么现在问题其实已经有结果了，把这些小问题的结果组合起来不就能得到原来大问题的结果了吗？</li>
</ul>
<p>现在请你设计一个C语言程序，利用动态规划的思想解决斐波那契数列问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> target = <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> dp[target];</span><br><span class="line">    dp[<span class="number">1</span>] = dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; target; i++)</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, dp[target - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>————————————————</p>
<h3 id="实战：打家劫舍"><a href="#实战：打家劫舍" class="headerlink" title="实战：打家劫舍"></a>实战：打家劫舍</h3><p>我们继续通过一道简单的算法题来强化动态规划思想。</p>
<p><strong>来源：力扣（LeetCode）No.198 打家劫舍</strong>：<a href="https://leetcode.cn/problems/house-robber/">https://leetcode.cn/problems/house-robber/</a></p>
<blockquote>
<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p>
</blockquote>
<p><strong>示例 1：</strong></p>
<blockquote>
<p>输入：[1,2,3,1]<br> 输出：4<br> 解释：偷窃 1 号房屋 (金额 &#x3D; 1) ，然后偷窃 3 号房屋 (金额 &#x3D; 3)。<br> 偷窃到的最高金额 &#x3D; 1 + 3 &#x3D; 4 。</p>
</blockquote>
<p><strong>示例 2：</strong></p>
<blockquote>
<p>输入：[2,7,9,3,1]<br> 输出：12<br> 解释：偷窃 1 号房屋 (金额 &#x3D; 2), 偷窃 3 号房屋 (金额 &#x3D; 9)，接着偷窃 5 号房屋 (金额 &#x3D; 1)。<br> 偷窃到的最高金额 &#x3D; 2 + 9 + 1 	&#x3D; 12 。</p>
</blockquote>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/qingkongdexiaguang/WvZltqPwyUEhkJY.jpg" alt="image-20220613124415156"></p>
<p>这道题我们也可以很轻松地按照上面的动态规划思路来处理，首先我们可以将问题分为子问题，比如现在有<code>[2,7,9,3,1]</code>五个房屋，这个问题看起来比较复杂，我们不妨先将大问题先简化成小问题，我们来看看只有N个房屋的情况：</p>
<ul>
<li><p>假设现在只有<code>[2]</code>这一个房屋，那么很明显，我可以直接去偷一号房，得到2块钱，所以当有一个房子时最大能偷到2块钱。</p>
</li>
<li><p>假设现在有<code>[2, 7]</code>这两个房屋，那么很明显，我可以直接去偷二号房，得到7块钱，所以当有两个房子时最大能偷到7块钱。</p>
</li>
<li><p>假设现在只有</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[2, 7, 9]</span></span><br></pre></td></tr></table></figure>

<p>这三个房屋，我们就要来看看了，是先偷一号房再偷三号房好，还是只偷二号房好，根据前面的结论，如果我们偷了一号房，那么就可以继续偷三号房，并且得到的钱就是从一号房过来的钱+三号房的钱，也就是2+9块钱，但是如果只偷二号房的话，那么就只能得到7块钱，所以，三号房能够偷到的最大金额有以下关系（dp是我们求出的第i个房屋的最大偷钱数量，value表示房屋价值，max表示取括号中取最大的一个）：</p>
<ul>
<li><code>dp[i] = max(dp[i - 1], dp[i - 2] + value[i])</code>  -&gt; <strong>递推方程已得到</strong></li>
</ul>
</li>
<li><p>这样就不难求出：<code>dp[2] = max(dp[1], dp[0] + value[i])</code> &#x3D; <code>dp[2] = max(7, 2 + 9)</code> &#x3D; <code>dp[2] = 11</code>，所以有三个房屋时最大的金额是11块钱。</p>
</li>
<li><p>所以，实际上我们只需要关心前面计算出来的盗窃最大值即可，而不需要关心前面到底是怎么在偷。</p>
</li>
<li><p>我们以同样的方式来计算四个房屋</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="string">[2, 7, 9, 3]</span></span><br></pre></td></tr></table></figure>

<p>的情况：</p>
<ul>
<li><code>dp[3] = max(dp[2], dp[1] + value[3])</code> &#x3D; <code>dp[3] = max(11, 7 + 3)</code> &#x3D; <code>dp[3] = 11</code></li>
</ul>
</li>
<li><p>所以，当有四个房屋时，我们依然采用先偷一后偷三的方案，不去偷四号，得到最大价值11块钱。</p>
</li>
</ul>
<p>好了，现在思路已经出来了，我们直接上算法吧，现在请你实现下面的C语言程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>&#125;, size = <span class="number">5</span>, result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请补充程序</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>力扣提交，建议各位小伙伴学习了函数和指针之后再回来看看，这里暂时可以跳过。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/qingkongdexiaguang/cm8AhzBNfJ4r3sX.png" alt="image-20230814162152413"></p>
<p><strong>我写的</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//nums相当于给出的arr</span></span><br><span class="line">    <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (size == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="type">int</span> dp[size];</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; size; i++)</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br><span class="line">    result = dp[size - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>他写的</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(numsSize == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(numsSize == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(numsSize == <span class="number">2</span>) <span class="keyword">return</span> max(nums[<span class="number">1</span>], nums[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> dp[numsSize];</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = max(nums[<span class="number">1</span>], nums[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; numsSize; ++i) &#123;</span><br><span class="line">        dp[i] = max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[numsSize - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>————————————————</p>
<h3 id="实战：回文串判断"><a href="#实战：回文串判断" class="headerlink" title="实战：回文串判断"></a>实战：回文串判断</h3><p>“回文串”是一个正读和反读都一样的字符串，请你实现一个C语言程序，判断用户输入的字符串（仅出现英文字符）是否为“回文”串。</p>
<blockquote>
<p>ABCBA 就是一个回文串，因为正读反读都是一样的</p>
<p>ABCA 就不是一个回文串，因为反着读不一样</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">gets</span>(str);</span><br><span class="line">    <span class="comment">//双指针，前后各一个</span></span><br><span class="line">    <span class="type">int</span> size = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != str[j]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="实战：字符串匹配KMP算法"><a href="#实战：字符串匹配KMP算法" class="headerlink" title="实战：字符串匹配KMP算法"></a>实战：字符串匹配KMP算法</h3><p>现在有两个字符串：</p>
<blockquote>
<p>str1 &#x3D; “abcdabbc”</p>
<p>str2 &#x3D; “cda”</p>
</blockquote>
<p>现在请你设计一个C语言程序，判断第一个字符串中是否包含了第二个字符串，比如上面的例子中，很明显第一个字符串包含了第二个字符串。</p>
<ul>
<li><p>暴力解法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">64</span>] = <span class="string">&quot;abcdabbc&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[<span class="number">64</span>] = <span class="string">&quot;cda&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> len1 = <span class="built_in">strlen</span>(str1);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> len2 = <span class="built_in">strlen</span>(str2);</span><br><span class="line">    <span class="type">int</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= len2) &#123;</span><br><span class="line">            index = i - j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str1[i] != str2[j]) &#123;</span><br><span class="line">            j = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//index是主串中子串的第一个字母出现的位置</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>KMP算法</p>
</li>
</ul>
<p>往后复习到kmp结合代码随想录和考研408来看</p>
<p>？？？？？？？、</p>
<h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><p>我们的函数除了在其他地方被调用之外，也可以自己调用自己（好家伙，套娃是吧），这种玩法我们称为递归。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    test();   <span class="comment">//函数自己在调用自己，这样的话下一轮又会进入到这个函数中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以尝试运行一下上面的程序，会发现程序直接无限打印<code>Hello World!</code>这个字符串，这是因为函数自己在调用自己，不断地重复进入到这个函数，理论情况下，它将永远都不会结束，而是无限地执行这个函数的内容。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/qingkongdexiaguang/feq6xUPDjSLAKYF.png" alt="image-20220623233305190"></p>
<p>但是到最后我们的程序还是终止了，这是因为函数调用有最大的深度限制，因为计算机不可能放任函数无限地进行下去。</p>
<blockquote>
<p>**（选学）**我们来大致了解一下函数的调用过程，实际上在程序运行时会有一个叫做**函数调用栈**的东西，它用于控制函数的调用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   <span class="comment">//我们以下面的调用关系为例</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;giao&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    test2();   <span class="comment">//main -&gt; test -&gt; test2</span></span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;giao&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    test();</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;giao&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实我们可以很轻易地看出整个调用关系，首先是从main函数进入，然后调用test函数，在test函数中又调用了test2函数，此时我们就需要等待test2函数执行完毕，test才能继续，而main则需要等待test执行完毕才能继续。而实际上这个过程是由函数调用栈在控制的：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/qingkongdexiaguang/lAfGyoDWBstz6bm.png" alt="image-20220623235007335"></p>
<p>而当test2函数执行完毕后，每个栈帧又依次从栈中出去：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/qingkongdexiaguang/IWYsq8m2htNeEaP.png" alt="image-20220623235649397"></p>
<p>当所有的栈全部出去之后，程序结束。</p>
<p>所以这也就不难解释为什么无限递归会导致程序出现错误，因为栈的空间有限，而函数又一直在进行自我调用，所以会导致不断地有新的栈帧进入，最后塞满整个栈的空间，就爆炸了，这种问题我们称为栈溢出（Stack Overflow）</p>
</blockquote>
<p>当然，如果我们好好地按照规范使用递归操作，是非常方便的，比如我们现在需要求某个数的阶乘：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, test(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;   <span class="comment">//因为不能无限制递归下去，所以我们这里添加一个结束条件，在n = 1时返回</span></span><br><span class="line">    <span class="keyword">return</span> test(n - <span class="number">1</span>) * n;  <span class="comment">//每次都让n乘以其下一级的计算结果，下一级就是n-1了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过给递归调用适当地添加结束条件，这样就不会无限循环了，并且我们的程序看起来无比简洁，那么它是如何执行的呢：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/qingkongdexiaguang/SsJWqGKyQko47Mm.png" alt="image-20220624002051266"></p>
<p>它看起来就像是一个先走到底部，然后拿到问题的钥匙后逐步返回的一个过程，并在返回的途中不断进行计算最后得到结果（妙啊）</p>
<p>所以，合理地使用递归反而是一件很有意思的事情。</p>
<h3 id="实战：斐波那契数列解法其三"><a href="#实战：斐波那契数列解法其三" class="headerlink" title="实战：斐波那契数列解法其三"></a>实战：斐波那契数列解法其三</h3><p>前面我们介绍了函数的递归调用，我们来看一个具体的实例吧，我们还是以解斐波那契数列为例。</p>
<p>既然每个数都是前两个数之和，那么我们是否也可以通过递归的形式不断划分进行计算呢？我们依然可以借鉴之前动态规划的思想，通过划分子问题，分而治之来完成计算。</p>
<h3 id="实战：汉诺塔"><a href="#实战：汉诺塔" class="headerlink" title="实战：汉诺塔"></a>实战：汉诺塔</h3><p>什么是汉诺塔？</p>
<blockquote>
<p><strong>汉诺塔</strong>（Tower of Hanoi），又称<strong>河内塔</strong>，是一个源于<a href="https://baike.baidu.com/item/%E5%8D%B0%E5%BA%A6/121904">印度</a>古老传说的<a href="https://baike.baidu.com/item/%E7%9B%8A%E6%99%BA%E7%8E%A9%E5%85%B7/223159">益智玩具</a>。<a href="https://baike.baidu.com/item/%E5%A4%A7%E6%A2%B5%E5%A4%A9/711550">大梵天</a>创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令<a href="https://baike.baidu.com/item/%E5%A9%86%E7%BD%97%E9%97%A8/1796550">婆罗门</a>把圆盘从下面开始</p>
<p><strong>按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</strong></p>
</blockquote>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/code/qingkongdexiaguang/Z7iN526FOQLS3Kz.png" alt="image-20220624002507501"></p>
<p>这三根柱子我们就依次命名为A、B、C，现在请你设计一个C语言程序，计算N阶（n片圆盘）汉诺塔移动操作的每一步。</p>
<p>这个问题看似很难，实际上我们也可以对每一步进行推理：</p>
<blockquote>
<p>当汉诺塔只有1阶的情况下：直接把A上的圆盘移动到C，搞定。</p>
</blockquote>
<blockquote>
<p>当汉诺塔只有2阶的情况下：我们的最终目标还是需要将A柱最下面的圆盘丢到C，不过现在多了圆盘，我们得先把这个圆盘给处理了，所以我们得把这上面的1个圆盘丢到B上去，这样才能把A最下面的圆盘丢给C。然后再把B上面的1个圆盘丢到C上去</p>
</blockquote>
<blockquote>
<p>当汉诺塔只有3阶的情况下：我们的最终目标还是需要将A柱最下面的圆盘丢到C，不过现在多了圆盘，我们得先把这个圆盘给处理了，所以我们得把这上面的2个圆盘丢到B上去，这样才能把A最下面的圆盘丢给C。然后再把B上面的2个圆盘丢到C上</p>
</blockquote>
<p>实际上我们发现，把A移动到C是一定要进行的，而在进行之前需要先把压在上面全部的圆盘全部放到B去。而移动之后也要把B上的圆盘全部移动到C上去。其实所有的情况下最终都会有一个n&#x3D;1的情况，将A上的最后一个圆盘移动到C，只是多了一个前面的步骤和后面的步骤。</p>
<p>不过难点就是，怎么把A上的n-1个圆盘移动到B去呢？其实这时我们可以依靠C作为中间商，来帮助我们移动（比如n &#x3D; 3，那么先把最上面的移动到C，然后把第二大的移动到B，再从C上把最小的移动到B上，这样就借助了C完成了两个圆盘的转移），而最后又怎么把B上的圆盘全部移到C去呢，这时就可以依靠A作为中间商，方法同理；实际上大问题最后都会变成n &#x3D; 2时这样的小问题，只不过是要移动目标不同罢了。</p>
<p>只要想通了怎么去借助中间商进行移动，就很好写出程序了。</p>
<p>递归函数如下设计：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a存放圆盘的初始柱子，b作为中间柱子存放使用，c作为目标柱子，n表示要从a移动到c的圆盘数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们来实现一下吧。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">move</span><span class="params">(<span class="type">char</span> start, <span class="type">char</span> end, <span class="type">int</span> n)</span>&#123;   <span class="comment">//用于打印移动操作到控制台，start是起始柱子，end是结束柱子，n是哪一个圆盘</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d个圆盘：%c --&gt; %c\n&quot;</span>, n, start, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c, <span class="type">int</span> n)</span>&#123;  <span class="comment">//刚进来的时候，B作为中间柱子，C作为目标柱子，要移动A上的n个圆盘到C去</span></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">        move(a, c, n);   <span class="comment">//无论a,b,c如何变换，通过递归，最后都会变成一个n = 1的问题，直接移动就完事了</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        hanoi(a, c ,b, n - <span class="number">1</span>);  <span class="comment">//首要目标是先把上面n-1个圆盘全部放到B去，这里就变换一下，让B作为目标柱子，C作为中间</span></span><br><span class="line">        move(a, c, n);   <span class="comment">//现在A上只剩下一个最大的圆盘了，接着把A最下方的一个圆盘移到C去</span></span><br><span class="line">        hanoi(b, a, c, n - <span class="number">1</span>);   <span class="comment">//最后需要把B上的全部搬到C上去，这里就可以以C为目标柱子，A为中间柱子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化一波：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    hanoi(a, c ,b, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d个圆盘：%c --&gt; %c\n&quot;</span>, n, a, c);</span><br><span class="line">    hanoi(b, a, c, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看似如此复杂的问题，其实只需要4行就可以解决了。</p>
<h3 id="实战：快速排序算法（选学）"><a href="#实战：快速排序算法（选学）" class="headerlink" title="实战：快速排序算法（选学）"></a>实战：快速排序算法（选学）</h3><p>有一个数组：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>现在请你设计一个C语言程序，对数组按照从小到大的顺序进行排序。这里我们使用冒泡排序的进阶版本——<strong>快速排序</strong>来完成，它的核心思想是分而治之，每一轮排序都会选出一个基准，一轮排序完成后，所以比基准小的数一定在左边，比基准大的数一定在右边，在分别通过同样的方法对左右两边的数组进行排序，不断划分，最后完成整个数组的排序。它的效率相比冒泡排序的双重for循环有所提升。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;  <span class="comment">//arr是数组，left是起始下标，right是结束下标</span></span><br><span class="line">    <span class="comment">//请实现这一部分</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    quickSort(arr, <span class="number">0</span>, <span class="number">9</span>);  <span class="comment">//10个数字下标就是0-9</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过虽然这种排序算法很快，但是极端情况下（比如遇到了刚好倒序的数组）还是会退化成冒泡排序的。</p>
<p>————————————————</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录回溯预习</title>
    <url>/2024/05/26/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E5%9B%9E%E6%BA%AF%E9%A2%84%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="回溯算法理论基础"><a href="#回溯算法理论基础" class="headerlink" title="回溯算法理论基础"></a>回溯算法理论基础</h1><p>代码模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; n) <span class="built_in">output</span>(x);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">f</span>(n, t); i &lt;= <span class="built_in">g</span>(n, t); i++) &#123;</span><br><span class="line">            x[t] = <span class="built_in">h</span>(i);<span class="comment">//当前解</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">constraint</span>(t) &amp;&amp; <span class="built_in">bound</span>(t)) <span class="built_in">backtrack</span>(t + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>回溯法解决的问题都可以抽象为树形结构</strong>，是的，我指的是所有回溯法的问题都可以抽象为树形结构！</p>
<p>因为回溯法解决的都是在集合中递归查找子集，<strong>集合的大小就构成了树的宽度，递归的深度就构成了树的深度</strong>。</p>
<p>回溯法一般是在集合中递归搜索，集合的大小构成了树的宽度，递归的深度构成的树的深度。</p>
<p>大家可以从图中看出<strong>for循环可以理解是横向遍历，backtracking（递归）就是纵向遍历</strong>，这样就把这棵树全遍历完了，一般来说，搜索叶子节点就是找的其中一个结果了。</p>
<p>卡哥模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(参数)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        <span class="built_in">backtracking</span>(路径，选择列表); <span class="comment">// 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="组合问题"><a href="#组合问题" class="headerlink" title="组合问题"></a>组合问题</h1><p>每一层递归就是相当于一个for循环。</p>
<p>嵌套多少个for循环，就相当于递归多少次</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯</title>
    <url>/2024/05/26/%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://www.bilibili.com/video/BV1HY411R7Tc/?spm_id_from=333.337.search-card.all.click&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1HY411R7Tc/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
<p><a href="https://www.bilibili.com/video/BV1Ls411W7PB?p=65&spm_id_from=pageDriver&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1Ls411W7PB?p=65&amp;spm_id_from=pageDriver&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
<p><a href="https://www.bilibili.com/video/BV18X4y1k74c?p=48&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV18X4y1k74c?p=48&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
<p><a href="https://www.bilibili.com/video/BV1iG411L73B/?spm_id_from=333.337.search-card.all.click&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1iG411L73B/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
<p>四课全开，不信还不会</p>
<p>以<a href="https://www.bilibili.com/video/BV1HY411R7Tc/?spm_id_from=333.337.search-card.all.click&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1HY411R7Tc/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
<p>为蓝本，记笔记</p>
<h1 id="回溯法-1"><a href="#回溯法-1" class="headerlink" title="回溯法(1)"></a>回溯法(1)</h1><p>幽默，我也不知道这图片上传到哪里l了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/image-20240526211253362.png" alt="image-20240526211253362"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/image-20240526211951135.png" alt="image-20240526211951135"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; n) <span class="built_in">output</span>(x);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">f</span>(n, t); i &lt;= <span class="built_in">g</span>(n, t); i++) &#123;</span><br><span class="line">            x[t] = <span class="built_in">h</span>(i);<span class="comment">//当前解</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">constraint</span>(t) &amp;&amp; <span class="built_in">bound</span>(t)) <span class="built_in">backtrack</span>(t + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>N皇后问题代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">Queen::Place</span><span class="params">(<span class="type">int</span> k)</span><span class="comment">//检查前k行是否合法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; k; j++)<span class="comment">//逐行检查</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">abs</span>(k - j) == <span class="built_in">abs</span>(x[j] - x[k])) || (x[j] == x[k]))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Queen::Backtrack</span><span class="params">(<span class="type">int</span> t)</span><span class="comment">//对第t行放置皇后</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; n) sum++;<span class="comment">//层数大于n时候，统计解的个数</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            x[t] = i;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Place</span>(t)) <span class="built_in">Backtrack</span>(t + <span class="number">1</span>);<span class="comment">//如果可以放置</span></span><br><span class="line">            <span class="comment">//继续找下一行的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<h1 id="回溯法-2"><a href="#回溯法-2" class="headerlink" title="回溯法(2)"></a>回溯法(2)</h1>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营第十八天-513-112-106</title>
    <url>/2024/05/26/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%85%AB%E5%A4%A9-513-112-106/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513. 找树左下角的值"></a><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513. 找树左下角的值</a></h1><p>第一眼感觉用层序可以很快的找到最下一面层，然后再判断是</p>
<p>确实卡哥也说层序更加的简单</p>
<h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMaxheight</span><span class="params">(TreeNode *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">getMaxheight</span>(node-&gt;left), <span class="built_in">getMaxheight</span>(node-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//个人尝试用层序遍历</span></span><br><span class="line">    <span class="comment">//如何判断是最后一层，求最大深度？</span></span><br><span class="line">    <span class="type">int</span> h = <span class="built_in">getMaxheight</span>(root);</span><br><span class="line">    <span class="type">int</span> curH = <span class="number">0</span>;<span class="comment">//最开始的时候在第一层，深度也是1</span></span><br><span class="line">    queue&lt;TreeNode *&gt; q;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        curH++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            TreeNode *node = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (curH == h) <span class="keyword">return</span> node-&gt;val;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//说了至少有一个节点，所以这里执行不到的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="卡哥的递归遍历"><a href="#卡哥的递归遍历" class="headerlink" title="卡哥的递归遍历"></a>卡哥的递归遍历</h2>]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营第十七天-110-257-404</title>
    <url>/2024/05/25/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%83%E5%A4%A9-110-257-404/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h1><blockquote>
<p>个人记忆口诀：高度就是把这棵树放在地面上，叶子节点接触地面。看成叶子结点距离地面最近，按照高楼的思路来计数的话，叶子节点是一楼，所以高度是1。依次网上面是二楼，三楼等等，因此高度就是2，3 等等。</p>
<p>深度就是像植物的根系一样，往下扎根，所以把根结点看作是从地下网上靠近的植物的根。越往上就说明这个根扎的越不深，因此深度最低，就只是一。越往下说明扎的越深，因此深度依次增加，为2，3等等</p>
</blockquote>
<p>卡哥说，递归的话，用后序遍历求高度，，因为左右中的顺序能很好地将子节点的信息，例如高度返回给子树的根结点，然后该根节点再根据两个高度信息进行操作了。必须知道左右子树的高度信息，才能对该根节点的进行操作的情况我们就要用递归的后序遍历。</p>
<p>用前序遍历求深度，因为中左右的顺序像是往下探索，左和右在中之后，就可以将中的信息传给左和右了。</p>
<p>迭代法在网站上，没时间看，有空再看</p>
<h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHeight</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果不是平衡二叉树，就不返回节点高度了，</span></span><br><span class="line">    <span class="comment">//直接返回-1，最后判断一下</span></span><br><span class="line">    <span class="comment">//左</span></span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">getHeight</span>(root-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//右</span></span><br><span class="line">    <span class="type">int</span> r = <span class="built_in">getHeight</span>(root-&gt;right);</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//中</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(l - r) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">1</span> + <span class="built_in">max</span>(l, r);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">getHeight</span>(root) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>待补充的内容</p>
<h1 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a>257. 二叉树的所有路径</h1><p>选择前序遍历，因为只有中左右的顺序，才能让根节点指向他的左右子树的结点</p>
<p>递归和回溯是相辅相成的，，<strong>只要有递归就一定回溯</strong></p>
<h2 id="看了卡哥的几乎是照着抄的"><a href="#看了卡哥的几乎是照着抄的" class="headerlink" title="看了卡哥的几乎是照着抄的"></a>看了卡哥的几乎是照着抄的</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode *node, vector&lt;<span class="type">int</span>&gt; &amp;path, vector&lt;string&gt; &amp;result)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//中,中的过程就是把</span></span><br><span class="line">    path.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">    <span class="comment">//边界条件,这样把中的过程写在边界条件上面，，就可以让叶子节点的val也记录在path里面</span></span><br><span class="line">    <span class="keyword">if</span> (!node-&gt;left &amp;&amp; !node-&gt;right) &#123;</span><br><span class="line">        string sPath;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; path.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            sPath += <span class="built_in">to_string</span>(path[i]);</span><br><span class="line">            sPath += <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后的val后面是没有 &quot;-&gt;&quot;的</span></span><br><span class="line">        sPath += <span class="built_in">to_string</span>(path[i]);</span><br><span class="line">        result.<span class="built_in">push_back</span>(sPath);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left) &#123;</span><br><span class="line">        <span class="built_in">traversal</span>(node-&gt;left, path, result);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();<span class="comment">//回溯</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//右</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;right) &#123;</span><br><span class="line">        <span class="built_in">traversal</span>(node-&gt;right, path, result);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; result;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traversal</span>(root, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404. 左叶子之和"></a><a href="https://leetcode.cn/problems/sum-of-left-leaves/">404. 左叶子之和</a></h1><p>左叶子结点定义：父节点的左孩子，同时该结点是叶子节点，而不是靠左边的叶子结点</p>
<p>用后序遍历，，把左右子树的数值相加，得到总值</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营day16-104-111-222</title>
    <url>/2024/05/22/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5day16-104-111-222/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h1><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/solutions/2774231/104-er-cha-shu-de-zui-da-shen-du-by-joke-tvk9">https://leetcode.cn/problems/maximum-depth-of-binary-tree/solutions/2774231/104-er-cha-shu-de-zui-da-shen-du-by-joke-tvk9</a></p>
<p>后序遍历</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">maxDepth</span>(root-&gt;left) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">maxDepth</span>(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> l &gt; r ? l : r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>先序遍历，有点回溯的感觉</p>
<p>层序遍历明天看，效率太低了</p>
<h1 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111. 二叉树的最小深度"></a><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></h1><h2 id="想法一"><a href="#想法一" class="headerlink" title="想法一"></a>想法一</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//想法：通过层序遍历，找哪一层没有满，然后就返回此时的深度</span></span><br><span class="line">    <span class="type">int</span> mindepth = <span class="number">1</span>;</span><br><span class="line">    queue&lt;TreeNode *&gt; q;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pow</span>(<span class="number">2</span>, mindepth - <span class="number">1</span>) != size)  <span class="keyword">return</span> mindepth - <span class="number">1</span>;</span><br><span class="line">        mindepth++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            TreeNode *node = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mindepth - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>错误原因：没有好好审题目</p>
<p>题目：给定一个二叉树，找出其最小深度。</p>
<p><strong>最小深度是从根节点到最近叶子节点的最短路径上的节点数量</strong>。</p>
<p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p>
<p>是到最近的叶子节点，，因为上面代码的逻辑就无法判断了</p>
<h2 id="想法二"><a href="#想法二" class="headerlink" title="想法二"></a>想法二</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//想法：通过层序遍历，找第一个叶子节点出现的位置，返回此时的层数就好了</span></span><br><span class="line">    <span class="type">int</span> mindepth = <span class="number">1</span>;<span class="comment">//假设根节点存在</span></span><br><span class="line">    queue&lt;TreeNode *&gt; q;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            TreeNode *node = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (!node-&gt;left &amp;&amp; !node-&gt;right) <span class="keyword">return</span> mindepth;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//mindepth放这个位置最好</span></span><br><span class="line">        mindepth++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//走到这里说明root == NULL，q队列里面为空，while循环没有执行</span></span><br><span class="line">    <span class="comment">//如果真的走到这里来，说明没有叶子结点，说明树为空，此时返回0就好了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeNode *node2 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">    TreeNode *node3 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">3</span>, <span class="literal">NULL</span>, node2);</span><br><span class="line">    TreeNode *node1 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">1</span>, <span class="literal">NULL</span>, node3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;node1 = %d\n&quot;</span>, <span class="built_in">minDepth</span>(node1));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="卡哥想法后序遍历"><a href="#卡哥想法后序遍历" class="headerlink" title="卡哥想法后序遍历"></a>卡哥想法后序遍历</h2><p>本题依然是前序遍历和后序遍历都可以，前序求的是深度，后序求的是高度。那么使用后序遍历，其实求的是根节点到叶子节点的最小距离，就是求高度的过程，不过这个最小距离 也同样是最小深度。</p>
<p>以下讲解中遍历顺序上依然采用后序遍历（因为要比较递归返回之后的结果，本文我也给出前序遍历的写法）。</p>
<p>本题还有一个误区，在处理节点的过程中，最大深度很容易理解，<strong>最小深度就不那么好理解</strong>。我就是没理解最小深度，导致题目做错了</p>
<h3 id="自己根据思路尝试写一遍后序遍历1"><a href="#自己根据思路尝试写一遍后序遍历1" class="headerlink" title="自己根据思路尝试写一遍后序遍历1."></a>自己根据思路尝试写一遍后序遍历1.</h3><p>如果是下面这种想法就错了，就和上面的想法一一样，没有理解最小深度的题意去思考，，而是另一种和最大深度很像的想法。所以代码也写得很象，但是代码是错误的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">minDepth</span>(root-&gt;left);</span><br><span class="line">    <span class="type">int</span> r = <span class="built_in">minDepth</span>(root-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> l &lt; r ? l + <span class="number">1</span> : r + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeNode *node2 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">    TreeNode *node3 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">3</span>, <span class="literal">NULL</span>, node2);</span><br><span class="line">    TreeNode *node1 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">1</span>, <span class="literal">NULL</span>, node3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;node1 = %d\n&quot;</span>, <span class="built_in">minDepth</span>(node1));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自己根据思路尝试写一遍后序遍历2"><a href="#自己根据思路尝试写一遍后序遍历2" class="headerlink" title="自己根据思路尝试写一遍后序遍历2"></a>自己根据思路尝试写一遍后序遍历2</h3><p>这个就是对的，关键是<strong>如果一个为空，另一个不为空,,这个时候就要返回不为空的那个子树的值</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">minDepth</span>(root-&gt;left);</span><br><span class="line">    <span class="type">int</span> r = <span class="built_in">minDepth</span>(root-&gt;right);</span><br><span class="line">    <span class="comment">//如果是叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">0</span> &amp;&amp; r == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果一个为空，另一个不为空,,这个时候就要返回不为空的那个子树的值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l == <span class="number">0</span> &amp;&amp; r != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l != <span class="number">0</span> &amp;&amp; r == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> l + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//如果左右都为不为空</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l &lt; r ? l + <span class="number">1</span> : r + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="卡哥想法前序遍历"><a href="#卡哥想法前序遍历" class="headerlink" title="卡哥想法前序遍历"></a>卡哥想法前序遍历</h2><p>我也感觉写前序遍历的代码更加符合人的思考，只要往下找，找到叶子节点返沪就好了。卡哥说后序胜在代码简洁</p>
<p>之后再看把，时间很紧的</p>
<h1 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222. 完全二叉树的节点个数"></a><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">222. 完全二叉树的节点个数</a></h1><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>个个人第一想法：</p>
<p>层序遍历，统计结点个数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//层序遍历</span></span><br><span class="line">        <span class="comment">//个人记忆，根节点不为空压入栈，节while循环，有node来接</span></span><br><span class="line">        queue&lt;TreeNode *&gt; q;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            count += size;<span class="comment">//同一层的节点，只用加一次size</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="comment">//node真正遍历了每一个节点</span></span><br><span class="line">                TreeNode *node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p>自己尝试用后续便利来写，感觉思路也是类似，要让左右节点分别传数量给给根节点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//假设参数是这几个,感觉不用传引用类型的count呀,试了一下，确实不用</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">postordertraverse</span><span class="params">(TreeNode *cur)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界条件</span></span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//递归公式</span></span><br><span class="line">        <span class="comment">//这个时候cur肯定不是空节点，可以加1</span></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">postordertraverse</span>(cur-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">postordertraverse</span>(cur-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> left + right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//后序遍历</span></span><br><span class="line">        count = <span class="built_in">postordertraverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="更加简单的后序遍历代码（思路一样）"><a href="#更加简单的后序遍历代码（思路一样）" class="headerlink" title="更加简单的后序遍历代码（思路一样）"></a>更加简单的后序遍历代码（思路一样）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">countNodes</span>(root-&gt;left) + <span class="built_in">countNodes</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="利用完全二叉树的性质"><a href="#利用完全二叉树的性质" class="headerlink" title="利用完全二叉树的性质"></a>利用完全二叉树的性质</h2><p>用carl哥说的利用完全二叉树的性质来做</p>
<p>自己第一次做，顺便自己编写了测试用例</p>
<h3 id="自己写的"><a href="#自己写的" class="headerlink" title="自己写的"></a>自己写的</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepthleft</span><span class="params">(TreeNode *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">maxDepthleft</span>(node-&gt;left);</span><br><span class="line">    <span class="keyword">return</span> l + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxDepthright</span><span class="params">(TreeNode *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> r = <span class="built_in">maxDepthright</span>(node-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//    bool isMaxBinaryTree(TreeNode *root) &#123;</span></span><br><span class="line"><span class="comment">//        return maxDepthleft(root) == maxDepthright(root);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> leftheight = <span class="built_in">maxDepthleft</span>(root);</span><br><span class="line">    <span class="type">int</span> rightheight = <span class="built_in">maxDepthright</span>(root);</span><br><span class="line">    <span class="keyword">if</span> (leftheight == rightheight) <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; leftheight) - <span class="number">1</span>;<span class="comment">// 2 的 h 次方 - 1</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">countNodes</span>(root-&gt;left) + <span class="built_in">countNodes</span>(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><h4 id="错误反思"><a href="#错误反思" class="headerlink" title="错误反思"></a>错误反思</h4><p>第一次写这个写错了。原因是自己在复制</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxDepthleft</span><span class="params">(TreeNode *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">maxDepthleft</span>(node-&gt;left);</span><br><span class="line">    <span class="keyword">return</span> l + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>把它们改成右边的类似操作时，只把<code>l</code>改成了<code>r</code>，但是没有把<code>node-&gt;left</code>改成<code>node-&gt;right</code>。以后这一点在二叉树的题里面一定要千万注意。同理，自己下面有一次也只把<code>lh</code>改成<code>rh</code>，<code>lnode</code>改成<code>rnode</code>，差一点点忘记把<code>lnode-&gt;left；</code>改成<code>rnode-&gt;right;</code>了</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxDepthleft</span><span class="params">(TreeNode *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">maxDepthleft</span>(node-&gt;left);</span><br><span class="line">    <span class="keyword">return</span> l + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxDepthright</span><span class="params">(TreeNode *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> r = <span class="built_in">maxDepthright</span>(node-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//    bool isMaxBinaryTree(TreeNode *root) &#123;</span></span><br><span class="line"><span class="comment">//        return maxDepthleft(root) == maxDepthright(root);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> leftheight = <span class="built_in">maxDepthleft</span>(root);</span><br><span class="line">    <span class="type">int</span> rightheight = <span class="built_in">maxDepthright</span>(root);</span><br><span class="line">    <span class="keyword">if</span> (leftheight == rightheight) <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; leftheight) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">countNodes</span>(root-&gt;left) + <span class="built_in">countNodes</span>(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeNode *node4 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">4</span>);</span><br><span class="line">    TreeNode *node5 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">5</span>);</span><br><span class="line">    TreeNode *node6 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">6</span>);</span><br><span class="line">    TreeNode *node2 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">2</span>, node4, node5);</span><br><span class="line">    TreeNode *node3 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">3</span>, node6, <span class="literal">NULL</span>);</span><br><span class="line">    TreeNode *node1 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">1</span>, node2, node3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;node6 = %d\n&quot;</span>, <span class="built_in">countNodes</span>(node6));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;node5 = %d\n&quot;</span>, <span class="built_in">countNodes</span>(node5));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;node4 = %d\n&quot;</span>, <span class="built_in">countNodes</span>(node4));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;node3 = %d\n&quot;</span>, <span class="built_in">countNodes</span>(node3));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;node2 = %d\n&quot;</span>, <span class="built_in">countNodes</span>(node2));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;node1 = %d\n&quot;</span>, <span class="built_in">countNodes</span>(node1));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="看过卡哥讲解视频后自己模拟卡哥思路回忆它的代码自己写出来的"><a href="#看过卡哥讲解视频后自己模拟卡哥思路回忆它的代码自己写出来的" class="headerlink" title="看过卡哥讲解视频后自己模拟卡哥思路回忆它的代码自己写出来的"></a>看过卡哥讲解视频后自己模拟卡哥思路回忆它的代码自己写出来的</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//边界条件一</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//边界条件二</span></span><br><span class="line">    <span class="type">int</span> lh = <span class="number">0</span>, rh = <span class="number">0</span>;</span><br><span class="line">    TreeNode* lnode = root;</span><br><span class="line">    <span class="keyword">while</span>(lnode)&#123;</span><br><span class="line">        lh++;</span><br><span class="line">        lnode = lnode-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* rnode = root;</span><br><span class="line">    <span class="keyword">while</span>(rnode)&#123;</span><br><span class="line">        rh++;</span><br><span class="line">        rnode = rnode-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lh == rh) <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; lh) - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//递归公式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">countNodes</span>(root-&gt;left) + <span class="built_in">countNodes</span>(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营第十五天|102 226 101</title>
    <url>/2024/05/22/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9-102-226-101/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h1><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/solutions/2774207/102-er-cha-shu-de-ceng-xu-bian-li-by-jok-9c45">https://leetcode.cn/problems/binary-tree-level-order-traversal/solutions/2774207/102-er-cha-shu-de-ceng-xu-bian-li-by-jok-9c45</a></p>
<h1 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a>226. 翻转二叉树</h1><p><a href="https://leetcode.cn/problems/invert-binary-tree/solutions/2774554/226-fan-zhuan-er-cha-shu-by-joker-ek4-c5xs">https://leetcode.cn/problems/invert-binary-tree/solutions/2774554/226-fan-zhuan-er-cha-shu-by-joker-ek4-c5xs</a></p>
<h2 id="递归写法"><a href="#递归写法" class="headerlink" title="递归写法"></a>递归写法</h2><h3 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode *<span class="title">invertTree</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="后序"><a href="#后序" class="headerlink" title="后序"></a>后序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode *<span class="title">invertTree</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="中序"><a href="#中序" class="headerlink" title="中序"></a>中序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode *<span class="title">invertTree</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="迭代前后中非统一写法记不清楚的，不实用"><a href="#迭代前后中非统一写法记不清楚的，不实用" class="headerlink" title="迭代前后中非统一写法记不清楚的，不实用"></a>迭代前后中非统一写法记不清楚的，不实用</h2><h3 id="前序-1"><a href="#前序-1" class="headerlink" title="前序"></a>前序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode *<span class="title">invertTree</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="built_in">swap</span>(node-&gt;left, node-&gt;right);<span class="comment">//中</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);<span class="comment">//右</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);<span class="comment">//左</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="后序这个不是本题的题解，只是一个遍历顺序"><a href="#后序这个不是本题的题解，只是一个遍历顺序" class="headerlink" title="后序这个不是本题的题解，只是一个遍历顺序"></a>后序这个不是本题的题解，只是一个遍历顺序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> result;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            result.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left); <span class="comment">// 相对于前序遍历，这更改一下入栈顺序 （空节点不入栈）</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right); <span class="comment">// 空节点不入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(result.<span class="built_in">begin</span>(), result.<span class="built_in">end</span>()); <span class="comment">// 将结果反转之后就是左右中的顺序了</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="中序这个不是本题的题解，只是一个遍历顺序"><a href="#中序这个不是本题的题解，只是一个遍历顺序" class="headerlink" title="中序这个不是本题的题解，只是一个遍历顺序"></a>中序这个不是本题的题解，只是一个遍历顺序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur != <span class="literal">NULL</span>) &#123; <span class="comment">// 指针来访问节点，访问到最底层</span></span><br><span class="line">                st.<span class="built_in">push</span>(cur); <span class="comment">// 将访问的节点放进栈</span></span><br><span class="line">                cur = cur-&gt;left;                <span class="comment">// 左</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = st.<span class="built_in">top</span>(); <span class="comment">// 从栈里弹出的数据，就是要处理的数据（放进result数组里的数据）</span></span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                result.<span class="built_in">push_back</span>(cur-&gt;val);     <span class="comment">// 中</span></span><br><span class="line">                cur = cur-&gt;right;               <span class="comment">// 右</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="迭代前中后统一写法"><a href="#迭代前中后统一写法" class="headerlink" title="迭代前中后统一写法"></a>迭代前中后统一写法</h2><h3 id="node和root的区别"><a href="#node和root的区别" class="headerlink" title="node和root的区别"></a><code>node</code>和<code>root</code>的区别</h3><p>同时最最重要的，递归里面root是遍历所有节点的，相当于cur。</p>
<p>但是迭代里面root就是根节点，就处理一次。然后就用node结点从栈或者队列里面取元素了。相当于node是遍历所有节点，相当于cur。</p>
<p>因此进左右子树的时候，<strong>递归</strong>是这样子的，用的<code>root.left</code>和<code>root.right</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">invertTree</span>(root-&gt;left);         <span class="comment">// 左</span></span><br><span class="line"><span class="built_in">invertTree</span>(root-&gt;right);        <span class="comment">// 右</span></span><br></pre></td></tr></table></figure>

<p>因此进左右子树的时候，迭代是这样子的，用的<code>node.left</code>和<code>node.right</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);  <span class="comment">// 右</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);    <span class="comment">// 左</span></span><br></pre></td></tr></table></figure>

<h3 id="递归和迭代易混淆类似代码区别，判不判空"><a href="#递归和迭代易混淆类似代码区别，判不判空" class="headerlink" title="递归和迭代易混淆类似代码区别，判不判空"></a>递归和迭代易混淆类似代码区别，判不判空</h3><p>个人理解：递归里面第一句一般都是这句话，因为这是递归结束终止条件，因此空结点的判断都交给下一层来判断并返回。所以</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br></pre></td></tr></table></figure>

<p>所以进入下一层的时候允许空姐点进去，因为一进入立刻就返回，不会有影响。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">invertTree</span>(root-&gt;left);         <span class="comment">// 左</span></span><br><span class="line"><span class="built_in">invertTree</span>(root-&gt;right);        <span class="comment">// 右</span></span><br></pre></td></tr></table></figure>

<p>但是迭代不一样，无论你是用栈来迭代还是用队列来层序</p>
<p>都要先判断是否为空，不为空才能压入栈或者队列</p>
<p>用栈迭代前中后序遍历统一写法里面</p>
<p>对根节点的判断</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br></pre></td></tr></table></figure>

<p>对左右结点的判断</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);  <span class="comment">// 右</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);    <span class="comment">// 左</span></span><br></pre></td></tr></table></figure>

<p>用队列层序遍历里面也适合迭代一样的，先判空</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (root != <span class="literal">NULL</span>) que.<span class="built_in">push</span>(root);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (node-&gt;left) que.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line"><span class="keyword">if</span> (node-&gt;right) que.<span class="built_in">push</span>(node-&gt;right);</span><br></pre></td></tr></table></figure>



<h3 id="前序-2"><a href="#前序-2" class="headerlink" title="前序"></a>前序</h3><p>​	</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode *<span class="title">invertTree</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//前中后序遍历迭代统一写法</span></span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *node = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                st.<span class="built_in">push</span>(node);</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">swap</span>(node-&gt;left, node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="后序-1"><a href="#后序-1" class="headerlink" title="后序"></a>后序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode *<span class="title">invertTree</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//前中后序遍历迭代统一写法</span></span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *node = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                st.<span class="built_in">push</span>(node);</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">swap</span>(node-&gt;left, node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="中序-1"><a href="#中序-1" class="headerlink" title="中序"></a>中序</h3><blockquote>
<p>但使用迭代方式统一写法的中序是可以的。为什么这个中序就是可以的呢，因为这是用栈来遍历，而不是靠指针来遍历，避免了递归法中翻转了两次的情况，</p>
<p>个人理解：</p>
<p>好像是因为递归返回的时候通过根节点到此时根节点的右子树，但是此时的，根节点的右子树是之前已经被处理过的根节点的左子树</p>
</blockquote>
<blockquote>
<p>而迭代不一样，迭代开始就<strong>访问</strong>了右，中，左结点。并且把他们的地址都放到了st栈里面。所以到处理左，中，右的时候，这个时候右结点的地址就是原来的右节点的地址，没有改变过。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode *<span class="title">invertTree</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//前中后序遍历迭代统一写法</span></span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *node = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                st.<span class="built_in">push</span>(node);</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">swap</span>(node-&gt;left, node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="层序写法"><a href="#层序写法" class="headerlink" title="层序写法"></a>层序写法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode *<span class="title">invertTree</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode *&gt; q;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode *node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">swap</span>(node-&gt;left, node-&gt;right);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a><a href="https://leetcode.cn/problems/symmetric-tree/">101. 对称二叉树</a></h1><blockquote>
<p>这道题目想了一会，看到弹幕说用层序加栈类似括号匹配一般判断，但是自己还是不会。算是不管了</p>
<p>就记住carl的思路和讲解得了</p>
</blockquote>
<blockquote>
<p>个人经验总结：二叉树一般都是<strong>后序</strong>。一般收集孩子的信息，想上一层返回的都需要后续便利</p>
</blockquote>
<h2 id="递归写法-1"><a href="#递归写法-1" class="headerlink" title="递归写法"></a>递归写法</h2><p><a href="https://leetcode.cn/problems/symmetric-tree/solutions/2786926/101-dui-cheng-er-cha-shu-by-joker-ek4-1b2p">https://leetcode.cn/problems/symmetric-tree/solutions/2786926/101-dui-cheng-er-cha-shu-by-joker-ek4-1b2p</a></p>
<p>这道题目我们也可以使用迭代法，但要注意，这里的迭代法可不是前中后序的迭代写法，因为本题的本质是判断两个树是否是相互翻转的，其实已经不是所谓二叉树遍历的前中后序的关系了。</p>
<p>这里我们可以使用队列来比较两个树（根节点的左右子树）是否相互翻转，（<strong>注意这不是层序遍历</strong>）</p>
<p>还有栈还有队列的写法。</p>
<p>明天再卡吧</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营第十四天</title>
    <url>/2024/05/20/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>以下内容均来自<a href="https://programmercarl.com/">https://programmercarl.com/</a></p>
<p>carl哥的（<a href="https://github.com/youngyangyang04">程序员Carl (opens new window)</a>）的原创。</p>
<p>我仅做<strong>学习过程中的笔记总结。帮助自己理解记忆，绝不做任何商业盈利用途</strong>。如觉得侵权，请联系微信BradTorres，我一定删除。</p>
<h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><p><strong>这两种遍历是图论中最基本的两种遍历方式</strong>，后面在介绍图论的时候 还会介绍到。</p>
<p>那么从深度优先遍历和广度优先遍历进一步拓展，才有如下遍历方式：</p>
<ul>
<li>深度优先遍历<ul>
<li>前序遍历（递归法，迭代法）</li>
<li>中序遍历（递归法，迭代法）</li>
<li>后序遍历（递归法，迭代法）</li>
</ul>
</li>
<li>广度优先遍历<ul>
<li>层次遍历（迭代法）</li>
</ul>
</li>
</ul>
<p>在深度优先遍历中：有三个顺序，前中后序遍历， 有同学总分不清这三个顺序，经常搞混，我这里教大家一个技巧。</p>
<p><strong>这里前中后，其实指的就是中间节点的遍历顺序</strong>，只要大家记住 前中后序指的就是中间节点的位置就可以了。</p>
<p>看如下中间节点的顺序，就可以发现，中间节点的顺序就是所谓的遍历方式</p>
<ul>
<li><p>前序遍历：中左右</p>
</li>
<li><p>中序遍历：左中右</p>
</li>
<li><p>后序遍历：左右中</p>
<h2 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h2><p>刚刚我们说过了二叉树有两种存储方式顺序存储，和链式存储，顺序存储就是用数组来存，这个定义没啥可说的，我们来看看链式存储的二叉树节点的定义方式。</p>
<p>C++代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h1><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></p>
<p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/solutions/2774099/144-er-cha-shu-de-qian-xu-bian-li-by-jok-k11z">https://leetcode.cn/problems/binary-tree-preorder-traversal/solutions/2774099/144-er-cha-shu-de-qian-xu-bian-li-by-jok-k11z</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="type">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(cur-&gt;val);    <span class="comment">// 中</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;left, vec);  <span class="comment">// 左</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="built_in">traversal</span>(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>中序遍历：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="type">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;left, vec);  <span class="comment">// 左</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(cur-&gt;val);    <span class="comment">// 中</span></span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后序遍历：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="type">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;left, vec);  <span class="comment">// 左</span></span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(cur-&gt;val);    <span class="comment">// 中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历</a></p>
<p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/solutions/2774104/145-er-cha-shu-de-hou-xu-bian-li-by-joke-gfnq">https://leetcode.cn/problems/binary-tree-postorder-traversal/solutions/2774104/145-er-cha-shu-de-hou-xu-bian-li-by-joke-gfnq</a></p>
<p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></p>
<p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/solutions/2774095/94-er-cha-shu-de-zhong-xu-bian-li-by-jok-zg40">https://leetcode.cn/problems/binary-tree-inorder-traversal/solutions/2774095/94-er-cha-shu-de-zhong-xu-bian-li-by-jok-zg40</a></p>
<h1 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h1><h2 id="前序遍历迭代法"><a href="#前序遍历迭代法" class="headerlink" title="前序遍历迭代法"></a>前序遍历迭代法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            result.<span class="built_in">push_back</span>(node-&gt;val);          <span class="comment">// 中</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);<span class="comment">// 右（空节点不入栈）</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);  <span class="comment">// 左（空节点不入栈）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="中序遍历迭代法"><a href="#中序遍历迭代法" class="headerlink" title="中序遍历迭代法"></a>中序遍历迭代法</h2><p>中序遍历<strong>访问</strong>的顺序和<strong>处理</strong>的顺序不一样</p>
<p>那么<strong>在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素</strong></p>
<p>为了解释清楚，我说明一下 刚刚在迭代的过程中，其实我们有两个操作：</p>
<ol>
<li><strong>处理：将元素放进result数组中</strong></li>
<li><strong>访问：遍历节点</strong></li>
</ol>
<p>分析一下为什么刚刚写的前序遍历的代码，不能和中序遍历通用呢，因为前序遍历的顺序是中左右，先访问的元素是中间节点，要处理的元素也是中间节点，所以刚刚才能写出相对简洁的代码，<strong>因为要访问的元素和要处理的元素顺序是一致的，都是中间节点。</strong></p>
<p>那么再看看中序遍历，中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进result数组中），这就造成了<strong>处理顺序和访问顺序是不一致的。</strong></p>
<p>那么<strong>在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        TreeNode *cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                result.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="后序遍历迭代法"><a href="#后序遍历迭代法" class="headerlink" title="后序遍历迭代法"></a>后序遍历迭代法</h2><p>再来看后序遍历，先序遍历是中左右，后续遍历是左右中，那么我们只需要调整一下先序遍历的代码顺序，就变成中右左的遍历顺序，然后在反转result数组，输出的结果顺序就是左右中了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            result.<span class="built_in">push_back</span>(node-&gt;val);          <span class="comment">// 中</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);  <span class="comment">// 左（空节点不入栈）</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);<span class="comment">// 右（空节点不入栈）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(result.<span class="built_in">begin</span>(), result.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此时我们用迭代法写出了二叉树的前后中序遍历，大家可以看出前序和中序是完全两种代码风格，并不像递归写法那样代码稍做调整，就可以实现前后中序。</p>
<p><strong>这是因为前序遍历中访问节点（遍历节点）和处理节点（将元素放进result数组中）可以同步处理，但是中序就无法做到同步！</strong></p>
<p>上面这句话，可能一些同学不太理解，建议自己亲手用迭代法，先写出来前序，再试试能不能写出中序，就能理解了。</p>
<p><strong>那么问题又来了，难道 二叉树前后中序遍历的迭代法实现，就不能风格统一么（即前序遍历 改变代码顺序就可以实现中序 和 后序）？</strong>这就是下面统一迭代的事情了。 </p>
<h1 id="统一迭代"><a href="#统一迭代" class="headerlink" title="统一迭代"></a>统一迭代</h1><p>【一个模板解决二叉树前中后遍历的迭代写法！】 <a href="https://www.bilibili.com/video/BV1nf4y1p7Y2/?share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1nf4y1p7Y2/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p>
<p>统一迭代代码</p>
<p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/solutions/2774099/144-er-cha-shu-de-qian-xu-bian-li-by-jok-k11z">https://leetcode.cn/problems/binary-tree-preorder-traversal/solutions/2774099/144-er-cha-shu-de-qian-xu-bian-li-by-jok-k11z</a></p>
<p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/solutions/2774104/145-er-cha-shu-de-hou-xu-bian-li-by-joke-gfnq">https://leetcode.cn/problems/binary-tree-postorder-traversal/solutions/2774104/145-er-cha-shu-de-hou-xu-bian-li-by-joke-gfnq</a></p>
<p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/solutions/2774095/94-er-cha-shu-de-zhong-xu-bian-li-by-jok-zg40">https://leetcode.cn/problems/binary-tree-inorder-traversal/solutions/2774095/94-er-cha-shu-de-zhong-xu-bian-li-by-jok-zg40</a></p>
<blockquote>
<p>到说使用栈的话，<strong>无法同时解决访问节点（遍历节点）和处理节点（将元素放进结果集）不一致的情况</strong>。</p>
<p><strong>那我们就将访问的节点放入栈中，把要处理的节点也放入栈中但是要做标记。</strong></p>
<p>如何标记呢，<strong>就是要处理的节点放入栈之后，紧接着放入一个空指针作为标记。</strong> 这种方法也可以叫做标记法</p>
</blockquote>
<h2 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *node = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="literal">NULL</span>)&#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                st.<span class="built_in">push</span>(node);</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                result.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="中序"><a href="#中序" class="headerlink" title="中序"></a>中序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *node = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="literal">NULL</span>)&#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                                st.<span class="built_in">push</span>(node);</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                result.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="后序"><a href="#后序" class="headerlink" title="后序"></a>后序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode *node = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="literal">NULL</span>)&#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                                st.<span class="built_in">push</span>(node);</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                result.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营第十三天-239,347,总结</title>
    <url>/2024/05/20/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9-239-347-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></h1><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>【C15【模板】单调队列 滑动窗口最值】 <a href="https://www.bilibili.com/video/BV1H5411j7o6/?share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1H5411j7o6/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p>
<p>【单调队列 滑动窗口最大值【基础算法精讲 27】】 <a href="https://www.bilibili.com/video/BV1bM411X72E/?share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1bM411X72E/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p>
<p>【单调队列正式登场！| LeetCode：239. 滑动窗口最大值】 <a href="https://www.bilibili.com/video/BV1XS4y1p7qj/?share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1XS4y1p7qj/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p>
<p>用队列模拟</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">//入</span></span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; nums[q.<span class="built_in">back</span>()] &lt;= nums[i])</span><br><span class="line">                q.<span class="built_in">pop_back</span>();</span><br><span class="line">            q.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">//出</span></span><br><span class="line">            <span class="keyword">if</span> (i - q.<span class="built_in">front</span>() &gt;= k)</span><br><span class="line">                q.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="comment">//记录答案</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>)</span><br><span class="line">                ans.<span class="built_in">push_back</span>(nums[q.<span class="built_in">front</span>()]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/problems/sliding-window-maximum/solutions/2777540/239-hua-dong-chuang-kou-zui-da-zhi-by-jo-fud8">https://leetcode.cn/problems/sliding-window-maximum/solutions/2777540/239-hua-dong-chuang-kou-zui-da-zhi-by-jo-fud8</a></p>
<p>代码</p>
<p>测试用例</p>
<p>测试结果</p>
<p>测试结果</p>
<h1 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347. 前 K 个高频元素"></a><a href="https://leetcode.cn/problems/top-k-frequent-elements/">347. 前 K 个高频元素</a></h1><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/solutions/2784499/347-qian-k-ge-gao-pin-yuan-su-by-joker-e-mlnb">https://leetcode.cn/problems/top-k-frequent-elements/solutions/2784499/347-qian-k-ge-gao-pin-yuan-su-by-joker-e-mlnb</a></p>
<h1 id="栈与队列总结"><a href="#栈与队列总结" class="headerlink" title="栈与队列总结"></a>栈与队列总结</h1><p>见卡哥代码随仙录</p>
<p><a href="https://programmercarl.com/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E6%80%BB%E7%BB%93.html#%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80">https://programmercarl.com/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E6%80%BB%E7%BB%93.html#%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80</a></p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>图</title>
    <url>/2024/05/20/%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="数据结构-图的基本操作-邻接矩阵存储"><a href="#数据结构-图的基本操作-邻接矩阵存储" class="headerlink" title="数据结构-图的基本操作(邻接矩阵存储)"></a>数据结构-图的基本操作(邻接矩阵存储)</h2><p>来自这个</p>
<p><a href="https://www.bilibili.com/video/BV1pA411G7xX/?spm_id_from=333.788&vd_source=d84f08a0531e04d6d41c38180cce9fb5">https://www.bilibili.com/video/BV1pA411G7xX/?spm_id_from=333.788&amp;vd_source=d84f08a0531e04d6d41c38180cce9fb5</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXVEX 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 99</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//面向对象的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MGraph</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXVEX; i++) &#123;</span><br><span class="line">            Visited[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; MAXVEX; j++) &#123;</span><br><span class="line">                arc[i][j] = INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Visited数组初始化</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InitVisited</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXVEX; i++)</span><br><span class="line">            Visited[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建邻接矩阵</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i, j, k, w;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Please enter the number of vertices and edges:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; vexnum &gt;&gt; edgenum;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Please enter vertex information:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vexnum; i++) &#123;</span><br><span class="line">            Vertex[i] = i;    <span class="comment">//存储序号</span></span><br><span class="line">            cin &gt;&gt; Vername[i];<span class="comment">//输入顶点名字</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; edgenum; k++) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Please enter the subscripts i, j and weight w of the edge (vi, vj):&quot;</span>;</span><br><span class="line">            cin &gt;&gt; i &gt;&gt; j &gt;&gt; w;</span><br><span class="line">            arc[i][j] = arc[j][i] = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出邻接矩阵</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Adjacency matrix:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vexnum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; vexnum; j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, arc[i][j]);</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回顶点在图的位置</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">LocateVex</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vexnum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Vername[i] == ch)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == vexnum) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加某个顶点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InsertVex</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">        Vername[vexnum] = ch;</span><br><span class="line">        Vertex[vexnum] = vexnum;</span><br><span class="line">        vexnum++;<span class="comment">//别忘了顶点数自增</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除某个顶点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DeleteVex</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i, j, k;</span><br><span class="line">        <span class="comment">//遍历寻找节点位置</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vexnum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Vername[i] == ch) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Vername数组循环左移</span></span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; vexnum; j++) &#123;</span><br><span class="line">            Vername[j - <span class="number">1</span>] = Vername[j];<span class="comment">//覆盖</span></span><br><span class="line">            Vertex[j - <span class="number">1</span>] = Vertex[j];  <span class="comment">//覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//arc数组循环左移和上移</span></span><br><span class="line">        <span class="comment">//上移</span></span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; vexnum; j++)</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; vexnum; k++) &#123;</span><br><span class="line">                arc[j - <span class="number">1</span>][k] = arc[j][k];<span class="comment">//覆盖</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//左移</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; vexnum - <span class="number">1</span>; j++)</span><br><span class="line">            <span class="keyword">for</span> (k = i + <span class="number">1</span>; k &lt; vexnum; k++) &#123;</span><br><span class="line">                arc[j][k - <span class="number">1</span>] = arc[j][k];<span class="comment">//覆盖</span></span><br><span class="line">            &#125;</span><br><span class="line">        vexnum--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加某条边</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InsertEdge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        arc[i][j] = arc[j][i] = w;</span><br><span class="line">        edgenum++;<span class="comment">//别忘了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除某条边</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RemoveEdge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        arc[i][j] = arc[j][i] = INF;</span><br><span class="line">        edgenum--;<span class="comment">//别忘了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回第一个邻接顶点</span></span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">FirstNeighbor</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vexnum; i++)</span><br><span class="line">            <span class="keyword">if</span> (Vername[i] == ch) <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; vexnum; j++)</span><br><span class="line">            <span class="keyword">if</span> (arc[i][j] != INF) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (j == vexnum) <span class="keyword">return</span> <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> Vername[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自己照着书上写的</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Adjacent</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arc[i][j] != INF;</span><br><span class="line">    &#125;<span class="comment">//O(1)</span></span><br><span class="line">    <span class="comment">//自己照着书上写的,下面是错的，不管了</span></span><br><span class="line">    <span class="comment">//    int *Neighbors(int i) &#123;</span></span><br><span class="line">    <span class="comment">//        int arr[MAXVEX] = &#123;0&#125;;</span></span><br><span class="line">    <span class="comment">//        for (int j = 0; j &lt; vexnum; j++)</span></span><br><span class="line">    <span class="comment">//            if (arc[i][j] != INF)</span></span><br><span class="line">    <span class="comment">//                arr[j] = 1;</span></span><br><span class="line">    <span class="comment">//        return arr;</span></span><br><span class="line">    <span class="comment">//    &#125;//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//深度优先遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//InitVisited();//这是递归写的，进入下一层的时候又会InitVisited(),导致循环。所以不能写InitVisited()</span></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">LocateVex</span>(ch);</span><br><span class="line">        <span class="comment">//        cout &lt;&lt; &quot;The current vertex position is: &quot; &lt;&lt; l &lt;&lt; endl;</span></span><br><span class="line">        cout &lt;&lt; Vername[l] &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//输出当前顶点</span></span><br><span class="line">        Visited[l] = <span class="number">1</span>;           <span class="comment">//表示访问过该顶点</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vexnum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Visited[i] == <span class="number">0</span> &amp;&amp; arc[l][i] != INF)</span><br><span class="line">                <span class="built_in">DFS</span>(Vername[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">InitVisited</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vexnum; i++)</span><br><span class="line">            <span class="keyword">if</span> (!Visited[i])</span><br><span class="line">                <span class="built_in">DFSmyself</span>(Vername[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFSmyself</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">LocateVex</span>(ch);</span><br><span class="line">        <span class="built_in">visit</span>(l);</span><br><span class="line">        Visited[l] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;  i &lt; vexnum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Visited[i] &amp;&amp; arc[l][i] != INF)</span><br><span class="line">                <span class="built_in">DFSmyself</span>(Vername[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//广度优先遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;<span class="comment">//定义队列</span></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">LocateVex</span>(ch);</span><br><span class="line">        cout &lt;&lt; Vername[l] &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//输出当前顶点， 访问初始顶点</span></span><br><span class="line">        <span class="built_in">InitVisited</span>();</span><br><span class="line">        Visited[l] = <span class="number">1</span>;<span class="comment">//表示访问过该顶点</span></span><br><span class="line">        q.<span class="built_in">push</span>(l);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            l = q.<span class="built_in">front</span>();<span class="comment">//获取对头 信息</span></span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vexnum; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Visited[i] == <span class="number">0</span> &amp;&amp; arc[l][i] != INF) &#123;</span><br><span class="line">                    cout &lt;&lt; Vername[i] &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//输出当前顶点， 访问初始顶点</span></span><br><span class="line">                    Visited[i] = <span class="number">1</span>;           <span class="comment">//表示访问过该顶点</span></span><br><span class="line">                    q.<span class="built_in">push</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自己写一遍广度优先遍历，而且是完全版ben，便利所有连通分量</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">BFSTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">InitVisited</span>();</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vexnum; i++)</span><br><span class="line">            <span class="keyword">if</span> (!Visited[i])</span><br><span class="line">                <span class="built_in">BFSmyself</span>(Vername[i], q);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">BFSmyself</span><span class="params">(<span class="type">char</span> ch, queue&lt;<span class="type">int</span>&gt; &amp;q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*InitVisited();*/</span></span><br><span class="line">        <span class="comment">//queue&lt;int&gt; q;//队列放的是顶点数组的下标</span></span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">LocateVex</span>(ch);<span class="comment">//ch是我们输入的，要便利的第一个节点，也就是出发的节点</span></span><br><span class="line">        <span class="built_in">visit</span>(l);</span><br><span class="line">        Visited[l] = <span class="number">1</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(l);<span class="comment">//这三部经典操作</span></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">           <span class="comment">/* DeQueue(q, l);*/</span></span><br><span class="line">            l = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();<span class="comment">//stl里面pop是void的类型，不返回出队元素，考研里面Dequeue返回出队元素。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vexnum; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!Visited[i] &amp;&amp; arc[l][i] != INF) &#123;</span><br><span class="line">                    <span class="built_in">visit</span>(i);</span><br><span class="line">                    Visited[i] = <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(i);<span class="comment">//这三部经典操作</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(<span class="type">int</span> l )</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c  &quot;</span>, Vername[l]);<span class="comment">//不是%d</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> Vertex[MAXVEX];     <span class="comment">//存储结点的序号</span></span><br><span class="line">    <span class="type">char</span> Vername[MAXVEX];   <span class="comment">//存储结点的名字</span></span><br><span class="line">    <span class="type">int</span> arc[MAXVEX][MAXVEX];<span class="comment">//邻接矩阵</span></span><br><span class="line">    <span class="type">int</span> vexnum;             <span class="comment">//顶点数</span></span><br><span class="line">    <span class="type">int</span> edgenum;            <span class="comment">//边数</span></span><br><span class="line">    <span class="type">int</span> Visited[MAXVEX];    <span class="comment">//是否访问过</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MGraph MyGraph;</span><br><span class="line">    MyGraph.<span class="built_in">Init</span>();</span><br><span class="line">    MyGraph.<span class="built_in">Create</span>();</span><br><span class="line">    MyGraph.<span class="built_in">Print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    //增加顶点</span></span><br><span class="line">    <span class="comment">//    char ch;</span></span><br><span class="line">    <span class="comment">//    cout &lt;&lt; &quot;Please enter the vertex information to be added:&quot;;</span></span><br><span class="line">    <span class="comment">//    cin &gt;&gt; ch;</span></span><br><span class="line">    <span class="comment">//    MyGraph.InsertVex(ch);</span></span><br><span class="line">    <span class="comment">//    MyGraph.Print();</span></span><br><span class="line">    <span class="comment">//    //删除顶点</span></span><br><span class="line">    <span class="comment">//    cout &lt;&lt; &quot;Please enter the vertex information to be deleted:&quot;;</span></span><br><span class="line">    <span class="comment">//    cin &gt;&gt; ch;</span></span><br><span class="line">    <span class="comment">//    MyGraph.DeleteVex(ch);</span></span><br><span class="line">    <span class="comment">//    MyGraph.Print();</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//    //返回第一个邻接顶点</span></span><br><span class="line">    <span class="comment">//    cout &lt;&lt; &quot;Please enter the vertex you are looking for:&quot;;</span></span><br><span class="line">    <span class="comment">//    cin &gt;&gt; ch;</span></span><br><span class="line">    <span class="comment">//    ch = MyGraph.FirstNeighbor(ch);</span></span><br><span class="line">    <span class="comment">//    if (ch == &#x27;\0&#x27;) cout &lt;&lt; &quot;is not exist FirstNeighbor&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//    else</span></span><br><span class="line">    <span class="comment">//        cout &lt;&lt; &quot;FirstNeighbor is: &quot; &lt;&lt; ch &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//深度优先遍历R</span></span><br><span class="line">    <span class="comment">/*cout &lt;&lt; &quot;Please enter the information of the starting point:&quot;;</span></span><br><span class="line"><span class="comment">    char ch;</span></span><br><span class="line"><span class="comment">    cin &gt;&gt; ch;*/</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;depth first traversal:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyGraph.<span class="built_in">DFSTraverse</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//广度优先遍历</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;Please enter the information of the starting point:&quot;;</span></span><br><span class="line">    <span class="comment">//    char ch;</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; ch;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;B first traversal:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyGraph.<span class="built_in">BFSTraverse</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">11 13</span><br><span class="line">a b c d e f g h i j k</span><br><span class="line">0 1 1</span><br><span class="line">0 4 1</span><br><span class="line">1 5 1</span><br><span class="line">2 5 1</span><br><span class="line">2 6 1</span><br><span class="line">2 3 1</span><br><span class="line">3 6 1</span><br><span class="line">3 7 1</span><br><span class="line">5 6 1</span><br><span class="line">6 7 1</span><br><span class="line">8 9 1</span><br><span class="line">8 10 1</span><br><span class="line">9 10 1</span><br></pre></td></tr></table></figure>

<h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><p>用Clion不能把测试全部复制进去，要一行一行复制</p>
<p>用Visual Studio 2022就可以全部复制</p>
<p>后续会更新的</p>
]]></content>
      <tags>
        <tag>DataStructure</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营第十一天-20,1047,150</title>
    <url>/2024/05/18/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9-20-1047-150/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h1><p><a href="https://leetcode.cn/problems/valid-parentheses/solutions/2771702/20-you-xiao-de-gua-hao-by-joker-ek4-zsmo">https://leetcode.cn/problems/valid-parentheses/solutions/2771702/20-you-xiao-de-gua-hao-by-joker-ek4-zsmo</a></p>
<p>C可能的写法，不用STL</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10000</span></span><br><span class="line"><span class="comment">// #define SIZE(a) (sizeof(a) / sizeof(a[0]))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125; SqStack;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S, ElemType x)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S, ElemType &amp;x)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(SqStack S, ElemType &amp;x)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bracketCheck</span><span class="params">(<span class="type">char</span> str[], <span class="type">int</span> length)</span></span>;</span><br><span class="line"><span class="comment">// int SIZE(char a[]);</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">bracketCheck</span>(str, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int SIZE(char a[])</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     return sizeof(a) / sizeof(a[0]);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S.top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S, ElemType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == MaxSize - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S.data[++S.top] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S, ElemType &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x = S.data[S.top--];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(SqStack S, ElemType &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x = S.data[S.top];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bracketCheck</span><span class="params">(<span class="type">char</span> str[], <span class="type">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqStack S;</span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span> || str[i] == <span class="string">&#x27;[&#x27;</span> || str[i] == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">            <span class="built_in">Push</span>(S, str[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">char</span> topElem;</span><br><span class="line">            <span class="built_in">Pop</span>(S, topElem);</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; topElem != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; topElem != <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; topElem != <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">StackEmpty</span>(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1047. 删除字符串中的所有相邻重复项</a></h1><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/solutions/2777120/1047-shan-chu-zi-fu-chuan-zhong-de-suo-y-3yk7">https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/solutions/2777120/1047-shan-chu-zi-fu-chuan-zhong-de-suo-y-3yk7</a></p>
<h1 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">150. 逆波兰表达式求值</a></h1><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/solutions/2777448/150-ni-bo-lan-biao-da-shi-qiu-zhi-by-jok-bew5">https://leetcode.cn/problems/evaluate-reverse-polish-notation/solutions/2777448/150-ni-bo-lan-biao-da-shi-qiu-zhi-by-jok-bew5</a></p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营第十天-理论基础,232,225</title>
    <url>/2024/05/16/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%A4%A9-%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-232-225/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">232. 用栈实现队列</a></h1><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/solutions/2776991/232-yong-zhan-shi-xian-dui-lie-by-joker-zdgqs">https://leetcode.cn/problems/implement-queue-using-stacks/solutions/2776991/232-yong-zhan-shi-xian-dui-lie-by-joker-zdgqs</a></p>
<h1 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a><a href="https://leetcode.cn/problems/implement-stack-using-queues/">225. 用队列实现栈</a></h1><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/solutions/2777028/225-yong-dui-lie-shi-xian-zhan-by-joker-qkl4z">https://leetcode.cn/problems/implement-stack-using-queues/solutions/2777028/225-yong-dui-lie-shi-xian-zhan-by-joker-qkl4z</a></p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营第六天 | 哈希表基础理论，242，349，202，1</title>
    <url>/2024/05/13/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AD%E5%A4%A9-%E5%93%88%E5%B8%8C%E8%A1%A8%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%EF%BC%8C242%EF%BC%8C349%EF%BC%8C202%EF%BC%8C1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a><a href="https://leetcode.cn/problems/valid-anagram/">242. 有效的字母异位词</a></h1><p><a href="https://leetcode.cn/problems/valid-anagram/solutions/2775370/242-you-xiao-de-zi-mu-yi-wei-ci-by-joker-20gf">https://leetcode.cn/problems/valid-anagram/solutions/2775370/242-you-xiao-de-zi-mu-yi-wei-ci-by-joker-20gf</a></p>
<h1 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349. 两个数组的交集</a></h1><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/solutions/2775403/349-liang-ge-shu-zu-de-jiao-ji-by-joker-bsuh0">https://leetcode.cn/problems/intersection-of-two-arrays/solutions/2775403/349-liang-ge-shu-zu-de-jiao-ji-by-joker-bsuh0</a></p>
<h1 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a><a href="https://leetcode.cn/problems/happy-number/">202. 快乐数</a></h1><p><a href="https://leetcode.cn/problems/happy-number/solutions/2776407/202-kuai-le-shu-by-joker-ek4-qq3h">https://leetcode.cn/problems/happy-number/solutions/2776407/202-kuai-le-shu-by-joker-ek4-qq3h</a></p>
<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></h1><p><a href="https://leetcode.cn/problems/two-sum/solutions/2776436/1-liang-shu-zhi-he-by-joker-ek4-8s9q">https://leetcode.cn/problems/two-sum/solutions/2776436/1-liang-shu-zhi-he-by-joker-ek4-8s9q</a></p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营第四天 |24, 19, 面试题 02.07. 链表相交, 142</title>
    <url>/2024/05/11/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%9B%9B%E5%A4%A9-24-19-%E9%9D%A2%E8%AF%95%E9%A2%98-02-07-%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4-142/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h1><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/solutions/2773835/24-liang-liang-jiao-huan-lian-biao-zhong-qm81">https://leetcode.cn/problems/swap-nodes-in-pairs/solutions/2773835/24-liang-liang-jiao-huan-lian-biao-zhong-qm81</a></p>
<h1 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h1><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/solutions/2773862/19-shan-chu-lian-biao-de-dao-shu-di-n-ge-f4is">https://leetcode.cn/problems/remove-nth-node-from-end-of-list/solutions/2773862/19-shan-chu-lian-biao-de-dao-shu-di-n-ge-f4is</a></p>
<h1 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a></h1><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/solutions/2773880/mian-shi-ti-0207-lian-biao-xiang-jiao-by-f694">https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/solutions/2773880/mian-shi-ti-0207-lian-biao-xiang-jiao-by-f694</a></p>
<h1 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h1><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/solutions/2773919/142-huan-xing-lian-biao-ii-by-joker-ek4-vhcr">https://leetcode.cn/problems/linked-list-cycle-ii/solutions/2773919/142-huan-xing-lian-biao-ii-by-joker-ek4-vhcr</a></p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>词法分析器C++49</title>
    <url>/2024/05/10/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8C-49/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>在 C 语言中，<strong>流 (stream)</strong> 表示任意输入的源或任意输出的目的地。流是一个抽象的概念，它即可以表示存储硬盘上的文件，也可以表示网络端口或者打印设备。流这个概念可以很好地屏蔽硬件设备之间的差异，<strong>使得 C 语言可以像读写文件一样读写任意的设备</strong>  </p>
<blockquote>
<p>Linux哲学：一切皆文件  </p>
</blockquote>
<h3 id="文件缓冲"><a href="#文件缓冲" class="headerlink" title="文件缓冲"></a>文件缓冲</h3><p>仅仅了解抽象的概念是不够的，有时候我们还需要了解事物运行的机理。由于内存和硬件设备之间存在读写性能上的”鸿沟”，所以操作系统会在内存上为流设置缓冲区  </p>
<p>缓冲区是以<strong>先进先出</strong>的方式管理数据的。缓冲区分为三种类型：</p>
<p>满缓冲。当缓冲区空时，从输入流中读取数据；当缓冲区满时，向输出流中写入数据。</p>
<p>行缓冲。每次从输入流中读取一行数据；每次向输出流中写入一行数据。</p>
<p>无缓冲。顾名思义，就是没有缓冲区</p>
<blockquote>
<p>stdin标准输入流</p>
<p>stdout标准输出流</p>
</blockquote>
<blockquote>
<p>stderr标准错误流</p>
</blockquote>
<h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><p>C 语言对流的访问是通过<strong>文件指针</strong>实现的，它的类型为 FILE* 。并且在 &lt;stdio.h&gt; 头文件中提供了 3 个标准流。这 3 个标准流可以直接使用——我们不需要对其进行声明，也不用打开或者关闭它们。  </p>
<table>
<thead>
<tr>
<th>文件指针</th>
<th>流</th>
<th>默认含义</th>
</tr>
</thead>
<tbody><tr>
<td>stdin</td>
<td>标准输入</td>
<td>键盘</td>
</tr>
<tr>
<td>stdout</td>
<td>标准输出</td>
<td>屏幕</td>
</tr>
<tr>
<td>stderr</td>
<td>标准错误</td>
<td>屏幕</td>
</tr>
</tbody></table>
<h3 id="文本文件和二进制文件"><a href="#文本文件和二进制文件" class="headerlink" title="文本文件和二进制文件"></a>文本文件和二进制文件</h3><p>C 语言支持两种类型的文件：文本文件和二进制文件。文本文件中存储的是字符数据，人类是可以看懂的；二进制文件中的数据，人类是看不懂的。</p>
<p>文本文件具有两个独特的性质：</p>
<p><strong>文本文件有行的概念</strong>。文本文件被划分为若干行，并且每一行的结尾都以特殊字符进行标记。在 Windows 系统中，是以回车符和换行符 (\r\n) 进行标记的；在 Unix和 Macintosh 系统中是以换行符 (\n) 标记的。</p>
<blockquote>
<p>早期的 Macintosh 是以回车符 (\r) 标记每一行的结尾的。</p>
</blockquote>
<p><strong>文本文件可能包含一个特殊的 “文件末尾” 标记。</strong>一些操作系统允许在文本文件的末尾使用一个特殊的字节作为标记。在 Windows 系统中，这个标记为 ‘\x1a’ (Ctrl+Z)。Ctrl+Z不是必需的，但如果存在，它就标志着文件的结束，其后的所有字节都会被忽略。大多数其他操作系统 (包括 UNIX) 是没有文件末尾字符。</p>
<blockquote>
<p>使用 Ctrl+Z 的这一习惯继承自 DOS，而 DOS 中的这一习惯又是从 CP&#x2F;M (早期用于个人电脑的一种操作系统) 来的。</p>
</blockquote>
<p>在写入数据时，我们需要考虑是以文本形式存储还是以二进制的形式存储。比如，存储整数 32767，一种选择是写入字符 ‘3’, ‘2’, ‘7’, ‘6’, ‘7’，需要 5 个字节。  </p>
<p>另一个选择是以二进制形式存储这个数，这种方法只需要两个字节。  </p>
<blockquote>
<p>文本形式可以方便人类阅读和编辑；二进制形式可以节省空间，并且转换效率高。  </p>
</blockquote>
<h2 id="打开-x2F-关闭文件"><a href="#打开-x2F-关闭文件" class="headerlink" title="打开&#x2F;关闭文件"></a>打开&#x2F;关闭文件</h2><h3 id="f-o-p-e-n"><a href="#f-o-p-e-n" class="headerlink" title="f o p e n"></a>f o p e n</h3><p>读写文件之前，我们需要使用 <code>fopen</code> 函数打开文件。  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE* <span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">const</span> <span class="type">char</span>* mode)</span>;</span><br></pre></td></tr></table></figure>

<p>第一个参数是文件的路径，用来定位文件的；第二个参数表示是以何种模式打开文件的。如果无法打开文件， <code>fopen</code> 返回空指针  </p>
<h4 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h4><p>文件路径分为两种，一种是绝对路径：从根目录 (或者盘符) 开始，一直到文件所在的位置，比如：”c:&#x2F;project&#x2F;test.dat”。另一种是相对路径：从当前工作目录开始，一直到文件所在的位置，比如：”in.dat”。</p>
<p>在实际工作中，我们一般使用相对路径 (Why?)。</p>
<p>便于移植</p>
<h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><p>模式的选择不仅依赖于后续对文件的操作，还依赖于文件是文本形式还是二进制形式。打开一个文本文件，可以使用下面一些模式：  </p>
<p>自己看pdf</p>
<blockquote>
<p>写模式和追加模式是不一样的。如果文件存在，写模式会清空原有的数据，而追加模式会在原有数据的后面写入新的内容。  </p>
</blockquote>
<h3 id="f-c-l-o-s-e"><a href="#f-c-l-o-s-e" class="headerlink" title="f c l o s e"></a>f c l o s e</h3><p>看pdf</p>
<h2 id="读-x2F-写文件"><a href="#读-x2F-写文件" class="headerlink" title="读&#x2F;写文件"></a>读&#x2F;写文件</h2><p>前面介绍了如何打开和关闭文件，接下来我们来学习下如何读写文件。其中<code>fgetc/fputc</code> , <code>fgets/fputs</code> 和 <code>fscanf/fprintf</code>是用来读写文本文件的； <code>fread/fwrite</code> 是用来读写二进制文件的。  </p>
<h3 id="f-g-e-t-c-amp-f-p-u-t-c"><a href="#f-g-e-t-c-amp-f-p-u-t-c" class="headerlink" title="f g e t c &amp; f p u t c"></a>f g e t c &amp; f p u t c</h3><p>看pdf</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营第三天 |203.移除链表元素,  707.设计链表, 206.反转链表</title>
    <url>/2024/05/10/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%89%E5%A4%A9-203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0-707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素</a></h1><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/solutions/2772075/203-yi-chu-lian-biao-yuan-su-by-joker-ek-kyhf">https://leetcode.cn/problems/remove-linked-list-elements/solutions/2772075/203-yi-chu-lian-biao-yuan-su-by-joker-ek-kyhf</a></p>
<h1 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707. 设计链表"></a><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表</a></h1><p><a href="https://leetcode.cn/problems/design-linked-list/solutions/2772214/707-she-ji-lian-biao-by-joker-ek4-lbig">https://leetcode.cn/problems/design-linked-list/solutions/2772214/707-she-ji-lian-biao-by-joker-ek4-lbig</a></p>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>因为有<code>dummyHead</code>，因此代码就花了许多，不用考虑第一个借点的情况。<br>注意<code> void addAtIndex(int index, int val)</code><br><code>void deleteAtIndex(int index)</code>的时候，找到下标index - 1节点的时候，要用如下代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LinkedNode *curr = _dummyHead;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">-1</span>; i &lt; index - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">curr = curr-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h1><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>这一题不用dummyHead会方便一些</p>
<p><a href="https://leetcode.cn/problems/reverse-linked-list/solutions/2771061/206-fan-zhuan-lian-biao-by-joker-ek4-lm6d">https://leetcode.cn/problems/reverse-linked-list/solutions/2771061/206-fan-zhuan-lian-biao-by-joker-ek4-lm6d</a></p>
<h4 id="反转单链表"><a href="#反转单链表" class="headerlink" title="反转单链表"></a>反转单链表</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node* <span class="title function_">reverse</span><span class="params">(Node* <span class="built_in">list</span>)</span>;</span><br><span class="line">输入: <span class="number">1</span> --&gt; <span class="number">2</span> --&gt; <span class="number">3</span></span><br><span class="line">输出: <span class="number">3</span> --&gt; <span class="number">2</span> --&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>反转链表都是不要创建额外节点的，不需要额外内存空间，直接在原来链表上进行反转</p>
<p>思路1：头插法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node* prev = <span class="literal">NULL</span>;</span><br><span class="line">Node* curr = <span class="built_in">list</span>;</span><br><span class="line"><span class="keyword">while</span>(curr)&#123;</span><br><span class="line">	<span class="comment">//保留下一个节点</span></span><br><span class="line">		Node* currNext = curr-&gt;next;</span><br><span class="line">	<span class="comment">//反转curr借点</span></span><br><span class="line">	curr-&gt;next = prev;</span><br><span class="line">	<span class="comment">//跟新prev，curr</span></span><br><span class="line">	prev = curr;</span><br><span class="line">	curr = currNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// curr == NULL的时候循环结束</span></span><br><span class="line"><span class="built_in">list</span> = prev;<span class="comment">//prev这个时候指向第一个节点</span></span><br></pre></td></tr></table></figure>

<p>时间复杂度：O(n)</p>
<p>空间复杂度：O(1)</p>
<h5 id="迭代实现"><a href="#迭代实现" class="headerlink" title="迭代实现"></a>迭代实现</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//迭代</span></span><br><span class="line">        ListNode* prev = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">            ListNode* currNext = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = currNext;</span><br><span class="line">        &#125;</span><br><span class="line">        head = prev;</span><br><span class="line">        <span class="keyword">return</span> head; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>思路2：<strong>递归</strong></p>
<p>类似于<strong>数学归纳法</strong>：假设我已经实现了反转n - 1个结点（成立），那么如果在已经实现反转n -  1个节点的基础上，反转 n 个节点</p>
<p><strong>边界条件</strong>:只有一个借点或者是空链表（类似于数学归纳法的归纳奠基，k &#x3D; 0成立，k &#x3D; 1成立。在假设k &#x3D; n - 1成立，求证明k &#x3D; n也成立</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> == <span class="literal">NULL</span> || <span class="built_in">list</span>-&gt;next == <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>

<p><strong>递归公式</strong>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node* head = reverse(<span class="built_in">list</span>-&gt;next);<span class="comment">//相当于假设k = n - 1成立，接下来只要证明k = n也成立</span></span><br><span class="line"><span class="built_in">list</span>-&gt;next-&gt;next = <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">list</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>时间复杂度：O(n)</p>
<p>空间复杂度：O(n)</p>
<h5 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode* <span class="title function_">reverseList</span><span class="params">(ListNode* head)</span> &#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="comment">//边界条件</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">//递归公式</span></span><br><span class="line">        ListNode* headnew = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> headnew;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营day2-977-209-59</title>
    <url>/2024/05/09/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5day2-977-209-59/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></h1><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/solutions/2769976/977-you-xu-shu-zu-de-ping-fang-by-joker-y0b8q">https://leetcode.cn/problems/squares-of-a-sorted-array/solutions/2769976/977-you-xu-shu-zu-de-ping-fang-by-joker-y0b8q</a></p>
<h1 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>找出一个数组中最短连续的子数组，这个子数组的和要&gt;&#x3D;s.</p>
<h2 id="解题方法（O-logn-的方法明天更新）"><a href="#解题方法（O-logn-的方法明天更新）" class="headerlink" title="解题方法（O(logn)的方法明天更新）"></a>解题方法（O(logn)的方法明天更新）</h2><p>解法称之为虫取法，其实就是双指针。其实看到让连续子数组满足一定条件的很多都用了双指针，比如<a href="https://leetcode.cn/problems/subarray-product-less-than-k/">713. 乘积小于 K 的子数组</a></p>
<p>时间复杂度是O(N)，空间复杂度是O(1)。</p>
<p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/solutions/2771847/209-chang-du-zui-xiao-de-zi-shu-zu-by-jo-k9a8">https://leetcode.cn/problems/minimum-size-subarray-sum/solutions/2771847/209-chang-du-zui-xiao-de-zi-shu-zu-by-jo-k9a8</a></p>
<h2 id="相关题目推荐（明天看）"><a href="#相关题目推荐（明天看）" class="headerlink" title="相关题目推荐（明天看）"></a>相关题目推荐（明天看）</h2><ul>
<li><a href="https://leetcode.cn/problems/fruit-into-baskets/">904.水果成篮(opens new window)</a></li>
<li><a href="https://leetcode.cn/problems/minimum-window-substring/">76.最小覆盖子串(opens new window)</a></li>
</ul>
<h2 id="滑动窗口模板"><a href="#滑动窗口模板" class="headerlink" title="滑动窗口模板"></a>滑动窗口模板</h2><p>转载自：作者： 负雪明烛 id： fuxuemingzhu 个人博客： <a href="http://fuxuemingzhu.cn/">http://fuxuemingzhu.cn/</a></p>
<p><a href="https://leetcode.cn/problems/subarray-product-less-than-k/">713. 乘积小于 K 的子数组</a>负雪明烛 大佬写的题解</p>
<p><a href="https://fuxuemingzhu.cn/leetcode/713.html#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3">https://fuxuemingzhu.cn/leetcode/713.html#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3</a></p>
<p>《挑战程序设计竞赛》这本书中把<strong>滑动窗口</strong>叫做「尺取法」，我觉得非常生动形象。因为<strong>滑动窗口</strong>的两个指针移动的过程和虫子爬动的过程非常像：<strong>前脚不动，把后脚移动过来；后脚不动，把前脚向前移动</strong>。</p>
<p>我分享一个<strong>滑动窗口的模板</strong>，能解决大多数的<strong>滑动窗口</strong>问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findSubArray</span>(<span class="params">nums</span>):</span><br><span class="line">    N = <span class="built_in">len</span>(nums) <span class="comment"># 数组/字符串长度</span></span><br><span class="line">    left, right = <span class="number">0</span>, <span class="number">0</span> <span class="comment"># 双指针，表示当前遍历的区间[left, right]，闭区间</span></span><br><span class="line">    sums = <span class="number">0</span> <span class="comment"># 用于统计 子数组/子区间 是否有效，根据题目可能会改成求和/计数/乘积</span></span><br><span class="line">    res = <span class="number">0</span> <span class="comment"># 保存最大的满足题目要求的 子数组/子串 长度</span></span><br><span class="line">    <span class="keyword">while</span> right &lt; N: <span class="comment"># 当右边的指针没有搜索到 数组/字符串 的结尾</span></span><br><span class="line">        sums += nums[right] <span class="comment"># 增加当前右边指针的数字/字符的求和/计数</span></span><br><span class="line">        <span class="keyword">while</span> 区间[left, right]不符合题意：<span class="comment"># 此时需要一直移动左指针，直至找到一个符合题意的区间</span></span><br><span class="line">            sums -= nums[left] <span class="comment"># 移动左指针前需要从counter中减少left位置字符的求和/计数</span></span><br><span class="line">            left += <span class="number">1</span> <span class="comment"># 真正的移动左指针，注意不能跟上面一行代码写反</span></span><br><span class="line">        <span class="comment"># 到 while 结束时，我们找到了一个符合题意要求的 子数组/子串</span></span><br><span class="line">        res = <span class="built_in">max</span>(res, right - left + <span class="number">1</span>) <span class="comment"># 需要更新结果</span></span><br><span class="line">        right += <span class="number">1</span> <span class="comment"># 移动右指针，去探索新的区间</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>滑动窗口中用到了左右两个指针，它们移动的思路是：<strong>以右指针作为驱动，拖着左指针向前走。右指针每次只移动一步，而左指针在内部 while 循环中每次可能移动多步。右指针是主动前移，探索未知的新区域；左指针是被迫移动，负责寻找满足题意的区间。</strong></p>
<p>模板的整体思想是：</p>
<ol>
<li>定义两个指针 <code>left</code> 和 <code>right</code> 分别指向区间的开头和结尾，注意是闭区间；定义 <code>sums</code> 用来统计该区间内的各个字符出现次数；</li>
<li>第一重 <code>while</code> 循环是为了判断 <code>right</code> 指针的位置是否超出了数组边界；当 <code>right</code> 每次到了新位置，需要增加 <code>right</code> 指针的求和&#x2F;计数；</li>
<li>第二重 <code>while</code> 循环是让 <code>left</code> 指针向右移动到 <code>[left, right]</code> 区间符合题意的位置；当 <code>left</code> 每次移动到了新位置，需要减少 <code>left</code> 指针的求和&#x2F;计数；</li>
<li>在第二重 <code>while</code> 循环之后，成功找到了一个符合题意的 <code>[left, right]</code> 区间，题目要求最大的区间长度，因此更新 <code>res</code> 为 <code>max(res, 当前区间的长度)</code> 。</li>
<li><code>right</code> 指针每次向右移动一步，开始探索新的区间。</li>
</ol>
<p>模板中的 <code>sums</code> 需要根据题目意思具体去修改，本题是求和题目因此把<code>sums</code> 定义成整数用于求和；如果是计数题目，就需要改成字典用于计数。当左右指针发生变化的时候，都需要更新 <code>sums</code> 。</p>
<p>另外一个需要根据题目去修改的是内层 <code>while</code> 循环的判断条件，即： <strong>区间 [left,right] 不符合题意</strong> 。</p>
<p>对于本题而言，就是该区间内的元素的乘积 大于等于了 <em>k</em> 。</p>
<h3 id="本人leetcode713的题解"><a href="#本人leetcode713的题解" class="headerlink" title="本人leetcode713的题解"></a>本人leetcode713的题解</h3><p><a href="https://leetcode.cn/problems/subarray-product-less-than-k/solutions/2771828/713-cheng-ji-xiao-yu-k-de-zi-shu-zu-by-j-xqi7">https://leetcode.cn/problems/subarray-product-less-than-k/solutions/2771828/713-cheng-ji-xiao-yu-k-de-zi-shu-zu-by-j-xqi7</a></p>
<p>符合题目要求的结果增加的是此窗口内的子数组数量，也就是r - l + 1。就是要加上right往后移动一位导致多出来一个元素与前面的数组的元素组成的新的子数组的数量刚刚好就是left right区间的长度</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span> ,right = <span class="number">0</span>;<span class="comment">//闭区间</span></span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> N = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> products = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; N)&#123;</span><br><span class="line">            products *= nums[right];</span><br><span class="line">            <span class="keyword">while</span>(products &gt;= k &amp;&amp; left &lt;= right)&#123;<span class="comment">//不符合的条件</span></span><br><span class="line">                products /= nums[left];</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += right - left + <span class="number">1</span>;<span class="comment">//符合题目要求的结果增加的是此窗口内的子数组数量，也就是r - l + 1。就是要加上right往后移动一位导致多出来一个元素与前面的数组的元素组成的新的子数组的数量刚刚好就是left right区间的长度</span></span><br><span class="line">            right ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></h1><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/solutions/2770510/59-luo-xuan-ju-zhen-ii-by-joker-ek4-lmw4">https://leetcode.cn/problems/spiral-matrix-ii/solutions/2770510/59-luo-xuan-ju-zhen-ii-by-joker-ek4-lmw4</a></p>
<p>第二种方法明天看</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetcodeHot100</title>
    <url>/2024/05/09/LeetcodeHot100/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LeetcodeHot100"><a href="#LeetcodeHot100" class="headerlink" title="LeetcodeHot100"></a>LeetcodeHot100</h1><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表</a></h3><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/solutions/2770777/160-xiang-jiao-lian-biao-by-joker-ek4-69ns">https://leetcode.cn/problems/intersection-of-two-linked-lists/solutions/2770777/160-xiang-jiao-lian-biao-by-joker-ek4-69ns</a></p>
<h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h3><p><a href="https://leetcode.cn/problems/reverse-linked-list/solutions/2771061/206-fan-zhuan-lian-biao-by-joker-ek4-lm6d">https://leetcode.cn/problems/reverse-linked-list/solutions/2771061/206-fan-zhuan-lian-biao-by-joker-ek4-lm6d</a></p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h3><p><a href="https://leetcode.cn/problems/valid-parentheses/solutions/2771702/20-you-xiao-de-gua-hao-by-joker-ek4-zsmo">https://leetcode.cn/problems/valid-parentheses/solutions/2771702/20-you-xiao-de-gua-hao-by-joker-ek4-zsmo</a></p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营day01-704-二分查找、27-移除元素</title>
    <url>/2024/05/08/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5day01-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E3%80%8127-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h1><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。<br><strong>示例 1:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ol>
<li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li>
<li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li>
<li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li>
</ol>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>参考自己的这篇博客</p>
<p><a href="https://bradtorres.github.io/2024/05/02/CDay15C-49/">https://bradtorres.github.io/2024/05/02/CDay15C-49/</a></p>
<p><a href="https://leetcode.cn/problems/binary-search/solutions/2770440/704-er-fen-cha-zhao-by-joker-ek4-84yy">https://leetcode.cn/problems/binary-search/solutions/2770440/704-er-fen-cha-zhao-by-joker-ek4-84yy</a></p>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> middle = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[middle])</span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[middle])</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="相关题目推荐"><a href="#相关题目推荐" class="headerlink" title="相关题目推荐"></a>相关题目推荐</h2><ul>
<li><p><a href="https://leetcode.cn/problems/search-insert-position/description/">35.搜索插入位置(opens new window)</a></p>
<p><a href="https://leetcode.cn/problems/search-insert-position/solutions/2770475/35-sou-suo-cha-ru-wei-zhi-by-joker-ek4-7qzx">https://leetcode.cn/problems/search-insert-position/solutions/2770475/35-sou-suo-cha-ru-wei-zhi-by-joker-ek4-7qzx</a></p>
</li>
<li><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/">34.在排序数组中查找元素的第一个和最后一个位置(opens new window)</a></p>
<p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/solutions/2770478/34-zai-pai-xu-shu-zu-zhong-cha-zhao-yuan-uwzg">https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/solutions/2770478/34-zai-pai-xu-shu-zu-zhong-cha-zhao-yuan-uwzg</a></p>
</li>
<li><p><a href="https://leetcode.cn/problems/sqrtx/">69.x 的平方根(opens new window)</a></p>
<p><a href="https://leetcode.cn/problems/sqrtx/solutions/2770483/69-x-de-ping-fang-gen-by-joker-ek4-jlrf">https://leetcode.cn/problems/sqrtx/solutions/2770483/69-x-de-ping-fang-gen-by-joker-ek4-jlrf</a></p>
</li>
<li><p><a href="https://leetcode.cn/problems/valid-perfect-square/">367.有效的完全平方数(opens new window)</a></p>
<p><a href="https://leetcode.cn/problems/valid-perfect-square/solutions/2769657/367-you-xiao-de-wan-quan-ping-fang-shu-b-aqew">https://leetcode.cn/problems/valid-perfect-square/solutions/2769657/367-you-xiao-de-wan-quan-ping-fang-shu-b-aqew</a></p>
</li>
</ul>
<h1 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h1><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong>。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<p><strong>说明:</strong></p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>示例 1：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,3,0,4]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 50</code></li>
<li><code>0 &lt;= val &lt;= 100</code></li>
</ul>
<h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>参考自己的这篇博客</p>
<p><a href="https://leetcode.cn/problems/remove-element/solutions/2769826/27-yi-chu-yuan-su-by-joker-ek4-1wx5">https://leetcode.cn/problems/remove-element/solutions/2769826/27-yi-chu-yuan-su-by-joker-ek4-1wx5</a></p>
<h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双指针，快慢指针。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    犯下的低级错误，在main函数里面调用了两次removeElement(nums, 2)</span></span><br><span class="line"><span class="comment">    导致第一次j是6第二次j变成9了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != val)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[j] = nums[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="相关题目推荐-1"><a href="#相关题目推荐-1" class="headerlink" title="相关题目推荐"></a>相关题目推荐</h2><ul>
<li><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26.删除排序数组中的重复项(opens new window)</a></p>
<p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/solutions/2769874/6-shan-chu-you-xu-shu-zu-zhong-de-zhong-qtmor">https://leetcode.cn/problems/remove-duplicates-from-sorted-array/solutions/2769874/6-shan-chu-you-xu-shu-zu-zhong-de-zhong-qtmor</a></p>
</li>
<li><p><a href="https://leetcode.cn/problems/move-zeroes/">283.移动零(opens new window)</a></p>
<p><a href="https://leetcode.cn/problems/move-zeroes/solutions/2769892/283-yi-dong-ling-by-joker-ek4-4jq3">https://leetcode.cn/problems/move-zeroes/solutions/2769892/283-yi-dong-ling-by-joker-ek4-4jq3</a></p>
</li>
<li><p><a href="https://leetcode.cn/problems/backspace-string-compare/">844.比较含退格的字符串(opens new window)</a></p>
<p><a href="https://leetcode.cn/problems/backspace-string-compare/solutions/2769928/844-bi-jiao-han-tui-ge-de-zi-fu-chuan-by-vjv8">https://leetcode.cn/problems/backspace-string-compare/solutions/2769928/844-bi-jiao-han-tui-ge-de-zi-fu-chuan-by-vjv8</a></p>
</li>
<li><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977.有序数组的平方(opens new window)</a></p>
<p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/solutions/2769976/977-you-xu-shu-zu-de-ping-fang-by-joker-y0b8q">https://leetcode.cn/problems/squares-of-a-sorted-array/solutions/2769976/977-you-xu-shu-zu-de-ping-fang-by-joker-y0b8q</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>代码随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>CDay10C++49</title>
    <url>/2024/05/06/CDay10C-49/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h1><p>工作中，最常用的数据结构有：数组，链表，栈，队列，哈希表和二叉搜索树。数组我们已经很熟悉了，因此不再赘述。接下来我们分别讨论下链表、栈、队列、哈希表和二叉搜索树。</p>
<p>网站推荐：数据结构与算法可视化<a href="https://www.cs.usfca.edu/~galles/visualization/">Data Structure Visualization (usfca.edu)</a></p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表：是用”链”将<strong>结点</strong>串联起来的数据结构。  </p>
<p><strong>结点</strong>：是一个对象(在C语言中就是一个结构体)。该对象中有数据域和指针域，数据域顾名思义存放的就是数据，指针域存放的是结点(可以是另一个结点，也可以是自身)的地址  </p>
<h3 id="链表的分类："><a href="#链表的分类：" class="headerlink" title="链表的分类："></a>链表的分类：</h3><p>单向链表</p>
<p>单向循环链表</p>
<p>双向链表</p>
<p>双向循环链表</p>
<p>循环链表我们用的一般比较少，但是当处理的数据具有环形结构时，就特别适合用循环链表，比如约瑟夫环问题。接下来我们讨论下最常用<strong>单向链表和双向链表</strong>。  </p>
<h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ol>
<li><p>添加 (在某个结点<strong>后面</strong>添加) O(1)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">newNode-&gt;next = curr-&gt;next;</span><br><span class="line">curr-&gt;next = newNode;</span><br></pre></td></tr></table></figure>


</li>
<li><p>删除 (在某个结点<strong>后面</strong>删除) O(1)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node* removed = curr-&gt;next;</span><br><span class="line">curr-&gt;next = curr-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(removed);</span><br></pre></td></tr></table></figure>


</li>
<li><p>查找</p>
<p>a. 根据索引查找结点 O(n)</p>
<p>b. 查找链表中与特定值相等的结点</p>
<p>1)大小有序 O(n)</p>
<p>2)大小无序 O(n)</p>
</li>
</ol>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p><code>List.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//List.h</span></span><br><span class="line"><span class="comment">// 定义结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="type">char</span> val;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放整条链表的信息</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	Node* head;</span><br><span class="line">	Node* tail;</span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line">&#125;List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// API</span></span><br><span class="line">List* <span class="title function_">create_list</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy_list</span><span class="params">(List* <span class="built_in">list</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_before_head</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">char</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add_behind_tail</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">char</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add_node</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">int</span> idx, <span class="type">char</span> val)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_node</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">int</span> val)</span>;</span><br><span class="line"></span><br><span class="line">Node* <span class="title function_">find_by_index</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">int</span> idx)</span>;</span><br></pre></td></tr></table></figure>

<p><code>List.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;List.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// API</span></span><br><span class="line"><span class="comment">//不带dummy node的链表</span></span><br><span class="line">List* <span class="title function_">create_list</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">/*List* list = malloc(sizeof(List));</span></span><br><span class="line"><span class="comment">	if (!list) &#123;</span></span><br><span class="line"><span class="comment">		return NULL;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	list-&gt;head = NULL;</span></span><br><span class="line"><span class="comment">	list-&gt;tail = NULL;</span></span><br><span class="line"><span class="comment">	list-&gt;size = 0;*/</span></span><br><span class="line">	<span class="comment">//创建空链表</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(List));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy_list</span><span class="params">(List* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">	<span class="comment">//释放节点</span></span><br><span class="line">	Node* curr = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">	<span class="keyword">while</span> (curr)</span><br><span class="line">	&#123;</span><br><span class="line">		Node* nodeNext = curr-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(curr);</span><br><span class="line">		curr = nodeNext;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//释放List结构体</span></span><br><span class="line">	<span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_before_head</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">char</span> val)</span> &#123;</span><br><span class="line">	<span class="comment">//创建结点</span></span><br><span class="line">	Node* newNode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	<span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc failed in add_before_head\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//初始化节点</span></span><br><span class="line">	newNode-&gt;val = val;</span><br><span class="line">	<span class="comment">//插入节点</span></span><br><span class="line">	newNode-&gt;next = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">	<span class="comment">//更改List结构体的信息</span></span><br><span class="line">	<span class="built_in">list</span>-&gt;head = newNode;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;size == <span class="number">0</span>)</span><br><span class="line">		<span class="built_in">list</span>-&gt;tail = newNode;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">list</span>-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_behind_tail</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">char</span> val)</span> &#123;</span><br><span class="line">	<span class="comment">//创建结点</span></span><br><span class="line">	Node* newNode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	<span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc failed in add_behind_tail\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//初始化节点</span></span><br><span class="line">	newNode-&gt;val = val;</span><br><span class="line">	newNode-&gt;next = <span class="literal">NULL</span>;<span class="comment">//尾插法的新节点的指针是NULL基本是固定的。可以先赋值</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//插入节点</span></span><br><span class="line">	<span class="comment">//空链表的时候</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;tail == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">list</span>-&gt;tail = newNode;</span><br><span class="line">		<span class="built_in">list</span>-&gt;head = newNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">list</span>-&gt;tail-&gt;next = newNode;</span><br><span class="line">		<span class="built_in">list</span>-&gt;tail = newNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">list</span>-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add_node</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">int</span> idx, <span class="type">char</span> val)</span> &#123;</span><br><span class="line">	<span class="comment">//参数校验</span></span><br><span class="line">	<span class="keyword">if</span> (idx &lt; <span class="number">0</span> || idx &gt; <span class="built_in">list</span>-&gt;size) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Invalid arguments: idx = %d, size = %d\n&quot;</span>, idx, <span class="built_in">list</span>-&gt;size);</span><br><span class="line">		<span class="comment">//exit(1);</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//要分插入位置为第一个和最后一个吗</span></span><br><span class="line">	<span class="comment">//好像可以调用函数，改一下list就行了</span></span><br><span class="line">	<span class="keyword">if</span> (idx == <span class="number">0</span>) &#123;</span><br><span class="line">		add_before_head(<span class="built_in">list</span>, val);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (idx == <span class="built_in">list</span>-&gt;size) &#123;</span><br><span class="line">		add_behind_tail(<span class="built_in">list</span>, val);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//查找索引为idx - 1的节点</span></span><br><span class="line">	<span class="comment">//curr是要插入位置的前一个节点，为了保留地址信息</span></span><br><span class="line">		Node* curr = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">		idx--;</span><br><span class="line">		<span class="keyword">while</span> (idx--) &#123;</span><br><span class="line">			curr = curr-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//比较好的做法就是将curr和i对应起来</span></span><br><span class="line">		<span class="comment">/*for (int i = 0; i &lt; idx - 1; i++)</span></span><br><span class="line"><span class="comment">			curr = curr-&gt;next;*/</span></span><br><span class="line">		<span class="comment">//i = idx - 1</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//创建结点</span></span><br><span class="line">		Node* newNode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">		<span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;malloc failed in add_node\n&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//初始化节点</span></span><br><span class="line">		newNode-&gt;val = val;</span><br><span class="line"></span><br><span class="line">		newNode-&gt;next = curr-&gt;next;</span><br><span class="line">		curr-&gt;next = newNode;</span><br><span class="line">		<span class="comment">//更新List结构体</span></span><br><span class="line">		<span class="built_in">list</span>-&gt;size++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除链表中第一个与value想等的节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_node</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">char</span> val)</span> &#123;</span><br><span class="line">	<span class="comment">//查找第一个与value想等的节点的前一个节点</span></span><br><span class="line">	<span class="comment">/*Node* node = list-&gt;head;</span></span><br><span class="line"><span class="comment">	if (node-&gt;val == val)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		list-&gt;head = node-&gt;next;</span></span><br><span class="line"><span class="comment">		free(node);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	else &#123;</span></span><br><span class="line"><span class="comment">		while (node-&gt;next) &#123;</span></span><br><span class="line"><span class="comment">			if (node-&gt;next-&gt;val == val)break;</span></span><br><span class="line"><span class="comment">			node = node-&gt;next;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		if (!node-&gt;next)</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			printf(&quot;invalid arugment: val is not exist!\n&quot;);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		else &#123;</span></span><br><span class="line"><span class="comment">			Node* tmp = node-&gt;next;</span></span><br><span class="line"><span class="comment">			node-&gt;next = node-&gt;next-&gt;next;</span></span><br><span class="line"><span class="comment">			free(tmp);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="comment">//查找第一个与value想等的节点的前一个节点</span></span><br><span class="line">	Node* pre = <span class="literal">NULL</span>;</span><br><span class="line">	Node* curr = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">	<span class="keyword">while</span> (curr)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (curr-&gt;val == val) &#123;</span><br><span class="line">			<span class="keyword">if</span> (pre == <span class="literal">NULL</span>) &#123;			<span class="comment">//curr是链表第一个结点</span></span><br><span class="line">				<span class="built_in">list</span>-&gt;head = curr-&gt;next;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;size == <span class="number">1</span>)  </span><br><span class="line">					<span class="built_in">list</span>-&gt;tail == <span class="literal">NULL</span>; </span><br><span class="line">				<span class="built_in">free</span>(curr);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;			<span class="comment">//curr是链表不是第一个借点</span></span><br><span class="line">				pre-&gt;next = curr-&gt;next;</span><br><span class="line">				<span class="keyword">if</span> (curr-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">					<span class="built_in">list</span>-&gt;tail = pre;</span><br><span class="line">				<span class="built_in">free</span>(curr);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">list</span>-&gt;size--;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">			pre = curr;</span><br><span class="line">			curr = curr-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//curr == NULL</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;invalid argument: val = %c\n&quot;</span>, val);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node* <span class="title function_">find_by_index</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">int</span> idx)</span> &#123;</span><br><span class="line">	<span class="comment">//参数校验</span></span><br><span class="line">	<span class="keyword">if</span> (idx &lt; <span class="number">0</span> || idx &gt;= <span class="built_in">list</span>-&gt;size) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Invalid arguments: idx = %d, size = %d\n&quot;</span>, idx, <span class="built_in">list</span>-&gt;size);</span><br><span class="line">		<span class="comment">//exit(1);</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Node* curr = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; idx; i++)</span><br><span class="line">			curr = curr-&gt;next;</span><br><span class="line">			<span class="comment">//i == idx</span></span><br><span class="line">	<span class="keyword">return</span> curr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在链表中查找第一个与value想等的节点</span></span><br><span class="line">Node* <span class="title function_">search_for_value</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">	Node* curr = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">	<span class="keyword">while</span> (curr) &#123;</span><br><span class="line">		<span class="keyword">if</span> (curr-&gt;val == val) <span class="keyword">return</span> curr;</span><br><span class="line">		curr = curr-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;List.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	List* <span class="built_in">list</span> = create_list();<span class="comment">//创建空链表</span></span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">list</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: create_list failed!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="string">&#x27;a&#x27;</span>; i &lt; <span class="string">&#x27;a&#x27;</span> + <span class="number">2</span>; i++)</span><br><span class="line">		add_behind_tail(<span class="built_in">list</span>, i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="string">&#x27;b&#x27;</span>; i &gt; <span class="string">&#x27;b&#x27;</span> - <span class="number">2</span>; i--)</span><br><span class="line">		add_before_head(<span class="built_in">list</span>, i);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*for (int i = &#x27;1&#x27;; i &lt; &#x27;1&#x27; + 10; i += 2)</span></span><br><span class="line"><span class="comment">		add_node(list, i - &#x27;1&#x27;, i);*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*delete_node(list, &#x27;a&#x27;);</span></span><br><span class="line"><span class="comment">	delete_node(list, &#x27;a&#x27;);</span></span><br><span class="line"><span class="comment">	delete_node(list, &#x27;x&#x27;);*/</span></span><br><span class="line"></span><br><span class="line">	Node* node = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">	<span class="keyword">while</span> (node) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, node-&gt;val);</span><br><span class="line">		node = node-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*Node* nodeByIndex = find_by_index(list, 2);</span></span><br><span class="line"><span class="comment">	printf(&quot;%c &quot;, nodeByIndex-&gt;val);*/</span></span><br><span class="line"></span><br><span class="line">	Node* node1 = search_for_value(<span class="built_in">list</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">	<span class="comment">/*printf(&quot;%c &quot;, node1-&gt;val);*/</span></span><br><span class="line"></span><br><span class="line">	Node* node2 = search_for_value(<span class="built_in">list</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;size = %d\n&quot;</span>, <span class="built_in">list</span>-&gt;size);</span><br><span class="line">	destroy_list(<span class="built_in">list</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>基本操作我们很容易验证，单向链表的基本操作，双向链表也是支持的，并且时间复杂度也是一样。但是在工程实践上，我们往往更倾向于使用双向链表，而不是单链表，比如C++ 中的 list，Java 中的 LinkedList 底层的数据结构都是双向链表。</p>
<p>原因源自于双向链表的独特魅力——它有一条指向前驱结点的链接，使得双向链表可以高效地完成一些单链表处理起来很麻烦的问题。</p>
<ol>
<li><p>添加 (在某个结点前面添加)</p>
</li>
<li><p>删除 (删除当前结点)</p>
<ol start="3">
<li><p>查找</p>
<p>a. 根据索引查找结点 O(n), 平均只需遍历 n&#x2F;4 各结点。</p>
<p>b. 查找链表中与特定值相等的结点</p>
<ol>
<li>大小有序， 保留上次查找结点的地址<ol start="2">
<li>大小无序 O(n), 与单链表一致</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p><strong>总结：虽然双向链表更占内存空间，但是它某些操作的性能是优于单链表的。这就是典型的空间换时间的思想。</strong></p>
<h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><p>假设结点定义如下，请完成下列题目。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br></pre></td></tr></table></figure>

<h4 id="求链表中间结点的值。"><a href="#求链表中间结点的值。" class="headerlink" title="求链表中间结点的值。"></a>求链表中间结点的值。</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">middleElement</span><span class="params">(Node* <span class="built_in">list</span>)</span>;</span><br><span class="line">输入: <span class="number">1</span> --&gt; <span class="number">2</span> --&gt; <span class="number">3</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">输入: <span class="number">1</span> --&gt; <span class="number">2</span> --&gt; <span class="number">3</span> --&gt; <span class="number">4</span></span><br><span class="line">输出: <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>思路1:</p>
<p>遍历链表，求出链表的长度n</p>
<p>找出索引为n &#x2F; 2的节点</p>
<p>思路2：快慢指针</p>
<p>什么时候快指针到达了末尾？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fast == <span class="literal">NULL</span> || fast-&gt;next == <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>

<p>千万不能写成，如下。这样写不符合短路原则，<code>fast</code>为<code>NULL</code>时候，不能写成<code>fast-&gt;next == NULL</code> ，对空指针进行解引用会报错。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fast-&gt;next == <span class="literal">NULL</span> || fast == <span class="literal">NULL</span> </span><br></pre></td></tr></table></figure>



<h4 id="判断单链表是否有环"><a href="#判断单链表是否有环" class="headerlink" title="判断单链表是否有环?"></a>判断单链表是否有环?</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">hasCircle</span><span class="params">(Node* <span class="built_in">list</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>思路1：迷雾森林</p>
<p>如何做标记？  <strong>把遍历过的的链表放进集合里面</strong>（图那一张就经常这样，遍历过的就放入集合里面）</p>
<p>时间：如果是数组，那就是O(n * n)</p>
<p>如果该集合的查找时间复杂度为O(1)（例如哈希表）,那么整体的时间复杂度就退化为O(n)</p>
<p>所以依赖于集合的查找性能，最好情况为O(n) 	</p>
<p>空间：O(n)</p>
<p>思路2：快慢指针</p>
<p>无环的情况：快指针肯定先到链表末尾</p>
<p>有环的情况：快指针和慢指针再一次相遇。相遇的点肯定不是末尾</p>
<p>时间复杂度：O(n)</p>
<p>空间复杂度：只有两个指针变量，是O(1)（如果要开n个指针变量，那才是O(n),n是链表的结点个数）</p>
<h4 id="反转单链表"><a href="#反转单链表" class="headerlink" title="反转单链表"></a>反转单链表</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node* <span class="title function_">reverse</span><span class="params">(Node* <span class="built_in">list</span>)</span>;</span><br><span class="line">输入: <span class="number">1</span> --&gt; <span class="number">2</span> --&gt; <span class="number">3</span></span><br><span class="line">输出: <span class="number">3</span> --&gt; <span class="number">2</span> --&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>反转链表都是不要创建额外节点的，不需要额外内存空间，直接在原来链表上进行反转</p>
<p>思路1：头插法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node* prev = <span class="literal">NULL</span>;</span><br><span class="line">Node* curr = <span class="built_in">list</span>;</span><br><span class="line"><span class="keyword">while</span>(curr)&#123;</span><br><span class="line">	<span class="comment">//保留下一个节点</span></span><br><span class="line">		Node* currNext = curr-&gt;next;</span><br><span class="line">	<span class="comment">//反转curr借点</span></span><br><span class="line">	curr-&gt;next = prev;</span><br><span class="line">	<span class="comment">//跟新prev，curr</span></span><br><span class="line">	prev = curr;</span><br><span class="line">	curr = currNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// curr == NULL的时候循环结束</span></span><br><span class="line"><span class="built_in">list</span> = prev;<span class="comment">//prev这个时候指向第一个节点</span></span><br></pre></td></tr></table></figure>

<p>时间复杂度：O(n)</p>
<p>空间复杂度：O(1)</p>
<h5 id="迭代实现"><a href="#迭代实现" class="headerlink" title="迭代实现"></a>迭代实现</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//迭代</span></span><br><span class="line">        ListNode* prev = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">            ListNode* currNext = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = currNext;</span><br><span class="line">        &#125;</span><br><span class="line">        head = prev;</span><br><span class="line">        <span class="keyword">return</span> head; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>思路2：<strong>递归</strong></p>
<p>类似于<strong>数学归纳法</strong>：假设我已经实现了反转n - 1个结点（成立），那么如果在已经实现反转n -  1个节点的基础上，反转 n 个节点</p>
<p><strong>边界条件</strong>:只有一个借点或者是空链表（类似于数学归纳法的归纳奠基，k &#x3D; 0成立，k &#x3D; 1成立。在假设k &#x3D; n - 1成立，求证明k &#x3D; n也成立</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> == <span class="literal">NULL</span> || <span class="built_in">list</span>-&gt;next == <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>

<p><strong>递归公式</strong>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node* head = reverse(<span class="built_in">list</span>-&gt;next);<span class="comment">//相当于假设k = n - 1成立，接下来只要证明k = n也成立</span></span><br><span class="line"><span class="built_in">list</span>-&gt;next-&gt;next = <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">list</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>时间复杂度：O(n)</p>
<p>空间复杂度：O(n)</p>
<h5 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode* <span class="title function_">reverseList</span><span class="params">(ListNode* head)</span> &#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="comment">//边界条件</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">//递归公式</span></span><br><span class="line">        ListNode* headnew = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> headnew;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="合并两条有序的单向链表，使得合并后的链表也是有序的-要求-不能额外申请堆内存空间-。"><a href="#合并两条有序的单向链表，使得合并后的链表也是有序的-要求-不能额外申请堆内存空间-。" class="headerlink" title="合并两条有序的单向链表，使得合并后的链表也是有序的 (要求: 不能额外申请堆内存空间)。"></a>合并两条有序的单向链表，使得合并后的链表也是有序的 (要求: <strong>不能额外申请堆内存空间</strong>)。</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node* <span class="title function_">mergeTwoLists</span><span class="params">(Node* list1, Node* list2)</span>;</span><br><span class="line">输入：<span class="number">1</span> --&gt; <span class="number">3</span> --&gt; <span class="number">5</span></span><br><span class="line"><span class="number">2</span> --&gt; <span class="number">4</span> --&gt; <span class="number">6</span></span><br><span class="line">输出：<span class="number">1</span> --&gt; <span class="number">2</span> --&gt; <span class="number">3</span> --&gt; <span class="number">4</span> --&gt; <span class="number">5</span> --&gt; <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>虽然不能申请额外的堆内存空间，但是可以申请额外的栈内存空间</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是一种<strong>操作受限</strong>的线性结构。操作受限体现在，栈只能在一端添加和删除元素，符合**后进先出(LIFO)**的特性，如下图所示：  </p>
<p>和生活中的场景对应起来，如从桶里面拿网球羽毛球，洗碗拿碗放碗。</p>
<p><strong>操作受限往往不是坏事</strong>，往往是为了更加的安全，可以提醒程序员这是一个栈，操作是受限的。</p>
<p>单独领出来栈，可以<strong>提高代码可读性</strong>，别人脑海中就会联想到栈，栈顶，栈底。而不是联想到一个vector连续存放的动态数组</p>
<h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><ol>
<li>入栈</li>
<li>出栈</li>
<li>查看栈顶元素</li>
<li>判空</li>
</ol>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>(a) 用<strong>链表</strong>实现 (为了复习二级指针，这里我们使用二级指针来实现)</p>
<p><code>Stack.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">//Stack.h</span></span><br><span class="line"><span class="comment">//定义结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> val;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="comment">//API</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_push</span><span class="params">(Node** pstack, <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(Node** pstack)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_peek</span><span class="params">(Node* <span class="built_in">stack</span>)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">stack_empty</span><span class="params">(Node* <span class="built_in">stack</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>Stack.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Stack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_push</span><span class="params">(Node** pstack, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">	<span class="comment">//相当头插法</span></span><br><span class="line">	Node* newNode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	<span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: failed in malloc\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	newNode-&gt;val = val;</span><br><span class="line">	newNode-&gt;next = *pstack;</span><br><span class="line">	<span class="comment">//改变stack的指向</span></span><br><span class="line">	*pstack = newNode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(Node** pstack)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (stack_empty(*pstack)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: stack is empty\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//保留要去除节点的地址和返回值，方便free和return val；</span></span><br><span class="line">	Node* removedNode = *pstack;</span><br><span class="line">		<span class="type">int</span> removedVal = removedNode-&gt;val;</span><br><span class="line"></span><br><span class="line">	*pstack = removedNode-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(removedNode);</span><br><span class="line">		<span class="keyword">return</span> removedVal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_peek</span><span class="params">(Node* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (stack_empty(<span class="built_in">stack</span>)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: stack is empty\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">stack</span>-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">stack_empty</span><span class="params">(Node* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">stack</span> == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	Node* <span class="built_in">stack</span> = <span class="literal">NULL</span>;</span><br><span class="line">	stack_push(&amp;<span class="built_in">stack</span>, <span class="number">1</span>);</span><br><span class="line">	stack_push(&amp;<span class="built_in">stack</span>, <span class="number">2</span>);</span><br><span class="line">	stack_push(&amp;<span class="built_in">stack</span>, <span class="number">3</span>);</span><br><span class="line">	stack_push(&amp;<span class="built_in">stack</span>, <span class="number">4</span>);</span><br><span class="line">	<span class="comment">//遍历栈</span></span><br><span class="line">	<span class="keyword">while</span> (!stack_empty(<span class="built_in">stack</span>)) &#123;</span><br><span class="line">		<span class="type">int</span> val = stack_peek(<span class="built_in">stack</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, val);</span><br><span class="line">		stack_pop(&amp;<span class="built_in">stack</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, stack_empty(<span class="built_in">stack</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(b) 用<strong>数组</strong>实现 (作业)  </p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>栈的应用场景是多种多样的：</p>
<p>事实上，只要有<strong>后进先出LIFO的</strong>特性，都可以联想到栈</p>
<p>（这里贴上leetcode对应的题目）</p>
<p>(1) 函数调用栈</p>
<p>(2) 符号匹配问题</p>
<p>括号匹配问题泛化一下就是符号匹配问题。例如a,A进行匹配</p>
<p>然后符号匹配问题一般使用括号去解决这个问题</p>
<p>左括号：将对应的右括号入栈</p>
<p>右括号：右括号直接出栈</p>
<p>遇到的符号不匹配那么就说明给的符号序列是不匹配 的</p>
<p>(3) 表达式求值</p>
<p>(4) 深度优先搜索(DFS)</p>
<p>(5) …</p>
<p>上面的没有做完，显然这里应该和链表一样填上很多题目d</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是另一种操作受限的线性结构。操作受限体现在，队列只能在一端添加元素，在另一端删除元素，符合**先进先出(FIFO)**的特性  </p>
<h3 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h3><ol>
<li>入队列 2. 出队列 3. 查看队头元素 4. 判空</li>
</ol>
<p>实现 </p>
<p>(a) 用链表实现 (作业) </p>
<p>(b) 用数组实现</p>
<p>一般都是用数组实现，性能更高</p>
<p>队列的设计1</p>
<p>如果是一般的数组来实现，把队头固定了，只有rear没有front 。</p>
<p>,这个时候，出队列就是性能的瓶颈 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> 入队列:`elements[rear++] = val; <span class="built_in">O</span>(<span class="number">1</span>)`</span><br><span class="line"></span><br><span class="line">**出队列:` <span class="built_in">O</span>(n)`**</span><br><span class="line"></span><br><span class="line">peek:<span class="built_in">O</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">判空： `rear == <span class="number">0</span>`</span><br><span class="line"></span><br><span class="line">判满：`rear == N</span><br></pre></td></tr></table></figure>

<p>队列的设计2</p>
<p>有rear也有front 。但是存在浪费内存空间的问题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> 入队列:`elements[rear++] = val; <span class="built_in">O</span>(<span class="number">1</span>)`</span><br><span class="line"></span><br><span class="line">**出队列:` <span class="built_in">O</span>(<span class="number">1</span>)`**</span><br><span class="line"></span><br><span class="line">peek:<span class="built_in">O</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">判空： `rear == front`</span><br><span class="line"></span><br><span class="line">判满：`rear == N</span><br></pre></td></tr></table></figure>

<p>队列的设计2（也是最好最终的设计，循环队列）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> 入队列:elements[rear] = val;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % N;</span><br><span class="line"> <span class="built_in">O</span>(<span class="number">1</span>)</span><br><span class="line">出队列:front = (front + <span class="number">1</span>) % N;</span><br><span class="line"><span class="built_in">O</span>(<span class="number">1</span>)</span><br><span class="line">peek:<span class="built_in">O</span>(<span class="number">1</span>)</span><br><span class="line">判空： rear == front</span><br><span class="line">判满：rear == front</span><br></pre></td></tr></table></figure>

<p>如何区分空和满</p>
<p>如果人为有一个位置不存元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">判空： rear == front</span><br><span class="line">判满： (rear + <span class="number">1</span>) % N == front</span><br></pre></td></tr></table></figure>

<p>如果添加一个size,此时N个位置，0到N-1都能填数字</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">判空： size == <span class="number">0</span></span><br><span class="line">判满： size == N</span><br></pre></td></tr></table></figure>

<h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>(a) 用链表实现 (作业) </p>
<p>(b) 用数组实现</p>
<p><code>Queue.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> elements[N];</span><br><span class="line">	<span class="type">int</span> front;</span><br><span class="line">	<span class="type">int</span> rear;</span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//API</span></span><br><span class="line">Queue* <span class="title function_">queue_create</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_destroy</span><span class="params">(Queue* q)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_push</span><span class="params">(Queue* q, <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_pop</span><span class="params">(Queue* q)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_peek</span><span class="params">(Queue* q)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">queue_empty</span><span class="params">(Queue* q)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">queue_full</span><span class="params">(Queue* q)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>Queue.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//API</span></span><br><span class="line">Queue* <span class="title function_">queue_create</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//create empty queue</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(Queue));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_destroy</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_push</span><span class="params">(Queue* q, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (queue_full(q)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: queue is full in queue_push\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	q-&gt;elements[q-&gt;rear] = val;</span><br><span class="line">	q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % N;</span><br><span class="line">	q-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_pop</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (queue_empty(q)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: queue is empty in queue_pop\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> tmp = q-&gt;elements[q-&gt;front];</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	q-&gt;front = (q-&gt;front + <span class="number">1</span>) % N;</span><br><span class="line">	q-&gt;size--;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_peek</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (queue_empty(q)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: queue is empty in queue_peek\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="keyword">return</span> q-&gt;elements[q-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">queue_empty</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> q-&gt;size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">queue_full</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> q-&gt;size == N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Queue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	Queue* q = queue_create();</span><br><span class="line">	<span class="keyword">if</span> (!q) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;calloc failed in queue_create\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf(&quot;front in queue is %d\n&quot;, queue_pop(q));</span></span><br><span class="line">	<span class="comment">//printf(&quot;front in queue is %d\n&quot;, queue_peek(q));</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		queue_push(q, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;front in queue is %d\n&quot;</span>, queue_peek(q));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;queue size is %d\n&quot;</span>, q-&gt;size);</span><br><span class="line">	<span class="comment">//printf(&quot;pop front in queue is %d\n&quot;, queue_pop(q));</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;queue size is %d\n&quot;</span>, q-&gt;size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Traverse the queue</span></span><br><span class="line">	<span class="type">int</span> i = q-&gt;front;</span><br><span class="line">	<span class="type">int</span> size = q-&gt;size;</span><br><span class="line">		<span class="keyword">while</span> (!queue_empty(q)) &#123;</span><br><span class="line">			<span class="type">int</span> val = queue_peek(q);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, val);</span><br><span class="line">			queue_pop(q);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Queue is %s\n&quot;</span>, queue_empty(q) ? <span class="string">&quot;EMPTY&quot;</span> : <span class="string">&quot;NOT EMPTY&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>应用场景</p>
<p>(1) 缓冲</p>
<p>(2) 广度优先搜索(BFS)</p>
<p>(3)</p>
<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>在现实生活中，我们经常需要存储键值对(key-value)数据，比如上面的 ‘a’:10, ‘b’:6，再比如账号:个人信息，关键字:网页等等。如果键的取值范围很小(比如上面的例子)，那么我们可以用数组存储，为每一个键绑定一个索引。</p>
<p>但是，如果键的取值范围很大，那么数组的方式就行不通了。哈希表就是被设计用来解决这样一个问题的</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>哈希表的核心设计分为两个部分：</p>
<ol>
<li><strong>哈希函数</strong>。哈希函数将 key 转换为数组中的一个索引。理想情况下不同的 key 都能转换成不同的索引值。当然这只是理想情况，所以我们还需要处理两个或者多个key 都散列到相同索引值的情况 (哈希冲突)。</li>
</ol>
<blockquote>
<p>优秀的哈希函数需要满足这些特性 (拓展)：</p>
<p>a. 运算速度快。</p>
<p>b. 尽量使键平均分布</p>
<p>c. 逆向非常困难</p>
<p>d. 对数据非常敏感</p>
<p>e. 哈希冲突的概率非常小</p>
<p>哈希函数：<strong>模拟等概率随机分布事件</strong>。</p>
</blockquote>
<p>对于实现哈希表而言，哈希函数只需要实现a, b的性质即可  </p>
<p>2.<strong>处理哈希冲突</strong>。</p>
<p>a. 开放地址法线性探测法, 平方探测法, 再散列法…（这几个都是 理论层面，一般实现都不会用。不过考研肯定是要你手动熟悉一下过程简单计算的，背一背就好了）</p>
<p>b.<strong>拉链法</strong></p>
<h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><p>这里，我们也采用常用的拉链法来解决哈希冲突，如下图所示：</p>
<p><code>Hashmap.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span>* K;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span>* V;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	K key;</span><br><span class="line">	V val;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	Node* table[N];</span><br><span class="line"></span><br><span class="line">&#125;HashMap;</span><br><span class="line"></span><br><span class="line">HashMap* <span class="title function_">hashmap_create</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashmap_destroy</span><span class="params">(HashMap* <span class="built_in">map</span>)</span>;</span><br><span class="line"></span><br><span class="line">V <span class="title function_">hashmap_put</span><span class="params">(HashMap* <span class="built_in">map</span>, K key, V val)</span>;</span><br><span class="line">V <span class="title function_">hashmap_get</span><span class="params">(HashMap* <span class="built_in">map</span>, K key)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashmap_delete</span><span class="params">(HashMap* <span class="built_in">map</span>, K key)</span>;</span><br></pre></td></tr></table></figure>

<p><code>Hashmap.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Hashmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">HashMap* <span class="title function_">hashmap_create</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//创建一个空的Hashmap</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(HashMap));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashmap_destroy</span><span class="params">(HashMap* <span class="built_in">map</span>)</span>;</span><br><span class="line"><span class="comment">// JS Hash Function: 由Justin Sobel发明的一种hash算法</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> hash = <span class="number">1315423911</span>;</span><br><span class="line">	<span class="keyword">while</span> (*str) &#123;</span><br><span class="line">		hash ^= ((hash &lt;&lt; <span class="number">5</span>) + (*str++) + (hash &gt;&gt; <span class="number">2</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (hash &amp; <span class="number">0x7FFFFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加键值对</span></span><br><span class="line"><span class="comment">// 更新键关联的值</span></span><br><span class="line">V <span class="title function_">hashmap_put</span><span class="params">(HashMap* <span class="built_in">map</span>, K key, V val)</span> &#123;</span><br><span class="line">	<span class="type">int</span> idx = hash(key) % N;</span><br><span class="line">	<span class="comment">//遍历链表，判断键是否存在</span></span><br><span class="line">	Node* curr = <span class="built_in">map</span>-&gt;table[idx];</span><br><span class="line">	<span class="keyword">while</span> (curr) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(curr-&gt;key, key) == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">//更新值，此时不用创建新节点</span></span><br><span class="line">			V oldVal = curr-&gt;val;</span><br><span class="line">			curr-&gt;val = val;</span><br><span class="line">			<span class="keyword">return</span> oldVal;</span><br><span class="line">		&#125;</span><br><span class="line">		curr = curr-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//curr  == NULL</span></span><br><span class="line">	<span class="comment">// 创建节点</span></span><br><span class="line">	Node* newNode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	<span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc failed in hashmap_put\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	newNode-&gt;key = key;</span><br><span class="line">	newNode-&gt;val = val;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//头插法插入节点</span></span><br><span class="line">	newNode-&gt;next = <span class="built_in">map</span>-&gt;table[idx];</span><br><span class="line">	<span class="built_in">map</span>-&gt;table[idx] = newNode;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">V <span class="title function_">hashmap_get</span><span class="params">(HashMap* <span class="built_in">map</span>, K key)</span> &#123;</span><br><span class="line">	<span class="type">int</span> idx = hash(key) % N;</span><br><span class="line">	<span class="comment">//遍历链表，判断键是否存在</span></span><br><span class="line">	Node* curr = <span class="built_in">map</span>-&gt;table[idx];</span><br><span class="line">	<span class="keyword">while</span> (curr) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(curr-&gt;key, key) == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">//存在</span></span><br><span class="line">			<span class="keyword">return</span> curr-&gt;val;</span><br><span class="line">		&#125;</span><br><span class="line">		curr = curr-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//curr  == NULL</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashmap_delete</span><span class="params">(HashMap* <span class="built_in">map</span>, K key)</span> &#123;</span><br><span class="line">	<span class="type">int</span> idx = hash(key) % N;</span><br><span class="line">	<span class="comment">//遍历链表，判断键是否存在</span></span><br><span class="line">	Node* curr = <span class="built_in">map</span>-&gt;table[idx];</span><br><span class="line">	Node* prev = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">while</span> (curr) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(curr-&gt;key, key) == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">//存在</span></span><br><span class="line">			<span class="comment">//如果是第一个节点</span></span><br><span class="line">			<span class="keyword">if</span> (prev == <span class="literal">NULL</span>) &#123;</span><br><span class="line">				<span class="built_in">map</span>-&gt;table[idx] = curr-&gt;next;</span><br><span class="line">				<span class="built_in">free</span>(curr);</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//如果不是第一个节点</span></span><br><span class="line">			</span><br><span class="line">			prev-&gt;next = curr-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(curr);</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		prev = curr;</span><br><span class="line">		curr = curr-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//curr  == NULL</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Error: %s is not exist in map\n&quot;</span>, key);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Hashmap.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	HashMap* <span class="built_in">map</span> = hashmap_create();</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">map</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;calloc failed in hashmap_create\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	hashmap_put(<span class="built_in">map</span>, <span class="string">&quot;xuwendong&quot;</span>, <span class="string">&quot;fool&quot;</span>);</span><br><span class="line">	hashmap_put(<span class="built_in">map</span>, <span class="string">&quot;jiujixinzhengddg&quot;</span>, <span class="string">&quot;foolboy&quot;</span>);</span><br><span class="line">	hashmap_put(<span class="built_in">map</span>, <span class="string">&quot;jindi&quot;</span>, <span class="string">&quot;king&quot;</span>);</span><br><span class="line">	hashmap_put(<span class="built_in">map</span>, <span class="string">&quot;huangjin&quot;</span>, <span class="string">&quot;kingdom&quot;</span>);</span><br><span class="line"></span><br><span class="line">	hashmap_put(<span class="built_in">map</span>, <span class="string">&quot;jindi&quot;</span>, <span class="string">&quot;MIT&quot;</span>);</span><br><span class="line">	hashmap_put(<span class="built_in">map</span>, <span class="string">&quot;huangjin&quot;</span>, <span class="string">&quot;QINGHUA&quot;</span>);</span><br><span class="line"></span><br><span class="line">	V val1 = hashmap_get(<span class="built_in">map</span>, <span class="string">&quot;jindi&quot;</span>);</span><br><span class="line">	V val2 = hashmap_get(<span class="built_in">map</span>, <span class="string">&quot;peanut&quot;</span>);</span><br><span class="line"></span><br><span class="line">	hashmap_delete(<span class="built_in">map</span>, <span class="string">&quot;xuwendong&quot;</span>);</span><br><span class="line">	hashmap_delete(<span class="built_in">map</span>, <span class="string">&quot;jindi&quot;</span>);</span><br><span class="line">	hashmap_delete(<span class="built_in">map</span>, <span class="string">&quot;xuwendong222&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>分析</p>
<p>在哈希函数保证 key 平均分布的前提下，那么哈希表的性能就取决于**链表的平均长度(L)**。</p>
<p>put :O(L)</p>
<p>先对 key 进行哈希，找到对应的链表，然后<strong>遍历链表</strong>，判断是添加结点还是更新结点。</p>
<p>get :O(L)</p>
<p>先对 key 进行哈希，找到对应的链表，然后<strong>遍历链表</strong>，找到对应的结点。</p>
<p>delete :O(L)</p>
<p>先对 key 进行哈希，找到对应的链表，然后<strong>遍历链表</strong>，删除对应的结点。</p>
<p>但是教科书都说上面三个复杂度是O(1)。</p>
<p>如果我们想在常数时间复杂度内, 完成哈希表的增删查操作，那么我们就得控制链表的平均长度不超过<strong>某个值</strong>。这个值我们称之为加载因子(load factor)，也就是链表平均长度可以达到的最大值。</p>
<p>这个“某个值”是常数，因此教科书才说是O(1)</p>
<p>因此，当元素个数达到一定的数目的时候，我们就需要对数组进行扩容，然后把所有元素重新映射到哈希表</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>哈希表的应用很广，比如 <code>C++</code> 中的 <code>unordered_map</code>,<code> unordered_set</code> </p>
<p>和 <code>Java</code> 中的<code>HashMap</code>,<code>HashSet</code>底层的数据结构都是哈希表。再比如，常用的缓存中间件<code>Redis</code>，也大量使用了哈希表数据结构。</p>
<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>定义：<strong>二叉树是一棵树，并且二叉树的每个结点最多有两棵子树</strong>。二叉树的子树又分为左子树和右子树  </p>
<p><strong>完全二叉树和满二叉树</strong></p>
<p>二叉树有两种特殊的形态：完全二叉树和满二叉树。完全二叉树：若二叉树的深度为 h，除第 h 层外，其它各层(1～h-1)的结点数目都达到最大值，第 h 层的结点都连续排列在最左边，这样的二叉树就是完全二叉树。满二叉树：每一层的结点数目都达到最大值(包括最下面一层)。</p>
<p><strong>二叉搜索树</strong></p>
<p>又叫二叉排序树。要求树中的结点可以按照某个规则进行比较，其定义如下：（本身又是一个递归的定义）</p>
<ol>
<li>左子树中所有结点的 key 值都比根结点的 key 值小，并且左子树也是二叉搜索树。</li>
<li>右子树中所有结点的 key 值都比根结点的 key 值大，并且右子树也是二叉搜索树</li>
</ol>
<p>基本操作</p>
<p><code>search</code> ：若 BST 为空，则直接NULL。若 BST 非空，则和根结点比较，若和根结点相等，表明找到了。若比根结点小，则在左子树中递归查找；若比根结点大，则在右子树中递归查找。</p>
<p><code>insert</code> ：若 BST 为空，则创建结点，将其作为根结点。若 BST 非空，则和根结点比较，若和根结点相等，则返回。若比根结点小，则在左子树中递归插入；若比根结点大，则在右子树中递归插入。</p>
<p><code>delete</code> ：分三种情况处理。</p>
<p>a. 如果要删除结点没有孩子，那么直接将该结点删除就行了。</p>
<p>b. 如果要删除结点只有一个孩子，那么需要将父亲结点对应的指针，指向它唯一的孩子结点。  </p>
<p>c. 如果要删除结点有两个孩子，那么我们可以找到这个结点的右子树中最小结点(或者左子树中最大结点)，把它替换到要删除的结点上，然后再删除右子树的最小结点 (或左子树的最大结点)</p>
<p><code>二叉树的建树</code></p>
<p>根据先序，中序，后序，中序的一种还原二叉树的模样</p>
<p><code>先序，中序</code>可建树</p>
<p><code>后序，中序</code>可建树</p>
<p>类似于根据正视图，侧视图，俯视图，还原立体图形的模样</p>
<h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><p><code>BST.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> K;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span> &#123;</span></span><br><span class="line">	K key;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span>* <span class="title">left</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span>* <span class="title">right</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	TreeNode* root;</span><br><span class="line">	<span class="comment">//把树都信息放在一个单独的结构体里面对他进行抽象</span></span><br><span class="line">	<span class="comment">//不过这里面只有一个指向根节点的指针，你也可以加 int size 等等，看你的需求了</span></span><br><span class="line">&#125;BST;</span><br><span class="line"><span class="comment">//API</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BST* <span class="title function_">bst_create</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_destroy</span><span class="params">(BST* tree)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_insert</span><span class="params">(BST* tree, K key)</span>;</span><br><span class="line">TreeNode* <span class="title function_">bst_search</span><span class="params">(BST* tree, K key)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_delete</span><span class="params">(BST* treee, K key)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_preorder</span><span class="params">(BST* tree)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_inorder</span><span class="params">(BST* tree)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_postorder</span><span class="params">(BST* tree)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_levelorder1</span><span class="params">(BST* tree)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_levelorder2</span><span class="params">(BST* tree)</span>;</span><br><span class="line"></span><br><span class="line">BST* <span class="title function_">bst_bliudTree</span><span class="params">(K preorder[], K inorder[], <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>Queue.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span>* <span class="title">E</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	E elements[N];</span><br><span class="line">	<span class="type">int</span> front;</span><br><span class="line">	<span class="type">int</span> rear;</span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//API</span></span><br><span class="line">Queue* <span class="title function_">queue_create</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_destroy</span><span class="params">(Queue* q)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_push</span><span class="params">(Queue* q, E val)</span>;</span><br><span class="line">E <span class="title function_">queue_pop</span><span class="params">(Queue* q)</span>;</span><br><span class="line">E <span class="title function_">queue_peek</span><span class="params">(Queue* q)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">queue_empty</span><span class="params">(Queue* q)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">queue_full</span><span class="params">(Queue* q)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>BST.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BST.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Queue.h&quot;</span></span></span><br><span class="line">BST* <span class="title function_">bst_create</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(BST));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_destroyPost</span><span class="params">(TreeNode* node)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line">	bst_destroyPost(node-&gt;left);</span><br><span class="line">	bst_destroyPost(node-&gt;right);</span><br><span class="line">	<span class="comment">//销毁根节点</span></span><br><span class="line">	<span class="built_in">free</span>(node);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_destroy</span><span class="params">(BST* tree)</span> &#123;</span><br><span class="line">	bst_destroyPost(tree-&gt;root);</span><br><span class="line">	<span class="built_in">free</span>(tree);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_insert</span><span class="params">(BST* tree, K key)</span> &#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//查找位置 ,先判断一下数里面有没有这个key，没有才创建节点。调用bst_search????</span></span><br><span class="line">	<span class="comment">//一般实现bst里面key的数值是唯一的，不允许重复</span></span><br><span class="line">	TreeNode* parent = <span class="literal">NULL</span>;</span><br><span class="line">	TreeNode* curr = tree-&gt;root;</span><br><span class="line">	<span class="type">int</span> cmp;</span><br><span class="line">	<span class="keyword">while</span> (curr) &#123;</span><br><span class="line">		cmp = key - curr-&gt;key;</span><br><span class="line">		<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			parent = curr;</span><br><span class="line">			curr = curr-&gt;left;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			parent = curr;</span><br><span class="line">			curr = curr-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//curr == NULL,，没有这个key，要分配空间开始插入了</span></span><br><span class="line">	TreeNode* newNode = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line">	<span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;malloc failed in bst_insert\n&quot;</span>);</span><br><span class="line">		<span class="comment">//printf(&quot;malloc failed in bst_insert\n&quot;);</span></span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	newNode-&gt;key = key;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//相当于链表的尾插法，链表的尾插法就是考虑两种情况 1.前面没有结点，链表为空 2. 前面有结点，链表不为空 </span></span><br><span class="line">	<span class="comment">//事实上，只要有跟节点，那么新的节点只能插入在根节点左子树或者右子树，不可能和链表一样插入在第一个节点前面，因此不用考虑插入的节点在根节点之前的情况</span></span><br><span class="line">	<span class="comment">//BST为空。。没有根节点，那么插入的节点就是跟节点</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (parent == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		tree-&gt;root = newNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//插入的位置在根节点后面</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) parent-&gt;left = newNode;</span><br><span class="line">	<span class="keyword">else</span>  parent-&gt;right = newNode;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">// 这个不是二叉平衡数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类似链表的遍历操作</span></span><br><span class="line">TreeNode* <span class="title function_">bst_search</span><span class="params">(BST* tree, K key)</span> &#123;</span><br><span class="line">	TreeNode* curr = tree-&gt;root;</span><br><span class="line">	<span class="keyword">if</span> (!curr) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">int</span> cmp;</span><br><span class="line">	<span class="keyword">while</span> (curr) &#123;</span><br><span class="line">		cmp = key - curr-&gt;key;</span><br><span class="line">		<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) curr = curr-&gt;left;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) curr = curr-&gt;right;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> curr;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//curr == NULL,  没有找到</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_delete</span><span class="params">(BST* tree, K key)</span> &#123;</span><br><span class="line">	<span class="comment">//找到key对应的要删除的节点</span></span><br><span class="line">	TreeNode* curr = tree-&gt;root;</span><br><span class="line">	TreeNode* parent = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">int</span> cmp;</span><br><span class="line">	<span class="keyword">while</span> (curr) &#123;</span><br><span class="line">		cmp = key - curr-&gt;key;</span><br><span class="line">		<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			parent = curr;</span><br><span class="line">			curr = curr-&gt;left;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			parent = curr;</span><br><span class="line">			curr = curr-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//curr == NULL或者 curr.key == keY</span></span><br><span class="line">	<span class="keyword">if</span> (curr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: key is not exist in tree\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//删除该借点</span></span><br><span class="line">	<span class="keyword">if</span> (curr-&gt;left &amp;&amp; curr-&gt;right) &#123;</span><br><span class="line">		<span class="comment">//查找右子树的最大借点</span></span><br><span class="line">		TreeNode* minOfRight = curr-&gt;right;</span><br><span class="line">		TreeNode* minParent = curr;<span class="comment">//别写成NULL</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (minOfRight-&gt;left) &#123;</span><br><span class="line">			minParent = minOfRight;</span><br><span class="line">			minOfRight = minOfRight-&gt;left;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//minOfRight-&gt;left == NULL</span></span><br><span class="line">		<span class="comment">//先将度为二点情况，退化为度为零 and 1的情况</span></span><br><span class="line">		</span><br><span class="line">		curr-&gt;key = minOfRight-&gt;key;</span><br><span class="line"></span><br><span class="line">		parent = minParent;</span><br><span class="line">		curr = minOfRight;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//删除curr指向的节点</span></span><br><span class="line">	<span class="comment">//处理度为零或者一点情况</span></span><br><span class="line">	TreeNode* child = (curr-&gt;left ? curr-&gt;left : curr-&gt;right);</span><br><span class="line">	<span class="comment">//删除的是根节点,此时curr == tree.root, parent == NULL</span></span><br><span class="line">	<span class="keyword">if</span> (parent == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="comment">//删除根节点</span></span><br><span class="line">		tree-&gt;root = child;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (curr-&gt;key &lt; parent-&gt;key) &#123;</span><br><span class="line">		parent-&gt;left = child;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> parent-&gt;right = child;<span class="comment">//个人感觉这里包含了curr-&gt;key = parent-&gt;key的情况也是存在的</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">free</span>(curr);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">preorder_helper</span><span class="params">(TreeNode* node)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//遍历根节点</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, node-&gt;key);</span><br><span class="line">	<span class="comment">//遍历左子树</span></span><br><span class="line">	preorder_helper(node-&gt;left);</span><br><span class="line">	<span class="comment">//遍历右子树</span></span><br><span class="line">	preorder_helper(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">inorder_helper</span><span class="params">(TreeNode* node)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//遍历左子树</span></span><br><span class="line">	inorder_helper(node-&gt;left);</span><br><span class="line">	<span class="comment">//遍历根节点</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, node-&gt;key);</span><br><span class="line">	<span class="comment">//遍历右子树</span></span><br><span class="line">	inorder_helper(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">postorder_helper</span><span class="params">(TreeNode* node)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//遍历左子树</span></span><br><span class="line">	postorder_helper(node-&gt;left);</span><br><span class="line">	<span class="comment">//遍历右子树</span></span><br><span class="line">	postorder_helper(node-&gt;right);</span><br><span class="line">	<span class="comment">//遍历根节点</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, node-&gt;key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_preorder</span><span class="params">(BST* tree)</span> &#123;</span><br><span class="line">	preorder_helper(tree-&gt;root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;preorder\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_inorder</span><span class="params">(BST* tree)</span> &#123;</span><br><span class="line">	inorder_helper(tree-&gt;root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;inorder\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_postorder</span><span class="params">(BST* tree)</span> &#123;</span><br><span class="line">	postorder_helper(tree-&gt;root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;postorder\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_levelorder1</span><span class="params">(BST* tree)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (tree-&gt;root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将根节点入队列</span></span><br><span class="line">	Queue* q = queue_create();</span><br><span class="line">	<span class="keyword">if</span> (!q) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: calloc failed in queue_create\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//1.根节点入队列</span></span><br><span class="line">	queue_push(q, tree-&gt;root);</span><br><span class="line">	<span class="comment">//2.判断队列是否为空</span></span><br><span class="line">	<span class="keyword">while</span> (!queue_empty(q))</span><br><span class="line">	&#123;</span><br><span class="line">		TreeNode* node = queue_pop(q);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, node-&gt;key);</span><br><span class="line">		<span class="comment">//判断是否有左孩子</span></span><br><span class="line">		<span class="keyword">if</span>(node-&gt;left)</span><br><span class="line">		queue_push(q, node-&gt;left);</span><br><span class="line">		<span class="comment">//判断是否有右孩子</span></span><br><span class="line">		<span class="keyword">if</span>(node-&gt;right)</span><br><span class="line">		queue_push(q, node-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//队列为空，q is empty</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;levelorder\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeNode* <span class="title function_">bliud</span><span class="params">(K preorder[], K inorder[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="comment">// 递归边界条件</span></span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//构建跟节点</span></span><br><span class="line">	K key = preorder[<span class="number">0</span>];</span><br><span class="line">	TreeNode* node = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line">	<span class="keyword">if</span> (!node) &#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;malloc failed in malloc\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	node-&gt;key = key;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//找左子树小先，中序遍历序列</span></span><br><span class="line">	<span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (inorder[idx] != key) &#123;</span><br><span class="line">		idx++;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="comment">//inorder[idx] == key</span></span><br><span class="line">	<span class="comment">//构建左子树</span></span><br><span class="line">	node-&gt;left = bliud(preorder + <span class="number">1</span>, inorder, idx);</span><br><span class="line">	<span class="comment">//构建右子树</span></span><br><span class="line">	node-&gt;right = bliud(preorder + <span class="number">1</span> + idx, inorder + <span class="number">1</span> + idx, n - idx - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">BST* <span class="title function_">bst_bliudTree</span><span class="params">(K preorder[], K inorder[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	BST* tree = bst_create();</span><br><span class="line">	<span class="keyword">if</span> (!tree) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//委托方法 </span></span><br><span class="line">	tree-&gt;root = bliud(preorder, inorder, n);</span><br><span class="line">	<span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bst_levelorder2</span><span class="params">(BST* tree)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (tree-&gt;root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将根节点入队列</span></span><br><span class="line">	Queue* q = queue_create();</span><br><span class="line">	<span class="keyword">if</span> (!q) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: calloc failed in queue_create\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//1.根节点入队列</span></span><br><span class="line">	queue_push(q, tree-&gt;root);</span><br><span class="line">	<span class="comment">//2.判断队列是否为空</span></span><br><span class="line">	<span class="keyword">while</span> (!queue_empty(q))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> n = q-&gt;size; </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			TreeNode* node = queue_pop(q);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, node-&gt;key);</span><br><span class="line">			<span class="comment">//判断是否有左孩子</span></span><br><span class="line">			<span class="keyword">if</span> (node-&gt;left)</span><br><span class="line">				queue_push(q, node-&gt;left);</span><br><span class="line">			<span class="comment">//判断是否有右孩子</span></span><br><span class="line">			<span class="keyword">if</span> (node-&gt;right)</span><br><span class="line">				queue_push(q, node-&gt;right);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//队列为空，q is empty</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;levelorder\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>Queue.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//API</span></span><br><span class="line">Queue* <span class="title function_">queue_create</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//create empty queue</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(Queue));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_destroy</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_push</span><span class="params">(Queue* q, E val)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (queue_full(q)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: queue is full in queue_push\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	q-&gt;elements[q-&gt;rear] = val;</span><br><span class="line">	q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % N;</span><br><span class="line">	q-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line">E <span class="title function_">queue_pop</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (queue_empty(q)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: queue is empty in queue_pop\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	E tmp = q-&gt;elements[q-&gt;front];</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	q-&gt;front = (q-&gt;front + <span class="number">1</span>) % N;</span><br><span class="line">	q-&gt;size--;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">E <span class="title function_">queue_peek</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (queue_empty(q)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error: queue is empty in queue_peek\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="keyword">return</span> q-&gt;elements[q-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">queue_empty</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> q-&gt;size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">queue_full</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> q-&gt;size == N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BST.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Queue.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// 创建一颗空书</span></span><br><span class="line">	<span class="comment">/*BST* tree = bst_create();</span></span><br><span class="line"><span class="comment">	if (!tree) &#123;</span></span><br><span class="line"><span class="comment">		printf(&quot;calloc failed in bst_create\n&quot;);</span></span><br><span class="line"><span class="comment">		exit(1);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	bst_insert(tree, 9);</span></span><br><span class="line"><span class="comment">	bst_insert(tree, 5);</span></span><br><span class="line"><span class="comment">	bst_insert(tree, 42);</span></span><br><span class="line"><span class="comment">	bst_insert(tree, 57);</span></span><br><span class="line"><span class="comment">	bst_insert(tree, 13);</span></span><br><span class="line"><span class="comment">	bst_insert(tree, 3);*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//TreeNode* node1 = bst_search(tree, 13);</span></span><br><span class="line">	<span class="comment">//TreeNode* node2 = bst_search(tree, 12);</span></span><br><span class="line">	<span class="comment">//bst_delete(tree, 3);</span></span><br><span class="line">	<span class="comment">//bst_delete(tree, 5);</span></span><br><span class="line">	<span class="comment">//bst_delete(tree, 9);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*bst_preorder(tree); </span></span><br><span class="line"><span class="comment">	bst_inorder(tree); </span></span><br><span class="line"><span class="comment">	bst_postorder(tree); </span></span><br><span class="line"><span class="comment">	bst_levelorder(tree);*/</span></span><br><span class="line">	<span class="type">int</span> preorder[] = &#123; <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">42</span>, <span class="number">13</span>, <span class="number">57</span> &#125;;</span><br><span class="line">	<span class="type">int</span> inorder[] = &#123; <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">42</span>, <span class="number">57</span> &#125;;</span><br><span class="line">	BST* tree = bst_bliudTree(preorder, inorder, <span class="number">6</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>BST 增加、删除和查找的效率取决于它的高度 h。</p>
<p><code>insert :O(h)</code> </p>
<p><code>search :O(h) </code></p>
<p><code>delete :O(h)</code></p>
<p>有 n 个结点的二叉树，高度最低时 h &#x3D; log2n (why?)，高度最高时 h &#x3D; n (why?)。但是我们上面实现的 BST 并不能保证树的高度为 O(logn)，更糟糕的是，随着动态的插入和删除元素，整棵树会慢慢地向左倾斜(删除度为2的结点时，我们会在右子树中删除)。</p>
<p>要想保证二叉树增加，查找，删除的时间复杂度为 O(logn)，我们需要在添加结点和删除结点后，做一些调整操作，以保证二叉树的平衡。常见的平衡二叉树有：AVL树、红黑树、伸展树、树堆等。其中应用最广，名气最大的当属<strong>红黑树</strong>了</p>
<h3 id="红黑树-拓展"><a href="#红黑树-拓展" class="headerlink" title="红黑树(拓展)"></a>红黑树(拓展)</h3><h4 id="2-3-4-树"><a href="#2-3-4-树" class="headerlink" title="2 - 3 - 4 树"></a>2 - 3 - 4 树</h4><p>自己看pdf，非重点，了解会调用stl函数就行了</p>
<h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p>自己看pdf，非重点，了解会调用stl函数就行了</p>
<p>我们可以用普通的 BST 来表示 2-3-4 树。可是，我们该如何表示3-结点和4-结点呢？</p>
<p>红黑树给出了一个很好的解决方案，我们可以用”红色”的边来表示3-结点和4-结点。如下图所示</p>
<p>3-结点有两种表示形式，而4-结点只有一种表示形式。可是”边”是不存在的呀，它只是逻辑上的一个结构，我们又该如何表示边的颜色呢？<strong>孩子结点到父亲结点的边是唯一的，所以我们可以用孩子结点的颜色，来表示孩子结点到父亲结点的边的颜色</strong>  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">treenode_s</span> &#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treenode_s</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treenode_s</span>* <span class="title">right</span>;</span></span><br><span class="line"><span class="type">bool</span> color;</span><br><span class="line">&#125;TreeNode</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一棵红黑树是满足下面红黑性质的二叉搜索树：</p>
<ol>
<li>每个结点或者是红色的，或者是黑色的</li>
<li>根结点是黑色的</li>
<li>叶子结点 (Nil) 是黑色的 (注：在算法导论中，叶子结点指得是 NULL 结点)</li>
<li>如果一个结点是红色的，则它的两个子结点都是黑色的 （4-node 只有一种编码方式）</li>
<li>对每个结点，从该结点到其所有后代叶子结点的路径上，包含相同数目的黑色结点。(黑高平衡， 2-3-4树是一个完美平衡的树)</li>
</ol>
</blockquote>
<h1 id="代码随想录1二叉树理论基础"><a href="#代码随想录1二叉树理论基础" class="headerlink" title="代码随想录1二叉树理论基础"></a>代码随想录1二叉树理论基础</h1><blockquote>
<p>以下内容均来自<a href="https://programmercarl.com/">https://programmercarl.com/</a></p>
<p>carl哥的（<a href="https://github.com/youngyangyang04">程序员Carl (opens new window)</a>）的原创。</p>
<p>我仅做<strong>学习过程中的笔记总结。帮助自己理解记忆，绝不做任何商业盈利用途</strong>。如觉得侵权，请联系微信BradTorres，我一定删除。</p>
</blockquote>
<p>代码随想录二叉树的视频笔记，感觉质量不足以我发到博客上面<br>map,set,mulipmap,mutipset底层是AVL平衡二叉树<br>unorderedmap,unorderedset底层是哈西表<br>存储方式：链式存储，数组存储（用的少，而且根节点从0开始从1开始要灵活，不能死记硬背，直接画图自己按照记忆推理一遍公式）<br>遍历方式：<br> 深度优先搜索：前序，中序，后序，有递归实现也有迭代实现<br>但其实迭代写起来会比较麻烦<br>广度优先搜索：队列，FIFO</p>
<p>自己手写leetcode的结构体定义</p>
<h2 id="二叉搜索树定义"><a href="#二叉搜索树定义" class="headerlink" title="二叉搜索树定义"></a>二叉搜索树定义</h2><p>前面介绍的树，都没有数值的，而二叉搜索树是有数值的了，<strong>二叉搜索树是一个有序树</strong>。</p>
<ul>
<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>
<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>
<li>它的左、右子树也分别为二叉排序树</li>
</ul>
<h2 id="平衡二叉搜索树"><a href="#平衡二叉搜索树" class="headerlink" title="平衡二叉搜索树"></a>平衡二叉搜索树</h2><p>平衡二叉搜索树：又被称为<strong>AVL（Adelson-Velsky and Landis）树</strong>，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>
<h2 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h2><p><strong>二叉树可以链式存储，也可以顺序存储。</strong></p>
<p>那么链式存储方式就用指针， 顺序存储的方式就是用数组。</p>
<p>顾名思义就是顺序存储的元素在内存是连续分布的，而链式存储则是通过指针把分布在各个地址的节点串联一起。</p>
<h2 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h2><p>关于二叉树的遍历方式，要知道二叉树遍历的基本方式都有哪些。</p>
<p>一些同学用做了很多二叉树的题目了，可能知道前中后序遍历，可能知道层序遍历，但是却没有框架。</p>
<p>我这里把二叉树的几种遍历方式列出来，大家就可以一一串起来了。</p>
<p>二叉树主要有两种遍历方式：</p>
<ol>
<li>深度优先遍历：先往深走，遇到叶子节点再往回走。</li>
<li>广度优先遍历：一层一层的去遍历。</li>
</ol>
<p><strong>这两种遍历是图论中最基本的两种遍历方式</strong>，后面在介绍图论的时候 还会介绍到。</p>
<p>那么从深度优先遍历和广度优先遍历进一步拓展，才有如下遍历方式：</p>
<ul>
<li>深度优先遍历<ul>
<li>前序遍历（递归法，迭代法）</li>
<li>中序遍历（递归法，迭代法）</li>
<li>后序遍历（递归法，迭代法）</li>
</ul>
</li>
<li>广度优先遍历<ul>
<li>层次遍历（迭代法）</li>
</ul>
</li>
</ul>
<p>在深度优先遍历中：有三个顺序，前中后序遍历， 有同学总分不清这三个顺序，经常搞混，我这里教大家一个技巧。</p>
<p><strong>这里前中后，其实指的就是中间节点的遍历顺序</strong>，只要大家记住 前中后序指的就是中间节点的位置就可以了。</p>
<p>看如下中间节点的顺序，就可以发现，中间节点的顺序就是所谓的遍历方式</p>
<ul>
<li>前序遍历：中左右</li>
<li>中序遍历：左中右</li>
<li>后序遍历：左右中</li>
</ul>
<p>大家可以对着如下图，看看自己理解的前后中序有没有问题。</p>
<p>最后再说一说二叉树中深度优先和广度优先遍历实现方式，我们做二叉树相关题目，经常会使用递归的方式来实现深度优先遍历，也就是实现前中后序遍历，使用递归是比较方便的。</p>
<p><strong>之前我们讲栈与队列的时候，就说过栈其实就是递归的一种实现结构</strong>，也就说前中后序遍历的逻辑其实都是可以借助栈使用递归的方式来实现的。</p>
<p>而广度优先遍历的实现一般使用队列来实现，这也是队列先进先出的特点所决定的，因为需要先进先出的结构，才能一层一层的来遍历二叉树。</p>
<p><strong>这里其实我们又了解了栈与队列的一个应用场景了。</strong></p>
<p>具体的实现我们后面都会讲的，这里大家先要清楚这些理论基础。</p>
<h2 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h2><p>刚刚我们说过了二叉树有两种存储方式顺序存储，和链式存储，顺序存储就是用数组来存，这个定义没啥可说的，我们来看看链式存储的二叉树节点的定义方式。</p>
<p>C++代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="2二叉树的递归遍历"><a href="#2二叉树的递归遍历" class="headerlink" title="2二叉树的递归遍历"></a>2二叉树的递归遍历</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>每次写递归，都按照这三要素来写，可以保证大家写出正确的递归算法！</strong></p>
<ol>
<li><strong>确定递归函数的参数和返回值：</strong> 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。</li>
<li><strong>确定终止条件：</strong> 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。</li>
<li><strong>确定单层递归的逻辑：</strong> 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</li>
</ol>
<p><strong>以下以前序遍历为例：</strong></p>
<ol>
<li><strong>确定递归函数的参数和返回值</strong>：因为要打印出前序遍历节点的数值，所以参数里需要传入vector来放节点的数值，除了这一点就不需要再处理什么数据了也不需要有返回值，所以递归函数返回类型就是void，代码如下：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="type">int</span>&gt;&amp; vec)</span></span></span><br></pre></td></tr></table></figure>

<ol>
<li><strong>确定终止条件</strong>：在递归的过程中，如何算是递归结束了呢，当然是当前遍历的节点是空了，那么本层递归就要结束了，所以如果当前遍历的这个节点是空，就直接return，代码如下：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>确定单层递归的逻辑</strong>：前序遍历是中左右的循序，所以在单层递归的逻辑，是要先取中节点的数值，代码如下：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vec.<span class="built_in">push_back</span>(cur-&gt;val);    <span class="comment">// 中</span></span><br><span class="line"><span class="built_in">traversal</span>(cur-&gt;left, vec);  <span class="comment">// 左</span></span><br><span class="line"><span class="built_in">traversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br></pre></td></tr></table></figure>

<p>单层递归的逻辑就是按照中左右的顺序来处理的，这样二叉树的前序遍历，基本就写完了，再看一下完整代码：</p>
<p>前序遍历：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="type">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(cur-&gt;val);    <span class="comment">// 中</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;left, vec);  <span class="comment">// 左</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="built_in">traversal</span>(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>那么前序遍历写出来之后，中序和后序遍历就不难理解了，代码如下：</p>
<p>中序遍历：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="type">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;left, vec);  <span class="comment">// 左</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(cur-&gt;val);    <span class="comment">// 中</span></span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后序遍历：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="type">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;left, vec);  <span class="comment">// 左</span></span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(cur-&gt;val);    <span class="comment">// 中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时大家可以做一做leetcode上三道题目，分别是：</p>
<p>全部做完了，比较简单就补贴在这里了</p>
<p>可能有同学感觉前后中序遍历的递归太简单了，要打迭代法（非递归），别急，我们明天打迭代法，打个通透！</p>
<p>over</p>
<h1 id="3二叉树的迭代遍历"><a href="#3二叉树的迭代遍历" class="headerlink" title="3二叉树的迭代遍历"></a>3二叉树的迭代遍历</h1><p>为什么可以用迭代法（非递归的方式）来实现二叉树的前后中序遍历呢？</p>
<p>匹配问题都是栈道强项，<strong>递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中</strong>，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p>
<p>此时大家应该知道我们用<strong>栈</strong>也可以是实现二叉树的前后中序遍历了。</p>
<h2 id="前序遍历（迭代法）"><a href="#前序遍历（迭代法）" class="headerlink" title="前序遍历（迭代法）"></a>前序遍历（迭代法）</h2><p>前序遍历是中左右，每次先处理的是中间节点，那么先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子。</p>
<p>为什么要先加入 右孩子，再加入左孩子呢？ 因为这样出栈的时候才是中左右的顺序</p>
<p>不难写出如下代码: （<strong>注意代码中空节点不入栈</strong>）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> result;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();                       <span class="comment">// 中</span></span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            result.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);           <span class="comment">// 右（空节点不入栈）</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);             <span class="comment">// 左（空节点不入栈）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="后序遍历（迭代法）"><a href="#后序遍历（迭代法）" class="headerlink" title="后序遍历（迭代法）"></a>后序遍历（迭代法）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        stack&lt;TreeNode *&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode *node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left)</span><br><span class="line">                st.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right)</span><br><span class="line">                st.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="中序遍历（迭代法）"><a href="#中序遍历（迭代法）" class="headerlink" title="中序遍历（迭代法）"></a>中序遍历（迭代法）</h2><p><strong>处理顺序和访问顺序是不一致的。</strong></p>
<p>那么<strong>在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素</strong></p>
<p><strong>中序遍历，可以写出如下代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur != <span class="literal">NULL</span>) &#123; <span class="comment">// 指针来访问节点，访问到最底层</span></span><br><span class="line">                st.<span class="built_in">push</span>(cur); <span class="comment">// 将访问的节点放进栈</span></span><br><span class="line">                cur = cur-&gt;left;                <span class="comment">// 左</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = st.<span class="built_in">top</span>(); <span class="comment">// 从栈里弹出的数据，就是要处理的数据（放进result数组里的数据）</span></span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                result.<span class="built_in">push_back</span>(cur-&gt;val);     <span class="comment">// 中</span></span><br><span class="line">                cur = cur-&gt;right;               <span class="comment">// 右</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="4二叉树的统一迭代法"><a href="#4二叉树的统一迭代法" class="headerlink" title="4二叉树的统一迭代法"></a>4二叉树的统一迭代法</h1><p>仅作查阅参考</p>
<p><a href="https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%9F%E4%B8%80%E8%BF%AD%E4%BB%A3%E6%B3%95.html#%E6%80%9D%E8%B7%AF">https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%9F%E4%B8%80%E8%BF%AD%E4%BB%A3%E6%B3%95.html#%E6%80%9D%E8%B7%AF</a></p>
<h1 id="5二叉树的层序便利"><a href="#5二叉树的层序便利" class="headerlink" title="5二叉树的层序便利"></a>5二叉树的层序便利</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode *root)</span><br><span class="line">    &#123;</span><br><span class="line">        queue&lt;TreeNode *&gt; q;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">            <span class="keyword">while</span> (size--)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode *node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                vec.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left)</span><br><span class="line">                    q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right)</span><br><span class="line">                    q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.<span class="built_in">push_back</span>(vec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>递归实现明天再看，看不懂，有没有人讲</p>
<p>一个有思考，和我对递归类似数学归纳法的认知一样的视频讲解</p>
<p>【看到递归就晕？带你理解递归的本质！】 <a href="https://www.bilibili.com/video/BV1UD4y1Y769/?share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1UD4y1Y769/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"># 递归法</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">order</span><span class="params">(TreeNode* cur, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; result, <span class="type">int</span> depth)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="built_in">size</span>() == depth) result.<span class="built_in">push_back</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        result[depth].<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">        <span class="built_in">order</span>(cur-&gt;left, result, depth + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">order</span>(cur-&gt;right, result, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">order</span>(root, result, depth);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>result.push_back(vector<int>());什么意思</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; vec;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">vec.<span class="built_in">back</span>().<span class="built_in">push_back</span>();</span><br></pre></td></tr></table></figure>

<p>第一句创建了一个实体为vertor<int>的容器，可以理解为一个<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">二维数组</a>；</p>
<p>第二句话相当于分隔符了，往二维数组里插入空的<a href="https://so.csdn.net/so/search?q=vector&spm=1001.2101.3001.7020">vector</a><int>()，可以理解为分行，即二维数组的下一行；（<strong>有些不够准确，应该说是往二维数组插入了一个一维向量，相当与初始化一行，但这一行的size为0，这一维向量没有元素。此时vec.size() 是1，因为只有一个一维向量。</strong></p>
<p><strong><code>        result[depth].push_back(cur-&gt;val);</code>这个就是在对应的一维向量里面插入元素。</strong></p>
<p><strong>模拟一下递归的过程，就知道，刚刚好创建了树的深度+1（根节点深度为零）也就是树的高度（假设根节点高度为一）个数的一维向量。结果完全正确。）</strong></p>
<p>第三句话则是在每一行里插入数据。</p>
<p>转载自<a href="http://t.csdnimg.cn/DnB8H">http://t.csdnimg.cn/DnB8H</a></p>
<p><a href="https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html">https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html</a></p>
<p>下面是个大佬的博客</p>
<p><a href="https://www.cnblogs.com/tyty-Somnuspoppy/p/9361821.html">https://www.cnblogs.com/tyty-Somnuspoppy/p/9361821.html</a></p>
<p>问问群友，问了，自己也看明白了。给个感谢</p>
<h1 id="6翻转二叉树"><a href="#6翻转二叉树" class="headerlink" title="6翻转二叉树"></a>6翻转二叉树</h1><p>开始，别管上面了</p>
]]></content>
  </entry>
  <entry>
    <title>CDay08Cplusplus49</title>
    <url>/2024/05/06/CDay08Cplusplus49/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="设计简易的Vector数组"><a href="#设计简易的Vector数组" class="headerlink" title="设计简易的Vector数组"></a>设计简易的Vector数组</h2><p><code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Vector.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	Vector* v = create_vector();</span><br><span class="line">	<span class="keyword">if</span> (!v) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;create_vector failed!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> val = <span class="number">0</span>;val &lt;= <span class="number">99</span>;val++)</span><br><span class="line">		push_back(v, val);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v-&gt;elements[i]);</span><br><span class="line">	destroy_vector(v);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Vector.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Vector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_CAPACITY 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THRESHOLD 1024</span></span><br><span class="line">Vector* <span class="title function_">create_vector</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//类似C++中的无参构造方法 </span></span><br><span class="line">	Vector* v = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Vector));</span><br><span class="line">	<span class="keyword">if</span> (!v) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	v-&gt;capacity = DEFAULT_CAPACITY;</span><br><span class="line">	v-&gt;elements = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * v-&gt;capacity);</span><br><span class="line">	<span class="keyword">if</span> (!v-&gt;elements) &#123;</span><br><span class="line">		<span class="built_in">free</span>(v);<span class="comment">// Caution: 一定要free(v)</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	v-&gt;size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy_vector</span><span class="params">(Vector* v)</span> &#123;</span><br><span class="line">	<span class="comment">//类似C++里面的析构函数</span></span><br><span class="line">	<span class="built_in">free</span>(v-&gt;elements);</span><br><span class="line">	<span class="built_in">free</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">grow_capacity</span><span class="params">(Vector* v)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (v-&gt;capacity &lt;= THRESHOLD) &#123;</span><br><span class="line">		v-&gt;capacity += v-&gt;capacity;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		v-&gt;capacity += (v-&gt;capacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="type">int</span>* result = <span class="built_in">realloc</span>(v-&gt;elements, <span class="keyword">sizeof</span>(<span class="type">int</span>) * v-&gt;capacity);</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span> (!result) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;grow_capacity failed!\n&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 指向新的内存空间</span></span><br><span class="line">		v-&gt;elements = result;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">push_back</span><span class="params">(Vector* v, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">	<span class="comment">//先判断要不要扩容</span></span><br><span class="line">	<span class="keyword">if</span> (v-&gt;size == v-&gt;capacity)<span class="comment">//此时刚好满了</span></span><br><span class="line">	&#123;</span><br><span class="line">		grow_capacity(v);</span><br><span class="line">	&#125;</span><br><span class="line">	v-&gt;elements[v-&gt;size++] = val;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>Vector.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//对外的接口:结构体的定义, API</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span>* elements; <span class="comment">// 指向堆空间的数组</span></span><br><span class="line">	<span class="type">int</span> size;<span class="comment">//元素的个数</span></span><br><span class="line">	<span class="type">int</span> capacity;<span class="comment">//数组的容量</span></span><br><span class="line">&#125;Vector	;</span><br><span class="line"></span><br><span class="line">Vector* <span class="title function_">create_vector</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy_vector</span><span class="params">(Vector* v)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">push_back</span><span class="params">(Vector* v, <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">grow_capacity</span><span class="params">(Vector* v)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>CDay05and06C++49</title>
    <url>/2024/05/04/CDay05and06C-49/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>(a) 目前使用的格里高利历闰年的规则如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. 公元年分非<span class="number">4</span>的倍数，为平年。</span><br><span class="line"><span class="attribute">2</span>. 公元年分为<span class="number">4</span>的倍数但非<span class="number">100</span>的倍数，为闰年。</span><br><span class="line"><span class="attribute">3</span>. 公元年分为<span class="number">100</span>的倍数但非<span class="number">400</span>的倍数，为平年。</span><br><span class="line"><span class="attribute">4</span>. 公元年分为<span class="number">400</span>的倍数为闰年。</span><br></pre></td></tr></table></figure>

<p>请用一个表达式判断某一年是否为闰年。 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> ==<span class="number">0</span> )</span><br></pre></td></tr></table></figure>

<p>(b) 输入某一天的年月日，输出下一天的年月日。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> daysOfMonth[<span class="number">13</span>] = &#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isLeapYear</span><span class="params">(<span class="type">int</span> year)</span>;</span><br><span class="line"><span class="type">void</span>  <span class="title function_">setFebDay</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	<span class="type">int</span> year, month, day;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;year,&amp;month,&amp;day);</span><br><span class="line">	<span class="comment">//int daysOfMonth[13] = &#123; 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 &#125;;</span></span><br><span class="line">	setFebDay(year);</span><br><span class="line">	day++;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (day &gt; daysOfMonth[month]) &#123;</span><br><span class="line">		day = <span class="number">1</span>;</span><br><span class="line">		month++;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (month == <span class="number">13</span>) &#123;</span><br><span class="line">		month = <span class="number">1</span>;</span><br><span class="line">		year ++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;year = %d, month = %d, day = %d\n&quot;</span>, year, month, day);</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">isLeapYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>  <span class="title function_">setFebDay</span><span class="params">(<span class="type">int</span> year )</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (isLeapYear(year)) </span><br><span class="line">		daysOfMonth[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		daysOfMonth[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>(c) 输入某两天的年月日，输出这两天的相距多少天。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> daysOfMonth[<span class="number">13</span>] = &#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125;;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">isLeapYear</span><span class="params">(<span class="type">int</span> year)</span>;</span><br><span class="line"><span class="type">void</span>  <span class="title function_">setFebDay</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">distance</span><span class="params">(<span class="type">int</span> year1, <span class="type">int</span> month1, <span class="type">int</span> day1, <span class="type">int</span> year2, <span class="type">int</span> month2, <span class="type">int</span> day2)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	<span class="type">int</span> year1, month1, day1;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;year1,&amp;month1,&amp;day1);</span><br><span class="line">	<span class="type">int</span> year2, month2, day2;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;year2, &amp;month2, &amp;day2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;差距%d天&quot;</span>, distance(year1, month1, day1, year2, month2, day2));</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">isLeapYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>  <span class="title function_">setFebDay</span><span class="params">(<span class="type">int</span> year )</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (isLeapYear(year)) </span><br><span class="line">		daysOfMonth[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		daysOfMonth[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">distance</span><span class="params">(<span class="type">int</span> year1, <span class="type">int</span> month1, <span class="type">int</span> day1, <span class="type">int</span> year2, <span class="type">int</span> month2, <span class="type">int</span> day2)</span> &#123;</span><br><span class="line">	<span class="type">int</span> days = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//默认前面的日期小于后面的日期</span></span><br><span class="line">	<span class="comment">//year1的一月一日到 month1 day1的天数只差(包括year1 的一月一日)</span></span><br><span class="line">	setFebDay(year1);</span><br><span class="line">	<span class="type">int</span> distance_1 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt; month1; m++) &#123;</span><br><span class="line">		distance_1 += daysOfMonth[m];</span><br><span class="line">	&#125;</span><br><span class="line">	distance_1 += day1;</span><br><span class="line">	<span class="comment">//计算year2的一月一日到 year2 month2 day2的天数之差(包括year2 的一月一日)</span></span><br><span class="line">	setFebDay(year2);</span><br><span class="line">	<span class="type">int</span> distance_2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt; month2; m++) &#123;</span><br><span class="line">		distance_2 += daysOfMonth[m];</span><br><span class="line">	&#125;</span><br><span class="line">	distance_2 += day2;</span><br><span class="line">	<span class="comment">//计算year1的一月一日到year2的一月一日的天数之差(包括year1 的一月一日和year2 的一月一日)</span></span><br><span class="line">	<span class="type">int</span> distance_3 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> y = year1; y &lt; year2; y++) &#123;</span><br><span class="line">		distance_3 += <span class="number">365</span>;</span><br><span class="line">		<span class="keyword">if</span> (isLeapYear(y))</span><br><span class="line">			distance_3 += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	days = distance_2 + distance_3 - distance_1;</span><br><span class="line">	<span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个的验证比较麻烦，毕竟自己不可能计算很多天数来跟程序的结果比对。我使用的excel自带的公式。方法在这里</p>
<p>如何计算两日期相差的天数、月数或年数？—DATEDIF函数 - 小崔学数据分析的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/441248425">https://zhuanlan.zhihu.com/p/441248425</a></p>
<p>将excel公式计算出的结果和程序的结果比对就知道程序是对的。</p>
<p>(d) 已知1970年1月1日是星期四，输入之后的某一天的年月日，判断它是星期几？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">weekday</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="number">4</span> + distance(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, year, month, day)) % <span class="number">7</span>;</span><br><span class="line">	<span class="comment">//如果是星期天，对应的索引值是0。事实上，很做电子日历起初都是把星期日放在最前面</span></span><br><span class="line">	<span class="comment">//然后才是星期一星期二等等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(e) 输入1970年之后任意一年的年份，输出该年的年历。对话如下：(拓展题，不要求每个同学作答)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> daysOfMonth[<span class="number">13</span>] = &#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* DayOfWeek[] = &#123; <span class="string">&quot;SUN&quot;</span>, <span class="string">&quot;MON&quot;</span>, <span class="string">&quot;TUE&quot;</span>, <span class="string">&quot;WED&quot;</span>, <span class="string">&quot;THU&quot;</span>, <span class="string">&quot;FRI&quot;</span>,<span class="string">&quot;SAT&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isLeapYear</span><span class="params">(<span class="type">int</span> year)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">weekday</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setFebDay</span><span class="params">(<span class="type">int</span> year)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">distance</span><span class="params">(<span class="type">int</span> year1, <span class="type">int</span> month1, <span class="type">int</span> day1, <span class="type">int</span> year2, <span class="type">int</span> month2, <span class="type">int</span> day2)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printCalendar</span><span class="params">(<span class="type">int</span> year)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	<span class="comment">//输入年份</span></span><br><span class="line">	<span class="type">int</span> year;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please input the year whose calendear you want to know?\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;year);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印日历</span></span><br><span class="line">	printCalendar(year);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">isLeapYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>  <span class="title function_">setFebDay</span><span class="params">(<span class="type">int</span> year )</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (isLeapYear(year)) </span><br><span class="line">		daysOfMonth[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		daysOfMonth[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">distance</span><span class="params">(<span class="type">int</span> year1, <span class="type">int</span> month1, <span class="type">int</span> day1, <span class="type">int</span> year2, <span class="type">int</span> month2, <span class="type">int</span> day2)</span> &#123;</span><br><span class="line">	<span class="type">int</span> days = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//默认前面的日期小于后面的日期</span></span><br><span class="line">	<span class="comment">//year1的一月一日到 month1 day1的天数只差(包括year1 的一月一日)</span></span><br><span class="line">	setFebDay(year1);</span><br><span class="line">	<span class="type">int</span> distance_1 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt; month1; m++) &#123;</span><br><span class="line">		distance_1 += daysOfMonth[m];</span><br><span class="line">	&#125;</span><br><span class="line">	distance_1 += day1;</span><br><span class="line">	<span class="comment">//计算year2的一月一日到 year2 month2 day2的天数之差(包括year2 的一月一日)</span></span><br><span class="line">	setFebDay(year2);</span><br><span class="line">	<span class="type">int</span> distance_2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt; month2; m++) &#123;</span><br><span class="line">		distance_2 += daysOfMonth[m];</span><br><span class="line">	&#125;</span><br><span class="line">	distance_2 += day2;</span><br><span class="line">	<span class="comment">//计算year1的一月一日到year2的一月一日的天数之差(包括year1 的一月一日和year2 的一月一日)</span></span><br><span class="line">	<span class="type">int</span> distance_3 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> y = year1; y &lt; year2; y++) &#123;</span><br><span class="line">		distance_3 += <span class="number">365</span>;</span><br><span class="line">		<span class="keyword">if</span> (isLeapYear(y))</span><br><span class="line">			distance_3 += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	days = distance_2 + distance_3 - distance_1;</span><br><span class="line">	<span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">weekday</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="number">4</span> + distance(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, year, month, day)) % <span class="number">7</span>;</span><br><span class="line">	<span class="comment">//如果是星期天，对应的索引值是0。事实上，很做电子日历起初都是把星期日放在最前面</span></span><br><span class="line">	<span class="comment">//然后才是星期一星期二等等</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printCalendar</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">	setFebDay(year);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;=====================The Calendar of Year %d====================|\n&quot;</span>, year);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="判断素数的函数"><a href="#判断素数的函数" class="headerlink" title="判断素数的函数"></a>判断素数的函数</h2><p>C++</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="comment">//O(sqrt(N)),N为你输入的质数或者合数大小</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="type">bool</span> is_prime = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//数字2是质数</span></span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">2</span>) is_prime = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//如果是大于二的偶数或者是1则不是质数</span></span><br><span class="line">        	<span class="comment">//事实上，1既不是质数也不是合数</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x % <span class="number">2</span>==<span class="number">0</span>||x&lt;<span class="number">2</span>) is_prime = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//其余的奇数的情况。</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//j从3开始，每次加2.</span></span><br><span class="line">                <span class="comment">//有如下定理，如果N是合数，那么存在T属于2&lt;=T&lt;=根号N，使得T整除N</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">3</span>; j*j&lt;=x;j+=<span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(x%j == <span class="number">0</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        is_prime = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is_prime == <span class="literal">true</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d is prime\n&quot;</span>,x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d is not prime\n&quot;</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>C</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE(a) (sizeof(a) / sizeof(a[0]))</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> x)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">if</span> (isPrime(x)) <span class="built_in">printf</span>(<span class="string">&quot;is prime\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;is not prime\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">bool</span> is_prime = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数字2是质数</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">2</span>) is_prime = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是大于二的偶数或者是1则不是质数</span></span><br><span class="line">        <span class="comment">//事实上，1既不是质数也不是合数</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span> || x &lt; <span class="number">2</span>) is_prime = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//其余的奇数的情况。</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//i从3开始，每次加2.</span></span><br><span class="line">            <span class="comment">//有如下定理，如果N是合数，那么存在T属于2&lt;=T&lt;=根号N，使得T整除N</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i * i &lt;= x; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                is_prime = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> is_prime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>从递归的定义去理解递归不是很好，我们可以从名字入手去理解。</p>
<ol>
<li>递：把大问题分解成若干个子问题，子问题的求解方式和大问题一致，只是问题规模不一致。</li>
<li><ol start="2">
<li>归：把子问题的解合并成大问题的解。</li>
</ol>
</li>
</ol>
<h3 id="例子1：电影院的例子。"><a href="#例子1：电影院的例子。" class="headerlink" title="例子1：电影院的例子。"></a>例子1：电影院的例子。</h3><h3 id="例子2：Fibonacci-数列。"><a href="#例子2：Fibonacci-数列。" class="headerlink" title="例子2：Fibonacci 数列。"></a>例子2：Fibonacci 数列。</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0, 1, 1, 2</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> fib(n<span class="number">-2</span>) + fib(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这种求解方式的效率很低，会存在大量重复的计算。如下图所示  </p>
<p>so，如何避免重复计算问题呢？答案是动态规划。顺序求解子问题，并将子问题的解保存起来，从而避免重复计算，最终求解到大问题。</p>
<p>0	1	1	2	3	5	8</p>
<p>但是对于求解 Fibnacci 数列来说，我们并不需要保存前面所有项的值，我们只需要保存最近两项即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">// 计算fib(i)的值</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tmp = a + b;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例子3：汉诺塔"><a href="#例子3：汉诺塔" class="headerlink" title="例子3：汉诺塔"></a>例子3：汉诺塔</h3><p>有三根杆子A，B，C。A杆上有 N 个 (N&gt;1) 穿孔圆盘，盘的尺寸由下到上依次变小。要求按下列规则将所有圆盘移至 C 杆：</p>
<ol>
<li><p>每次只能移动一个圆盘;</p>
</li>
<li><p>大盘不能叠在小盘上面。</p>
<p>提示：可将圆盘临时置于 B 杆，也可将从 A 杆移出的圆盘重新移回 A 杆，但都必须遵循上述两条规则。</p>
<p>问：最少需要移动多少次？如何移?</p>
<blockquote>
<p>(1) 输入：</p>
<p>n &#x3D; 1</p>
<p>输出：</p>
<p>total step(s): 1</p>
<p>A –&gt; C</p>
<p>(2) 输入：</p>
<p>n &#x3D; 2</p>
<p>输出：</p>
<p>total step(s): 3</p>
<p>A –&gt; B</p>
<p>A –&gt; C</p>
<p>B –&gt; C</p>
</blockquote>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE(a) (sizeof(a) / sizeof(a[0]))</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hanio_helper</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> c1, <span class="type">char</span> c2, <span class="type">char</span> c3)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hanio</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> tmp = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    hanio(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//规定第一个位置是初始位置，第二个位置是辅助的柱子，第三个是目标的柱子</span></span><br><span class="line"><span class="comment">//命名成name1，name2，name3意思是第一个第二个第三个柱子的名字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hanio_helper</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> name1, <span class="type">char</span> name2, <span class="type">char</span> name3)</span> &#123;</span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    <span class="comment">//n == 1</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c --&gt; %c\n&quot;</span>, name1, name3);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归公式</span></span><br><span class="line">    <span class="comment">// 1.将上面n-1个盘子移动到中间杆子上</span></span><br><span class="line">    hanio_helper(n - <span class="number">1</span>, name1, name3 , name2);</span><br><span class="line">    <span class="comment">// 2.把最大的盘子移动到目标杆子上</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c --&gt; %c\n&quot;</span>, name1 , name3);</span><br><span class="line">    <span class="comment">// 3.把中间杆子上的n-1个盘子移动到目标杆子上</span></span><br><span class="line">    hanio_helper(n - <span class="number">1</span>, name2, name1, name3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hanio</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// S(n) = S(n - 1) + 1 + S(n - 1)</span></span><br><span class="line">    <span class="comment">// S(1) = 1</span></span><br><span class="line">    <span class="comment">// 等比序列求和</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> steps = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;total steps is: %lld\n&quot;</span>, steps);</span><br><span class="line">    <span class="comment">//委托，外包</span></span><br><span class="line">    hanio_helper(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="例子4：约瑟夫环问题（每2人干掉一个）"><a href="#例子4：约瑟夫环问题（每2人干掉一个）" class="headerlink" title="例子4：约瑟夫环问题（每2人干掉一个）"></a>例子4：约瑟夫环问题（每2人干掉一个）</h3><p>约瑟夫环是一个数学的应用问题：已知 n 个人 (以编号1，2，3, …, n 分别表示) 围坐在一张圆桌周围。从编号为 1 的人开始，每两个人出列一个人，直至只剩一个人。问：最终剩下的这个人的编号是多少？</p>
<p>思路：<br>循环链表, 循环数组：</p>
<p>空间复杂度：O(n)</p>
<p>时间复杂度：O(n)</p>
<p>但如果用递归</p>
<p>空间复杂度：O(logn)，因为栈的深度</p>
<p>时间复杂度：O(logn)</p>
<p>递推公式</p>
<p><code>joseph(n) = 2 * joseph(n / 2) - 1   n为偶数</code></p>
<p><code>joseph(n) = 2 * joseph((n - 1) / 2) + 1   n为奇数</code></p>
<p>边界条件</p>
<p><code>n == 1 return 1;joseph(1) = 1</code></p>
<p><code>n == 2 return 1;joseph(2) = 1</code></p>
<p>代码实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">joseph</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, joseph(n));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">joseph</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">2</span> &amp;&amp; n % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span> * joseph(n / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">2</span> * joseph((n - <span class="number">1</span>) / <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例子5：约瑟夫环问题（每m人干掉一个）"><a href="#例子5：约瑟夫环问题（每m人干掉一个）" class="headerlink" title="例子5：约瑟夫环问题（每m人干掉一个）"></a>例子5：约瑟夫环问题（每m人干掉一个）</h3><p>循环链表</p>
<p>空间复杂度：O(n)</p>
<p>时间复杂度：O(m * n)</p>
<p>递推公式<code>joseph(n, m) = (joseph(n - 1, m) + m) % n </code></p>
<p>边界条件<code>joseph(1, m) = 0 // 这里的编号是从0到n - 1</code> </p>
<p>空间复杂度：O(n)</p>
<p>时间复杂度：O(n)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">joseph</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">1</span> + joseph(n, m));<span class="comment">//因为这里的joseph函数编号是0到n - 1</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">joseph</span><span class="params">(<span class="type">int</span> n , <span class="type">int</span> m)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> (joseph(n - <span class="number">1</span>, m) + m) % n;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="总结：递归三问"><a href="#总结：递归三问" class="headerlink" title="总结：递归三问"></a>总结：递归三问</h2><p>Q1：什么情况下可以考虑使用递归？</p>
<p>答：问题具有递归结构。(1)也就是说，大问题可以分解成若干个子问题，<strong>子问题的求解方式和大问题一致，只是问题规模不一致</strong>。(2)子问题的解可以<strong>合并</strong>成大问题的解。</p>
<p>Q2: 到底要不要使用递归？</p>
<p>答：如果不存在重复计算问题，且递归的层次不是很深时，就可以使用递归。</p>
<p>Q3: 如何写递归？</p>
<p>答：两步走。(1) 边界条件 (2) 递归公式</p>
<ol>
<li><p>(拓展题，不要求每个同学都作答) 德州扑克：写一个程序循环读取 5 张手牌 (输入 0 结束程序)，然后把手中的牌分为下面某一类：1.同花顺 2.四张 3.葫芦 (3 + 2) 4. 同花 5. 顺子 6.三张 7.两对 8. 一对 9.高牌。程序对话如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enter a card: 2s</span><br><span class="line">Enter a card: 5s</span><br><span class="line">Enter a card: 4s</span><br><span class="line">Enter a card: 3s</span><br><span class="line">Enter a card: 6s</span><br><span class="line">Straight flush</span><br><span class="line"></span><br><span class="line">Enter a card: 8c</span><br><span class="line">Enter a card: as</span><br><span class="line">Enter a card: 8c</span><br><span class="line">Duplicate card; ignored.</span><br><span class="line">Enter a card: 7c</span><br><span class="line">Enter a card: ad</span><br><span class="line">Enter a card: 3h</span><br><span class="line">Pair</span><br><span class="line"></span><br><span class="line">Enter a card: 6s</span><br><span class="line">Enter a card: d2</span><br><span class="line">Bad card; ignored.</span><br><span class="line">Enter a card: 2d</span><br><span class="line">Enter a card: 9c</span><br><span class="line">Enter a card: 4h</span><br><span class="line">Enter a card: ts</span><br><span class="line">High card</span><br><span class="line"></span><br><span class="line">Enter a card: 0</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">read_cards</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">analyze_hand</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_result</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nums_in_suit[<span class="number">4</span>], nums_in_rank[<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> flush, straight, four, three;</span><br><span class="line"><span class="type">int</span> pairs; <span class="comment">/* can be 0, 1 or 2*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (;; ) &#123;</span><br><span class="line">		read_cards();</span><br><span class="line">		analyze_hand();</span><br><span class="line">		print_result();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_result</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (flush &amp;&amp; straight)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Flush straight\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (four)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Four\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (three &amp;&amp; pairs)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Full house\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (flush)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Flush\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (straight)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Straight\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (three)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Three\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (pairs == <span class="number">2</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Two pairs\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (pairs)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;One pair\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;High card\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">analyze_hand</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	<span class="comment">/* 初始化 */</span></span><br><span class="line">	flush = <span class="literal">false</span>;</span><br><span class="line">	straight = <span class="literal">false</span>;</span><br><span class="line">	four = <span class="literal">false</span>;</span><br><span class="line">	three = <span class="literal">false</span>;</span><br><span class="line">	pairs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*判断是否是同花*/</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (nums_in_suit[i] == <span class="number">5</span>) &#123;</span><br><span class="line">			flush = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 判断是否是顺子 */</span></span><br><span class="line">	<span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (nums_in_rank[idx] == <span class="number">0</span>)</span><br><span class="line">		idx++;</span><br><span class="line">	<span class="comment">// nums_in_rank[i] != 0;</span></span><br><span class="line">	<span class="type">int</span> n_consective = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (idx &lt; <span class="number">12</span> &amp;&amp; nums_in_rank[++idx]) &#123;</span><br><span class="line">		n_consective++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (n_consective == <span class="number">5</span>) &#123;</span><br><span class="line">		straight = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* check four, three, two */</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (nums_in_rank[i] == <span class="number">4</span>) &#123;</span><br><span class="line">			four = <span class="literal">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums_in_rank[i] == <span class="number">3</span>) &#123;</span><br><span class="line">			three = <span class="literal">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums_in_rank[i] == <span class="number">2</span>) &#123;</span><br><span class="line">			pairs++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>void read_cards() {<br>        &#x2F;&#x2F; 初始化操作<br>        bool in_hand[4][13] &#x3D; { false };</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">		nums_in_rank[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		nums_in_suit[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 读取5张卡牌</span></span><br><span class="line">	<span class="type">int</span> cards_read = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (cards_read &lt; <span class="number">5</span>) &#123;</span><br><span class="line">		<span class="type">bool</span> bad_card = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Enter a card: &quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="type">char</span> c = getchar();</span><br><span class="line">		<span class="type">int</span> rank;</span><br><span class="line">		<span class="keyword">switch</span> (c) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:			rank = <span class="number">0</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:			rank = <span class="number">1</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:			rank = <span class="number">2</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:			rank = <span class="number">3</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:			rank = <span class="number">4</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:			rank = <span class="number">5</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:			rank = <span class="number">6</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:			rank = <span class="number">7</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;T&#x27;</span>:	rank = <span class="number">8</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;j&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;J&#x27;</span>:	rank = <span class="number">9</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>:	rank = <span class="number">10</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;k&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;K&#x27;</span>:	rank = <span class="number">11</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:	rank = <span class="number">12</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:			bad_card = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		c = getchar();</span><br><span class="line">		<span class="type">int</span> suit;</span><br><span class="line">		<span class="keyword">switch</span> (c) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:	suit = <span class="number">0</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:	suit = <span class="number">1</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;H&#x27;</span>:	suit = <span class="number">2</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:	suit = <span class="number">3</span>;	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:			bad_card = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 处理这一行的剩余字符</span></span><br><span class="line">		<span class="keyword">while</span> ((c = getchar()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (c != <span class="string">&#x27; &#x27;</span> &amp;&amp; c != <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">				bad_card = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (bad_card) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Bad card; ignored.\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (in_hand[suit][rank]) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Duplicate card; ignored.\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			in_hand[suit][rank] = <span class="literal">true</span>;</span><br><span class="line">			cards_read++;   </span><br><span class="line">			nums_in_rank[rank]++;</span><br><span class="line">			nums_in_suit[suit]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>​    </p>
<ol>
<li><p>编写程序模拟掷骰子的游戏（两个骰子）。第一次掷的时候，如 果点数之和为 7 或 11 则获胜；如果点数之和为2、3或12则落败；其他情况下的点数之和称为“目标”，游戏继续。在后续的投掷中，如果玩家再次掷出“目标”点数则获胜，掷出7则落败，其他情况都忽略，游戏继续进行。每局游戏结束时，程序询问用户是否再玩一次，如果用 户输入的回答不是 y 或 Y  ，程序会显示胜败的次数然后终止。(拓展题，不要求每个同学作答)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">You</span> rolled: <span class="number">8</span></span><br><span class="line"><span class="attribute">Your</span> point is <span class="number">8</span></span><br><span class="line"><span class="attribute">You</span> rolled: <span class="number">3</span></span><br><span class="line"><span class="attribute">You</span> rolled: <span class="number">10</span></span><br><span class="line"><span class="attribute">You</span> rolled: <span class="number">8</span></span><br><span class="line"><span class="attribute">You</span> win!</span><br><span class="line"></span><br><span class="line"><span class="attribute">Play</span> again? y</span><br><span class="line"></span><br><span class="line"><span class="attribute">You</span> rolled: <span class="number">6</span></span><br><span class="line"><span class="attribute">Your</span> point is <span class="number">6</span></span><br><span class="line"><span class="attribute">You</span> rolled: <span class="number">5</span></span><br><span class="line"><span class="attribute">You</span> rolled: <span class="number">12</span></span><br><span class="line"><span class="attribute">You</span> rolled: <span class="number">3</span></span><br><span class="line"><span class="attribute">You</span> rolled: <span class="number">7</span></span><br><span class="line"><span class="attribute">You</span> lose!</span><br><span class="line"></span><br><span class="line"><span class="attribute">Play</span> again? y</span><br><span class="line"></span><br><span class="line"><span class="attribute">You</span> rolled: <span class="number">11</span></span><br><span class="line"><span class="attribute">You</span> win!</span><br><span class="line"></span><br><span class="line"><span class="attribute">Play</span> again? n</span><br><span class="line"></span><br><span class="line"><span class="attribute">Wins</span>: <span class="number">2</span> Losses: <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">play_game</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">roll_dice</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	<span class="type">int</span> wins = <span class="number">0</span>, losses = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> again;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="type">bool</span> result = play_game();</span><br><span class="line">		<span class="keyword">if</span> (result) &#123;</span><br><span class="line">			wins++;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			losses++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\nPlay again?&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		again = getchar();</span><br><span class="line">		<span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">			;</span><br><span class="line">		<span class="comment">// scanf(&quot; %c&quot;, &amp;again);</span></span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">while</span> (again == <span class="string">&#x27;y&#x27;</span> || again == <span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWins: %d, losses: %d\n&quot;</span>, wins, losses);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">roll_dice</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> r1 = rand() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> r2 = rand() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;You rolled: %d\n&quot;</span>, r1 + r2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> r1 + r2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">play_game</span><span class="params">()</span> &#123;</span><br><span class="line">	srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> tolly = roll_dice();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tolly == <span class="number">7</span> || tolly == <span class="number">11</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;You win!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (tolly == <span class="number">2</span> || tolly == <span class="number">3</span> || tolly == <span class="number">12</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;You lose!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> point = tolly;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Your point is %d&quot;</span>, point);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">		tolly = roll_dice();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (tolly == point) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;You win!\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (tolly == <span class="number">7</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;You lose!\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>每日leetcodeDay002</title>
    <url>/2024/05/04/%E6%AF%8F%E6%97%A5leetcodeDay002/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">res</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>)); <span class="comment">// 使用vector定义一个二维数组，全部元素初始化为零</span></span><br><span class="line">        <span class="type">int</span> di[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> dj[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, d = <span class="number">0</span>, k = <span class="number">1</span>;k &lt;= n * n;k++)&#123;</span><br><span class="line">            res[i][j] = k;</span><br><span class="line">            <span class="type">int</span> iNext = i + di[d];</span><br><span class="line">            <span class="type">int</span> jNext = j + dj[d];</span><br><span class="line">            <span class="keyword">if</span>(iNext &lt; <span class="number">0</span> || iNext &gt;= n || jNext &lt; <span class="number">0</span> || jNext &gt;= n || res[iNext][jNext])&#123;</span><br><span class="line">                d = (d + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">                iNext = i + di[d];</span><br><span class="line">                jNext = j + dj[d];</span><br><span class="line">            &#125;  </span><br><span class="line">            i = iNext;</span><br><span class="line">            j = jNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a><a href="https://leetcode.cn/problems/spiral-matrix/">54. 螺旋矩阵</a></h1><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2>]]></content>
  </entry>
  <entry>
    <title>CDay04C++49</title>
    <url>/2024/05/03/CDay04C-49/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="位运算常见面试题"><a href="#位运算常见面试题" class="headerlink" title="位运算常见面试题"></a>位运算常见面试题</h1><h2 id="请判断一个整数是否为奇数？"><a href="#请判断一个整数是否为奇数？" class="headerlink" title="请判断一个整数是否为奇数？"></a>请判断一个整数是否为奇数？</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOdd</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//return n % 2 != 0;</span></span><br><span class="line">	<span class="keyword">return</span> n &amp; <span class="number">0x1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何判断一个整数是否为2的幂-1-2-4-8-16-…-？"><a href="#如何判断一个整数是否为2的幂-1-2-4-8-16-…-？" class="headerlink" title="如何判断一个整数是否为2的幂(1, 2, 4, 8, 16, …)？"></a>如何判断一个整数是否为2的幂(1, 2, 4, 8, 16, …)？</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPowerOf2</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//int i = 1;</span></span><br><span class="line">	<span class="comment">//while (i &lt; n) &#123;</span></span><br><span class="line">	<span class="comment">//	i *= 2;//i = 1, 2 ,4, 8 ,16 ...</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="comment">////i &gt;= n</span></span><br><span class="line">	<span class="comment">//if (i == n) return true;</span></span><br><span class="line">	<span class="comment">//else return false;</span></span><br><span class="line">	<span class="keyword">return</span> (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="给定一个值不为0的整数，请找出值为1的最低有效位。-last-set-bit"><a href="#给定一个值不为0的整数，请找出值为1的最低有效位。-last-set-bit" class="headerlink" title="给定一个值不为0的整数，请找出值为1的最低有效位。(last set bit)"></a>给定一个值不为0的整数，请找出值为1的最低有效位。(last set bit)</h2><p>输入：<code>n = 24</code></p>
<p>输出：<code>8</code></p>
<p>解释：24的二进制表示为 11000，值为 1 的最低有效位为 2^3。</p>
<p>思路一：判断最低位是否为1，并依次往后移动1位，从而找到last set bit</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lastSetBit1</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">do</span>&#123;</span><br><span class="line">		<span class="comment">//最低位是一</span></span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">0x1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> cnt;</span><br><span class="line">		&#125;</span><br><span class="line">		cnt++;</span><br><span class="line">		n = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	&#125; <span class="keyword">while</span> (n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;rn <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路二：利用x + (-x) &#x3D; 10…00(n个0)的性质</p>
<p><code>n: 1101 1000</code> </p>
<p><code>-n: 0010 1000</code></p>
<p>两者 <code>&amp;</code> 运算得到<code>0000 1000</code>就能判断last set bit</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lastSetBit2</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n &amp; (-n);<span class="comment">//直接得到2的k次方的值是多少</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="给定两个整数-a-和-b，请交换它们两个的值-要求不使用中间临时变量-。"><a href="#给定两个整数-a-和-b，请交换它们两个的值-要求不使用中间临时变量-。" class="headerlink" title="给定两个整数 a 和 b，请交换它们两个的值 (要求不使用中间临时变量)。"></a>给定两个整数 a 和 b，请交换它们两个的值 (要求不使用中间临时变量)。</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure>

<p>如果写成调用函数的形式，记得写成引用类型的形式参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="给你一个-非空整数数组-nums，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。"><a href="#给你一个-非空整数数组-nums，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。" class="headerlink" title="给你一个 非空整数数组 nums，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。"></a>给你一个 非空整数数组 nums，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</h2><p>输入：<code>nums = [1,4,2,1,2]</code></p>
<p>输出：<code>4</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findSingleNum</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> num[] = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">	<span class="type">int</span> length = <span class="built_in">sizeof</span>(num) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">	<span class="type">int</span> result = <span class="built_in">findSingleNum</span>(num, length);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;只出现一次的数字是%d\n&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findSingleNum</span><span class="params">(<span class="type">int</span> num[] ,<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		result = result ^ num[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 如果不在主函数里面求出length的值，传参也不传int n，就不把length的值传进去的话，写成这样会报错：</p>
<p><a href="https://wenku.csdn.net/answer/50620a32acc442feb23b9fecc306de9b">C6384 用另一个值除指针的 sizeof 值</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findSingleNum</span><span class="params">(<span class="type">int</span> num[])</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(num) / <span class="built_in">sizeof</span>(<span class="type">int</span>); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		result = result ^ num[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="给你一个整数数组-nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。-找出只出现一次的那两个元素。你可以按任意顺序返回答案。"><a href="#给你一个整数数组-nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。-找出只出现一次的那两个元素。你可以按任意顺序返回答案。" class="headerlink" title="给你一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按任意顺序返回答案。"></a>给你一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按任意顺序返回答案。</h2><p>输入：<code>nums = [1,2,1,3,2,5]</code></p>
<p>输出：<code>[3,5]</code></p>
<p>解释：<code>[5, 3]</code>也是有效的答案。</p>
<p>思路：通过lsb把原来的数组分成两组，一组有a, x1,x1,x2,x3,….xn,xn;另一组有b, y1,y1,y2,y2…ym,ym</p>
<p>从而套用第五题的做法得出a和b的值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> nums[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span> , <span class="number">5</span> &#125;;</span><br><span class="line">	<span class="comment">//求出 a ^ b</span></span><br><span class="line">	<span class="type">int</span> <span class="keyword">xor</span> = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> length = <span class="built_in">sizeof</span>(nums) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">		<span class="keyword">xor</span> ^= nums[i];</span><br><span class="line">	<span class="comment">//xor = a ^ b</span></span><br><span class="line">	<span class="comment">//求xor的lastSetBit</span></span><br><span class="line">	<span class="type">int</span> lsb = <span class="keyword">xor</span> &amp;(-<span class="keyword">xor</span>);</span><br><span class="line">	<span class="comment">//分成两组</span></span><br><span class="line">	<span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">		<span class="keyword">if</span> (lsb &amp; nums[i]) a ^= nums[i];</span><br><span class="line">		<span class="keyword">else</span> b ^= nums[i];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d&quot;</span>, a, b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>解决微软商店我们这边出了错问题+修改电脑字体</title>
    <url>/2024/05/03/%E8%A7%A3%E5%86%B3%E5%BE%AE%E8%BD%AF%E5%95%86%E5%BA%97%E6%88%91%E4%BB%AC%E8%BF%99%E8%BE%B9%E5%87%BA%E4%BA%86%E9%94%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>发现是这个错误</p>
<p>Windows10应用商店下载应用错误0x80070422</p>
<p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/windows10%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97/a817edfa-d17b-490c-a20c-0c604705f005">Windows10应用商店下载应用错误0x80070422 - Microsoft Community</a></p>
<p>解决方法</p>
<p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/windows/7ecd2147-b808-4d58-8fc9-5bd060b0bd0d">Windows Update无法打开，显示拒绝访问 - Microsoft Community</a></p>
<p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/%E4%BD%BF%E7%94%A8mediacreationtool%E6%97%A0/f7c63824-b74d-4214-bb8a-b1deef4b099e">使用MediaCreationTool无损修复Windows 10系统 - Microsoft Community</a></p>
<p>修改电脑字体</p>
<p><a href="https://www.dians.net/thread-1202.htm">Windows10更换全局字体，快速替换Win10默认字体步骤分享 (dians.net)</a></p>
<p><a href="https://www.dians.net/thread-2643.htm">noMeiryoUI电脑字体修改V3.2.1.1（23&#x2F;09）免费中文版下载 (dians.net)</a></p>
<p><a href="https://github.com/Tatsu-syo/noMeiryoUI/releases">Releases · Tatsu-syo&#x2F;noMeiryoUI (github.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>CDay15Cplusplus49</title>
    <url>/2024/05/02/CDay15Cplusplus49/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="二分查找-Binary-search"><a href="#二分查找-Binary-search" class="headerlink" title="二分查找(Binary search)"></a>二分查找(Binary search)</h2><p>二分查找(Binary search)，也称为折半查找，是一种在<strong>有序数组</strong>中查找<strong>某一特定元素的算法</strong>。  </p>
<h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>二分查找的步骤如下：</p>
<ol>
<li><p>查找过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则查找过程结束。</p>
</li>
<li><p>如果查找的元素小于中间元素，则在左半区间查找；否则在右半区间查找。</p>
</li>
<li><p>这种查找算法每一次比较都会使区间缩小一半，直至找到元素，或者区间为空。</p>
<p>很显然，二分查找的时间复杂度为 O(logn)。</p>
</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归实现</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// [left, right]左闭右闭</span></span><br><span class="line">	<span class="comment">// 边界条件：区间为0</span></span><br><span class="line">	<span class="comment">// 因为是左闭右闭，因此不能带写成left &gt;= right，此时区间为1</span></span><br><span class="line">	<span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="comment">//int mid = left + (right - left &gt;&gt; 1);算术运算符优先级仅次于单目运算符</span></span><br><span class="line">	<span class="comment">// 递归公式</span></span><br><span class="line">	<span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (key == arr[mid]) <span class="keyword">return</span> mid;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid])</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">bsearch</span>(arr, left, mid - <span class="number">1</span>, key);<span class="comment">//比较过了arr[mid],因此写mid - 1</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">bsearch</span>(arr, mid + <span class="number">1</span>, right, key);<span class="comment">//比较过了arr[mid],因此写mid + 1</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search1</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">bsearch</span>(arr, <span class="number">0</span>, n - <span class="number">1</span>, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="循环实现"><a href="#循环实现" class="headerlink" title="循环实现"></a>循环实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//循环方式</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search2</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//[left, right]左闭右闭区间</span></span><br><span class="line">	<span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (left &lt;= right)<span class="comment">//要带等号，唯一的那个元素很可能就是要查找的元素</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = left + (right - left &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (key == arr[mid]) <span class="keyword">return</span> mid;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid]) right = mid - <span class="number">1</span>;<span class="comment">//mid比较过了，因此right = mid - 1</span></span><br><span class="line">		<span class="keyword">else</span> left = mid + <span class="number">1</span>;<span class="comment">//mid比较过了，因此left = mid + 1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// left &gt; right</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二分查找一般都用循环的方式实现。写二分查找时注意以下几点，就能轻松写出 bug free 的代码。</p>
<ol>
<li><p>条件表达式是 <code>left &lt;= right</code> 。<code>left = right</code> 时，说明区间内还有一个元素，该元素也要和 key 值进行比较。</p>
</li>
<li><p>计算 <code>mid</code> 时，注意避免发生溢出。<code>mid = (left + right) / 2</code> 可能会发生溢出，应该写成<code>mid = left + (right - left &gt;&gt; 1)</code></p>
</li>
<li><p><code>left</code> 和 <code>right</code> 的更新。注意不能写成 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">left = mid; </span><br><span class="line">right = mid;</span><br></pre></td></tr></table></figure>

<p>这样可能会导致无限循环(why?)</p>
<p>当区间缩减到只有一个元素时，<code>int mid = left + (right - left &gt;&gt; 1);</code>的mid的值等于left的值也等于right的值，之后再将执行<code>left = mid; </code>或<code>right = mid;</code>时候，区间的大小不变，没有缩减，不会缩减为零一直为一，所以进行死循环。</p>
<p>应该写成 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">left = mid + <span class="number">1</span>; </span><br><span class="line">right = mid - <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>中间元素已经和 key 值比较过了</p>
</li>
</ol>
<h2 id="二分查找的变种"><a href="#二分查找的变种" class="headerlink" title="二分查找的变种"></a>二分查找的变种</h2><h3 id="leetcode别人的图示"><a href="#leetcode别人的图示" class="headerlink" title="leetcode别人的图示"></a>leetcode别人的图示</h3><p><a href="https://leetcode.cn/problems/binary-search/solutions/2639413/javapython3cer-fen-cha-zhao-yi-wen-jiang-guui/">704. 二分查找 - 力扣（LeetCode）</a></p>
<h3 id="查找第一个与-key-相等的元素"><a href="#查找第一个与-key-相等的元素" class="headerlink" title="查找第一个与 key 相等的元素"></a>查找第一个与 key 相等的元素</h3><p><code>int arr[] = &#123; 1, 2, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;</code>这个例子普通的二分查找查找3会返回7</p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找第一个与 key 相等的元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search_first</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//[left, right]左闭右闭区间</span></span><br><span class="line">	<span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (left &lt;= right)<span class="comment">//要带等号，唯一的那个元素很可能就是要查找的元素</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = left + (right - left &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (key == arr[mid])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//如果是第一个</span></span><br><span class="line">			<span class="comment">//利用短路原则，只有key &gt; arr[mid - 1]可能会越界</span></span><br><span class="line">			<span class="keyword">if</span> ((mid == left) || key &gt; arr[mid - <span class="number">1</span>]) <span class="keyword">return</span> mid;</span><br><span class="line">			<span class="comment">//不是第一个</span></span><br><span class="line">			<span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid]) right = mid - <span class="number">1</span>;<span class="comment">//mid比较过了，因此right = mid - 1</span></span><br><span class="line">		<span class="keyword">else</span> left = mid + <span class="number">1</span>;<span class="comment">//mid比较过了，因此left = mid + 1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// left &gt; right</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="查找最后一个与-key-相等的元素"><a href="#查找最后一个与-key-相等的元素" class="headerlink" title="查找最后一个与 key 相等的元素"></a>查找最后一个与 key 相等的元素</h3><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找最后一个与 key 相等的元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search_last</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//[left, right]左闭右闭区间</span></span><br><span class="line">	<span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (left &lt;= right)<span class="comment">//要带等号，唯一的那个元素很可能就是要查找的元素</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = left + (right - left &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (key == arr[mid])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//如果是最后一个</span></span><br><span class="line">			<span class="comment">//利用短路原则，只有key &lt; arr[mid + 1]可能会越界</span></span><br><span class="line">			<span class="keyword">if</span> ((mid == right) || key &lt; arr[mid + <span class="number">1</span>]) <span class="keyword">return</span> mid;</span><br><span class="line">			<span class="comment">//不是最后一个</span></span><br><span class="line">			<span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid]) right = mid - <span class="number">1</span>;<span class="comment">//mid比较过了，因此right = mid - 1</span></span><br><span class="line">		<span class="keyword">else</span> left = mid + <span class="number">1</span>;<span class="comment">//mid比较过了，因此left = mid + 1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// left &gt; right</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Leetcode34-在排序数组中查找元素的第一个和最后一个位置"><a href="#Leetcode34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="Leetcode34. 在排序数组中查找元素的第一个和最后一个位置"></a>Leetcode<a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3><h4 id="思路：调用前面两个二分查找的变种"><a href="#思路：调用前面两个二分查找的变种" class="headerlink" title="思路：调用前面两个二分查找的变种"></a>思路：调用前面两个二分查找的变种</h4><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; range;</span><br><span class="line">    range.<span class="built_in">push_back</span>(<span class="built_in">searchRangeLeft</span>(nums, target));</span><br><span class="line">    range.<span class="built_in">push_back</span>(<span class="built_in">searchRangeRight</span>(nums, target));</span><br><span class="line">    <span class="keyword">return</span> range;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">searchRangeLeft</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> middle = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[middle])</span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[middle])</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (middle == left || nums[middle - <span class="number">1</span>] &lt; target)</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">searchRangeRight</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> middle = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[middle])</span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[middle])</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (middle == right || nums[middle + <span class="number">1</span>] &gt; target)</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="查找第一个大于等于-key-值的元素"><a href="#查找第一个大于等于-key-值的元素" class="headerlink" title="查找第一个大于等于 key 值的元素"></a>查找第一个大于等于 key 值的元素</h3><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找第一个大于等于 key 值的元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search_first_dayudengyu</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//[left, right]左闭右闭区间</span></span><br><span class="line">	<span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (left &lt;= right)<span class="comment">//要带等号，唯一的那个元素很可能就是要查找的元素</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = left + (right - left &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (arr[mid] &gt;= key)<span class="comment">//已经找到了一个大于等于key 的元素，相当于备选方案</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//mid是第一个大于等于key的元素</span></span><br><span class="line">			<span class="keyword">if</span> ((mid == left ) || arr[mid - <span class="number">1</span>] &lt; key) <span class="keyword">return</span> mid;</span><br><span class="line">			<span class="comment">//mid不是第一个大于等于key的元素</span></span><br><span class="line">			<span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// left &gt; right</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查找最后一个小于等于-key-值的元素"><a href="#查找最后一个小于等于-key-值的元素" class="headerlink" title="查找最后一个小于等于 key 值的元素"></a>查找最后一个小于等于 key 值的元素</h3><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找最后一个小于等于 key 值的元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search_last_xiaoyudengyu</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//[left, right]左闭右闭区间</span></span><br><span class="line">	<span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (left &lt;= right)<span class="comment">//要带等号，唯一的那个元素很可能就是要查找的元素</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = left + (right - left &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (arr[mid] &lt;= key)<span class="comment">//已经找到了一个小于等于key 的元素，相当于备选方案</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//mid是最后一个小于等于 key</span></span><br><span class="line">			<span class="keyword">if</span> ((mid == right) || arr[mid + <span class="number">1</span>] &gt; key) <span class="keyword">return</span> mid;</span><br><span class="line">			<span class="comment">//mid不是最后一个小于等于 key</span></span><br><span class="line">			<span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// left &gt; right</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>每日leetcodeDay001</title>
    <url>/2024/05/02/%E6%AF%8F%E6%97%A5leetcodeDay001/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>,  right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(target == nums[mid]) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &lt; nums[mid]) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>DS408+C408lg</title>
    <url>/2023/07/07/DS408+C408lg/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h1><h1 id="第2章-线性表"><a href="#第2章-线性表" class="headerlink" title="第2章 线性表"></a>第2章 线性表</h1><h1 id="第3章-栈、队列和数组"><a href="#第3章-栈、队列和数组" class="headerlink" title="第3章 栈、队列和数组"></a>第3章 栈、队列和数组</h1><h1 id="第4章-串"><a href="#第4章-串" class="headerlink" title="第4章 串"></a>第4章 串</h1><h1 id="第5章-树与二叉树"><a href="#第5章-树与二叉树" class="headerlink" title="第5章 树与二叉树"></a>第5章 树与二叉树</h1><h1 id="第6章-图"><a href="#第6章-图" class="headerlink" title="第6章 图"></a>第6章 图</h1><h1 id="第7章-查找"><a href="#第7章-查找" class="headerlink" title="第7章 查找"></a>第7章 查找</h1><p>为什么要记录这个，事实上，不记录，我电脑的文件里面肯定找不到，然后就忘记了。就像笔记一样，好记性不如烂笔头。</p>
<h2 id="顺序查找和二分查找"><a href="#顺序查找和二分查找" class="headerlink" title="顺序查找和二分查找"></a>顺序查找和二分查找</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType *elem;</span><br><span class="line">    <span class="type">int</span> TableLen;</span><br><span class="line">&#125; SSTable;</span><br><span class="line"><span class="comment">// 顺序查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Search_Seq</span><span class="params">(SSTable ST, ElemType key)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ST.TableLen &amp;&amp; key != ST.elem[i]; i++)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">return</span> i == ST.TableLen ? <span class="number">-1</span> : i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//带哨兵的顺序查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Search_Seq1</span><span class="params">(SSTable ST, ElemType key)</span> </span>&#123;</span><br><span class="line">    ST.elem[<span class="number">0</span>] = key;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = ST.TableLen; key != ST.elem[i]; i--)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//折半查找，二分查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Binary_Search</span><span class="params">(SSTable L, ElemType key)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>, high = L.TableLen - <span class="number">1</span>, mid;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (high - low &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (key &gt; L.elem[mid]) low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; L .elem[mid])</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SSTable t;</span><br><span class="line">    t.TableLen = <span class="number">12</span>;</span><br><span class="line">    t.elem = (ElemType *) <span class="built_in">calloc</span>(t.TableLen, <span class="built_in">sizeof</span>(ElemType));</span><br><span class="line">    t.elem[<span class="number">11</span>] = <span class="number">33</span>;</span><br><span class="line">    t.elem[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">    t.elem[<span class="number">2</span>] = <span class="number">38</span>;</span><br><span class="line">    t.elem[<span class="number">3</span>] = <span class="number">36</span>;</span><br><span class="line">    t.elem[<span class="number">4</span>] = <span class="number">325</span>;</span><br><span class="line">    t.elem[<span class="number">5</span>] = <span class="number">311</span>;</span><br><span class="line">    t.elem[<span class="number">6</span>] = <span class="number">3636</span>;</span><br><span class="line">    t.elem[<span class="number">7</span>] = <span class="number">355</span>;</span><br><span class="line">    t.elem[<span class="number">8</span>] = <span class="number">43</span>;</span><br><span class="line">    t.elem[<span class="number">9</span>] = <span class="number">3543</span>;</span><br><span class="line">    t.elem[<span class="number">10</span>] = <span class="number">322</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">Search_Seq1</span>(t, <span class="number">43</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="分块查找（顺序索引查找）"><a href="#分块查找（顺序索引查找）" class="headerlink" title="分块查找（顺序索引查找）"></a>分块查找（顺序索引查找）</h2><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/DS408C408lg/image-20240527111356403.png" alt="image-20240527111356403"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/DS408C408lg/image-20240527111545105.png" alt="image-20240527111545105"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/DS408C408lg/image-20240527111716412.png" alt="image-20240527111716412"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/DS408C408lg/image-20240527112023383.png" alt="image-20240527112023383"> </p>
<p>代码王道里面没有，</p>
<p>王道代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="comment">//索引表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType maxValue;</span><br><span class="line">    <span class="type">int</span> low, high;</span><br><span class="line">&#125;Index;</span><br><span class="line"><span class="comment">//顺序表存储实际元素</span></span><br><span class="line">ElemType List[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面是网上找的</p>
<p>【查找系列_分块查找(索引顺序查找)[关键在于确定索引项位置]】 <a href="https://www.bilibili.com/video/BV1N24y1Z7eC/?share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1N24y1Z7eC/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">IndexElem</span> &#123;</span><br><span class="line">    <span class="type">int</span> maxKey;</span><br><span class="line">    <span class="type">int</span> low, high;</span><br><span class="line">&#125; IndexElem;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxSize 5</span></span><br><span class="line"><span class="comment">//查找索引项</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">searchIndexPos</span><span class="params">(IndexElem indexTable[], <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里的target比最右边的maxKey还大，也是王道讲的情况</span></span><br><span class="line">    <span class="keyword">if</span> (indexTable[maxSize - <span class="number">1</span>].maxKey &lt; target)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>, high = maxSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="type">int</span> mid = low + (high - low &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (target &lt; indexTable[mid].maxKey)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; indexTable[mid].maxKey)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找失败,这里的return low就是王道讲的情况</span></span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分块查找</span></span><br><span class="line"><span class="comment">//indexElems是每块最大关键字组成的索引项表</span></span><br><span class="line"><span class="comment">//arr表示要查找的关键字序列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">blockSearch</span><span class="params">(IndexElem indexTable[], <span class="type">int</span> arr[], <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> pos = <span class="built_in">searchIndexPos</span>(indexTable, target);</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> low = indexTable[pos].low;</span><br><span class="line">    <span class="type">int</span> high = indexTable[pos].high;</span><br><span class="line">    <span class="comment">//顺序查找</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">20</span>&#125;;</span><br><span class="line">    IndexElem indexTable[maxSize] = &#123;</span><br><span class="line">            &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                    <span class="number">5</span>,</span><br><span class="line">                    <span class="number">3</span>,</span><br><span class="line">                    <span class="number">5</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;<span class="number">8</span>, <span class="number">6</span>, <span class="number">8</span>&#125;,</span><br><span class="line">            &#123;<span class="number">11</span>, <span class="number">9</span>, <span class="number">11</span>&#125;,</span><br><span class="line">            &#123;<span class="number">20</span>, <span class="number">12</span>, <span class="number">14</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">blockSearch</span>(indexTable, arr, <span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><h3 id="C-49的BST的插入"><a href="#C-49的BST的插入" class="headerlink" title="C++49的BST的插入"></a>C++49的BST的插入</h3><p>结构体定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tree_node</span> &#123;</span><br><span class="line">	K key;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">tree_node</span>* left;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">tree_node</span>* right;</span><br><span class="line"></span><br><span class="line">&#125;TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">	TreeNode* root;</span><br><span class="line">	<span class="comment">//把树都信息放在一个单独的结构体里面对他进行抽象</span></span><br><span class="line">	<span class="comment">//不过这里面只有一个指向根节点的指针，你也可以加 int size 等等，看你的需求了</span></span><br><span class="line">&#125;BST;</span><br><span class="line"><span class="comment">//API</span></span><br></pre></td></tr></table></figure>

<p>插入实现，其实这个tree就是二级指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bst_insert</span><span class="params">(BST* tree, K key)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//查找位置 ,先判断一下数里面有没有这个key，没有才创建节点。调用bst_search????</span></span><br><span class="line">	<span class="comment">//一般实现bst里面key的数值是唯一的，不允许重复</span></span><br><span class="line">	TreeNode* parent = <span class="literal">NULL</span>;</span><br><span class="line">	TreeNode* curr = tree-&gt;root;</span><br><span class="line">	<span class="type">int</span> cmp;</span><br><span class="line">	<span class="keyword">while</span> (curr) &#123;</span><br><span class="line">		cmp = key - curr-&gt;key;</span><br><span class="line">		<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			parent = curr;</span><br><span class="line">			curr = curr-&gt;left;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			parent = curr;</span><br><span class="line">			curr = curr-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//curr == NULL,，没有这个key，要分配空间开始插入了</span></span><br><span class="line">	TreeNode* newNode = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="built_in">sizeof</span>(TreeNode));</span><br><span class="line">	<span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;malloc failed in bst_insert\n&quot;</span>);</span><br><span class="line">		<span class="comment">//printf(&quot;malloc failed in bst_insert\n&quot;);</span></span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	newNode-&gt;key = key;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//相当于链表的尾插法，链表的尾插法就是考虑两种情况 1.前面没有结点，链表为空 2. 前面有结点，链表不为空 </span></span><br><span class="line">	<span class="comment">//事实上，只要有跟节点，那么新的节点只能插入在根节点左子树或者右子树，不可能和链表一样插入在第一个节点前面，因此不用考虑插入的节点在根节点之前的情况</span></span><br><span class="line">	<span class="comment">//BST为空。。没有根节点，那么插入的节点就是跟节点</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (parent == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		tree-&gt;root = newNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//插入的位置在根节点后面</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) parent-&gt;left = newNode;</span><br><span class="line">	<span class="keyword">else</span>  parent-&gt;right = newNode;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">// 这个不是二叉平衡数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>王道代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE(a) (sizeof(a) / sizeof(a[0]))</span></span><br><span class="line"><span class="comment">//二叉排序树节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BSTNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BSTNode</span> *lchild, *rchild;</span><br><span class="line">&#125; BSTNode, *BSTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在二叉排序树中查找值为key的节点</span></span><br><span class="line"><span class="function">BSTNode *<span class="title">BST_Search</span><span class="params">(BSTree T, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (T != <span class="literal">NULL</span> &amp;&amp; key != T-&gt;key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; T-&gt;key) T = T-&gt;lchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            T = T-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//走到这里 ，说明找到了T,而且他还满足key == T-&gt;key</span></span><br><span class="line">    <span class="comment">//当时如果T == NULL的话，也是直接走到这里。</span></span><br><span class="line">    <span class="comment">// T可能一开始为NULL,也可能是没查到，即查到了空结点</span></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在二叉排序树中查找值为key的节点， 递归实现</span></span><br><span class="line"><span class="function">BSTNode *<span class="title">BSTSearch</span><span class="params">(BSTree T, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; T-&gt;key) <span class="built_in">BSTSearch</span>(T-&gt;lchild, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; T-&gt;key)</span><br><span class="line">        <span class="built_in">BSTSearch</span>(T-&gt;rchild, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在二叉排序树插入关键字为k的新结点(递归实现)</span></span><br><span class="line"><span class="comment">//个人感觉非递归实现要找前一个结点，让他的指针指向新插入的节点，是不是难了一些</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BST_Insert</span><span class="params">(BSTree &amp;T, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    <span class="comment">//既是一开始树为空，就让他直接插入</span></span><br><span class="line">    <span class="comment">// 又是找到了对应的叶子结点的下面的空结点的位置</span></span><br><span class="line">    <span class="comment">// 在空结点的位置插入</span></span><br><span class="line">    <span class="comment">// 因为在递归里面，这个T其实是可以指，或者说遍历所有节点的</span></span><br><span class="line">    <span class="comment">// 相当于node</span></span><br><span class="line">    <span class="comment">// 因为要修改指针，从指向NULL到指向新结点，</span></span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        T = (BSTNode *) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="built_in">sizeof</span>(BSTNode));</span><br><span class="line">        T-&gt;key = k;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="comment">//递归公式</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; T-&gt;key)</span><br><span class="line">        <span class="built_in">BST_Insert</span>(T-&gt;lchild, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; T-&gt;key)</span><br><span class="line">        <span class="built_in">BST_Insert</span>(T-&gt;rchild, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//树中存在相同的结点，插入失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非递归实现，好像要找前一个结点，好难，不想思考情况，不管了</span></span><br><span class="line"><span class="comment">// 如果不用引用&amp;，好像要用二级指针，所以引用&amp;万岁</span></span><br><span class="line"><span class="comment">// 不会写，不想动脑</span></span><br><span class="line"><span class="comment">// 见C++49里面写的，完全记不清在干嘛了</span></span><br><span class="line"><span class="comment">//难死了，以后都用递归写BST的插入</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BSTInsert</span><span class="params">(BSTree &amp;T, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Create_BST</span><span class="params">(BSTree &amp;T, <span class="type">int</span> str[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    T = <span class="literal">NULL</span>;<span class="comment">//初始时T为空树</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;<span class="comment">//依次将每个关键字插入到二叉排序树当众</span></span><br><span class="line">        <span class="built_in">BST_Insert</span>(T, str[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BSTree T;</span><br><span class="line">    <span class="type">int</span> str[] = &#123;<span class="number">50</span>, <span class="number">66</span>, <span class="number">60</span>, <span class="number">26</span>, <span class="number">21</span>, <span class="number">30</span>, <span class="number">70</span>, <span class="number">68</span>&#125;;</span><br><span class="line">    <span class="type">int</span> size = <span class="built_in">SIZE</span>(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, size);</span><br><span class="line">    <span class="built_in">Create_BST</span>(T, str, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>王道代码没有删除操作，网上找的一个讲的封神的老师的视频</p>
<p>【懒猫老师-数据结构-(58)二叉排序树的删除(二叉查找树)】 <a href="https://www.bilibili.com/video/BV1EK4y1e7UY/?share_source=copy_web&vd_source=82180e49f17daecf14bb6f246fc29cd0">https://www.bilibili.com/video/BV1EK4y1e7UY/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</a></p>
<p>完成了他这一p作业一</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE(a) (sizeof(a) / sizeof(a[0]))</span></span><br><span class="line"><span class="comment">//二叉排序树节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BSTNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BSTNode</span> *lchild, *rchild;</span><br><span class="line">&#125; BSTNode, *BSTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在二叉排序树中查找值为key的节点</span></span><br><span class="line"><span class="function">BSTNode *<span class="title">BST_Search</span><span class="params">(BSTree T, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (T != <span class="literal">NULL</span> &amp;&amp; key != T-&gt;key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; T-&gt;key) T = T-&gt;lchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            T = T-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//走到这里 ，说明找到了T,而且他还满足key == T-&gt;key</span></span><br><span class="line">    <span class="comment">//当时如果T == NULL的话，也是直接走到这里。</span></span><br><span class="line">    <span class="comment">// T可能一开始为NULL,也可能是没查到，即查到了空结点</span></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在二叉排序树中查找值为key的节点， 递归实现</span></span><br><span class="line"><span class="function">BSTNode *<span class="title">BSTSearch</span><span class="params">(BSTree T, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; T-&gt;key) <span class="built_in">BSTSearch</span>(T-&gt;lchild, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; T-&gt;key)</span><br><span class="line">        <span class="built_in">BSTSearch</span>(T-&gt;rchild, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在二叉排序树插入关键字为k的新结点(递归实现)</span></span><br><span class="line"><span class="comment">//个人感觉非递归实现要找前一个结点，让他的指针指向新插入的节点，是不是难了一些</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BST_Insert</span><span class="params">(BSTree &amp;T, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    <span class="comment">//既是一开始树为空，就让他直接插入</span></span><br><span class="line">    <span class="comment">// 又是找到了对应的叶子结点的下面的空结点的位置</span></span><br><span class="line">    <span class="comment">// 在空结点的位置插入</span></span><br><span class="line">    <span class="comment">// 因为在递归里面，这个T其实是可以指，或者说遍历所有节点的</span></span><br><span class="line">    <span class="comment">// 相当于node</span></span><br><span class="line">    <span class="comment">// 因为要修改指针，从指向NULL到指向新结点，</span></span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        T = (BSTNode *) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="built_in">sizeof</span>(BSTNode));</span><br><span class="line">        T-&gt;key = k;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="comment">//递归公式</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; T-&gt;key)</span><br><span class="line">        <span class="built_in">BST_Insert</span>(T-&gt;lchild, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; T-&gt;key)</span><br><span class="line">        <span class="built_in">BST_Insert</span>(T-&gt;rchild, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//树中存在相同的结点，插入失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非递归实现，好像要找前一个结点，好难，不想思考情况，不管了</span></span><br><span class="line"><span class="comment">// 如果不用引用&amp;，好像要用二级指针，所以引用&amp;万岁</span></span><br><span class="line"><span class="comment">// 不会写，不想动脑</span></span><br><span class="line"><span class="comment">// 见C++49里面写的，完全记不清在干嘛了</span></span><br><span class="line"><span class="comment">//难死了，以后都用递归写BST的插入</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BSTInsert</span><span class="params">(BSTree &amp;T, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//神作，讲的很好</span></span><br><span class="line"><span class="comment">// 【懒猫老师-数据结构-(58)二叉排序树的删除(二叉查找树)】 https://www.bilibili.com/video/BV1EK4y1e7UY/?share_source=copy_web&amp;vd_source=82180e49f17daecf14bb6f246fc29cd0</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteNode</span><span class="params">(BSTree &amp;T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">//叶子结点</span></span><br><span class="line">        BSTNode *p = T;</span><br><span class="line">        <span class="comment">//因为T是引用类型，所以此时的T和上一层递归传下来的</span></span><br><span class="line">        <span class="comment">//T.lchild或者T.rchild指向同一片内存空间</span></span><br><span class="line">        <span class="comment">// 可以理解为此时的T是上一层传下来的T.lchild的别名</span></span><br><span class="line">        <span class="comment">// 对同一片内存空间的赋值自然会相互影响，</span></span><br><span class="line">        <span class="comment">// 这就是引用&amp;的实质</span></span><br><span class="line">        <span class="comment">// 老师说的话，T采用引用&amp;，那么T的值一旦发生了任何改变</span></span><br><span class="line">        <span class="comment">// T的值可以被传出去，传给上一级调用它的那个实际参数，</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">delete</span> (p);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T-&gt;rchild == <span class="literal">NULL</span>)<span class="comment">//右子树为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        BSTNode *p = T;</span><br><span class="line">        T = T-&gt;lchild;</span><br><span class="line">        <span class="built_in">delete</span> (p);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T-&gt;lchild == <span class="literal">NULL</span>)<span class="comment">//左子树为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        BSTNode *p = T;</span><br><span class="line">        <span class="comment">//感觉这里的理解，可以看成链表的删除图示</span></span><br><span class="line">        <span class="comment">// 这里的T就是上一层，也就是父节点的孩子指针，</span></span><br><span class="line">        <span class="comment">// 让父节点的孩子指针指向他的孩子的孩子，即指向T-&gt;child</span></span><br><span class="line">        <span class="comment">//也就是T = T-&gt;rchild;</span></span><br><span class="line">        T = T-&gt;rchild;</span><br><span class="line">        <span class="built_in">delete</span> (p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//左右子树都不为空</span></span><br><span class="line">        BSTNode *parent = T;</span><br><span class="line">        BSTNode *pre = T-&gt;lchild;<span class="comment">//因为左右子树都不为空，所以pre肯定不为空</span></span><br><span class="line">        <span class="comment">//转左，然后向右到尽头(找到左子树中最大结点)</span></span><br><span class="line">        <span class="keyword">while</span> (pre-&gt;rchild) &#123;</span><br><span class="line">            parent = pre;</span><br><span class="line">            pre = pre-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        T-&gt;key = pre-&gt;key;<span class="comment">//pre指向要删除的结点的前驱，用它替换删除数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除pre结点，parent-&gt;rchild = NULL;这样就错误了</span></span><br><span class="line">        <span class="keyword">if</span> (parent != T)                 <span class="comment">//判断是否执行了上述while循环</span></span><br><span class="line">            parent-&gt;rchild = pre-&gt;lchild;<span class="comment">//执行了while循环，接parent的右子树</span></span><br><span class="line">        <span class="keyword">else</span>                             <span class="comment">//</span></span><br><span class="line">            <span class="comment">//突然发现这句话有个更好的理解，</span></span><br><span class="line">            <span class="comment">// 就是把赋值符号右边的指针变量，也就是指向某个类型的指针</span></span><br><span class="line">            <span class="comment">// 看作是地址，如本代码看作是pre左孩子的地址</span></span><br><span class="line">            <span class="comment">// 也就是将pre左孩子的地址赋值给了parent的左孩子指针</span></span><br><span class="line">            <span class="comment">// 就好理解，等于是parent的左孩子指针指向了pre的左孩子，</span></span><br><span class="line">            parent-&gt;lchild = pre-&gt;lchild;<span class="comment">//没执行了while循环，接parent的左子树</span></span><br><span class="line">        <span class="built_in">delete</span> (pre);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除操作不讲吗，自己上网查了一个</span></span><br><span class="line"><span class="comment">//下面这个是伪代码，BST的删除算法</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deleteBST</span><span class="params">(BSTree &amp;T, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (T-&gt;key == key) &#123;</span><br><span class="line">        <span class="built_in">deleteNode</span>(T);<span class="comment">//找到关键词，删除一个结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;key)</span><br><span class="line">        <span class="built_in">deleteBST</span>(T-&gt;lchild, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">deleteBST</span>(T-&gt;rchild, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Create_BST</span><span class="params">(BSTree &amp;T, <span class="type">int</span> str[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    T = <span class="literal">NULL</span>;<span class="comment">//初始时T为空树</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;<span class="comment">//依次将每个关键字插入到二叉排序树当众</span></span><br><span class="line">        <span class="built_in">BST_Insert</span>(T, str[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(BSTree T)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, T-&gt;key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BSTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">inOrder</span>(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">visit</span>(T);</span><br><span class="line">    <span class="built_in">inOrder</span>(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BSTree T;</span><br><span class="line">    <span class="type">int</span> str[] = &#123;<span class="number">38</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">98</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">40</span>, <span class="number">78</span>&#125;;</span><br><span class="line">    <span class="type">int</span> size = <span class="built_in">SIZE</span>(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, size);</span><br><span class="line">    <span class="built_in">Create_BST</span>(T, str, size);</span><br><span class="line">    <span class="built_in">inOrder</span>(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> result = <span class="built_in">deleteBST</span>(T, <span class="number">999</span>);</span><br><span class="line">    <span class="built_in">inOrder</span>(T);</span><br><span class="line">    <span class="keyword">if</span> (result)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nTrue&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nFalse&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>  完成了他这一p作业二</p>
<blockquote>
<p>在不增加结点情况下，将二叉排序树转换成有序双向链表</p>
</blockquote>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/DS408C408lg/image-20240527175257195.png"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/DS408C408lg/image-20240527175326020.png" alt="image-20240527175326020"></p>
<p>题目要求不能创建任何新的结点，只需要调整指针的指向，那么就意味着可直接利用二叉树的结点，通过变更结点的左右孩子的指向，来生成双链表的逻辑关系。问题就变成了：</p>
<p>找当前<code>root</code>结点的左孩子最大的结点<code>left_max</code>，和找当前<code>root</code>结点的右孩子最大的结点<code>right_max</code>然后变更各自的指向，依次递归，然后变更指针指向关系：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">left_max-&gt;rchild= root;</span><br><span class="line">root-&gt;lchild = left_max;</span><br><span class="line">right_max-&gt;lchild = root;</span><br><span class="line">root-&gt;rchild = right_max;</span><br></pre></td></tr></table></figure>

<p>————————————————</p>
<p>解题算法</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="第8章-排序"><a href="#第8章-排序" class="headerlink" title="第8章 排序"></a>第8章 排序</h1>]]></content>
      <tags>
        <tag>DataStructure</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda安装与使用</title>
    <url>/2023/07/07/Anaconda%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Anacond的介绍"><a href="#Anacond的介绍" class="headerlink" title="Anacond的介绍"></a>Anacond的介绍</h1><p>Anaconda指的是一个开源的Python发行版本，号称有两千万用户。Anaconda基于云的存储库，可查找并安装超过7,500个数据科学和机器学习模块。</p>
<p>Anaconda官网：<a href="https://link.zhihu.com/?target=https://www.anaconda.com/">https://www.anaconda.com/</a></p>
<p>其包含了conda、Python等180多个科学包及其依赖项。 因为包含了大量的科学包，Anaconda 的下载文件比较大（约 531 MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用Miniconda这个较小的发行版（仅包含conda和 Python）。</p>
<p>Conda是一个开源的包、环境管理器，可以用于在同一个机器上安装不同版本的软件包及其依赖，并能够在不同的环境之间切换</p>
<p>Anaconda包括Conda、Python以及一大堆安装好的工具包，比如：numpy、pandas等</p>
<p>Miniconda包括Conda、Python</p>
<p>Anaconda使用conda-install命令，您可以开始使用数千个开源模块。因为包含了大量的科学包，Anaconda 的下载文件比较大500 MB左右。不同版本Anaconda大小不一样。如果只需要某些包，或者需要节省带宽或存储空间，也可以使用Miniconda这个较小的发行版（仅包含conda和 Python）。conda是一个开源的包、环境管理器，可以用于在同一个机器上安装不同版本的软件包及其依赖，并能够在不同的环境之间切换。</p>
<p>Anaconda主要特点包括：</p>
<p>1.安装过程简单</p>
<p>2.包含了数百个科学模块，高效运用于各种项目</p>
<p>3.可下载python2和python3版本，并根据项目需求切换使用。</p>
<p>Anaconda使用开源社区构建的最佳Python软件包（包括scikit-learn，TensorFlow和PyTorch）构建和训练机器学习模型。</p>
<p>从机器人技术到数据可视化，Anaconda高效运用于各种项目，特别是在数据科学领域有杰出应用。</p>
<p>Anaconda Navigator是Anaconda的桌面可视化窗口导航。 它使启动应用程序以及管理软件包和环境变得很容易，而无需使用命令行命令。 “Anaconda-Navigator”中已经包含“Jupyter Notebook”、“Jupyterlab”、“Qtconsole”和“Spyder”。 用户可以轻松访问培训材料，文档和社区资源（包括<a href="https://link.zhihu.com/?target=http://Anaconda.org">http://Anaconda.org</a>），可加速您的数据科学之旅。</p>
<h2 id="Anaconda下载"><a href="#Anaconda下载" class="headerlink" title="Anaconda下载"></a>Anaconda下载</h2><h3 id="Anaconda官网首页地址"><a href="#Anaconda官网首页地址" class="headerlink" title="Anaconda官网首页地址"></a>Anaconda官网首页地址</h3><p><a href="https://www.anaconda.com/">Anaconda官网</a></p>
<p>进入官网后如下图所示，点击<strong>Download</strong>即可开始下载（若无法下载，请转至清华源下载）</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image002.jpg" alt="img"></p>
<p>下载完成后将会得到exe文件，双击即可开始安装（一般下载完成后会自动打开安装界面无需点击exe文件，若没有自动打开安装页面再点击此exe文件）</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image004.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image006.jpg" alt="img"></p>
<h2 id="Anaconda安装"><a href="#Anaconda安装" class="headerlink" title="Anaconda安装"></a>Anaconda安装</h2><p>在此选择<strong>Just Me(recommended)</strong>—-&gt;点击<strong>Next</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image008.jpg" alt="img"></p>
<p>在此笔者将Anaconda装入E盘（注意安装路径不要包含汉字并且不要包含空格）尽量不要装入系统盘，系统盘的空间资源太宝贵了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image010.jpg" alt="img"></p>
<p>打勾即为使用自动配置环境变量，使用自动配置的环境变量之后在cmd中就可直接运行conda命令，python命令等。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image012.jpg" alt="img"></p>
<p>开始安装</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image014.jpg" alt="img"></p>
<p>点击<strong>Next</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image016.jpg" alt="img"></p>
<p>此处为pycharm的推广，如果有需要的可以点击如图所示链接，当然pycharm也可自行下载，在此笔者直接点击<strong>Next</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image018.jpg" alt="img"></p>
<p>点击<strong>Finish</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image020.jpg" alt="img"></p>
<h2 id="测试Anaconda是否安装配置成功"><a href="#测试Anaconda是否安装配置成功" class="headerlink" title="测试Anaconda是否安装配置成功"></a>测试Anaconda是否安装配置成功</h2><p>输入<a href="https://so.csdn.net/so/search?q=conda%E5%91%BD%E4%BB%A4&spm=1001.2101.3001.7020">conda命令</a>查看是否安装成功</p>
<p> <img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image022.jpg" alt="img"></p>
<p>输入conda -V命令（注意conda与-V之间有一个空格，评论区有好多童鞋反馈文章空格难以看到）可查看当前Anaconda版本</p>
<p> <img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image024.jpg" alt="img"></p>
<p>输入python命令查看是否可以使用python</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Anaconda/downloadANDinstructions/clip_image026.jpg" alt="img"><br> OK！安装完成！</p>
]]></content>
  </entry>
  <entry>
    <title>science free online</title>
    <url>/2023/06/26/science-free-online/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>qq</p>
<p>浅浅记录一下啦</p>
<p><a href="https://github.com/BoyceLig/Clash_Chinese_Patch">https://github.com/BoyceLig/Clash_Chinese_Patch</a></p>
<p><a href="https://okz8.com/">https://okz8.com/</a></p>
<p><a href="https://github.com/freefq/tutorials">https://github.com/freefq/tutorials</a></p>
]]></content>
  </entry>
  <entry>
    <title>解决 windows powershell 和 CMD 中文显示问号及乱码问题的尝试</title>
    <url>/2023/06/26/%E8%A7%A3%E5%86%B3-windows-powershell-%E5%92%8C-CMD-%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E9%97%AE%E5%8F%B7%E5%8F%8A%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E7%9A%84%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>起因是vscode 的terminal输出中文乱码</p>
<p>使用 powershell 或者 CMD 时中文显示乱码，每次都要手动执行 <code>chcp 65001</code></p>
<p>但是修改系统之后</p>
<p>Chcp 还是返回936</p>
<p>虽然vscode输出中文成功了</p>
<p>但是输出中文是失败的</p>
<p>同时解压压缩文件的时候出现了乱码</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/chcp65001/clip_image002.png" alt="img"></p>
<span id="more"></span>

<h2 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h2><p>参考的是下面这种方式</p>
<p><a href="http://t.csdn.cn/Iqa15">http://t.csdn.cn/Iqa15</a></p>
<h2 id="第一次尝试的后遗症"><a href="#第一次尝试的后遗症" class="headerlink" title="第一次尝试的后遗症"></a>第一次尝试的后遗症</h2><p>重启后发现解压压缩文件的时候出现了乱码</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/chcp65001/clip_image003.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/chcp65001/clip_image005.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/chcp65001/clip_image006.png" alt="img"></p>
<p>取消</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/chcp65001/clip_image007.png" alt="img"></p>
<p>后重启乱码又恢复了正常</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/chcp65001/clip_image009.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/chcp65001/clip_image011.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>考研路线方案（模板是知乎的经验贴）</title>
    <url>/2023/06/25/%E8%80%83%E7%A0%94%E8%B7%AF%E7%BA%BF%E6%96%B9%E6%A1%88%EF%BC%88%E6%A8%A1%E6%9D%BF%E6%98%AF%E7%9F%A5%E4%B9%8E%E7%9A%84%E7%BB%8F%E9%AA%8C%E8%B4%B4%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p> <img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/PostgraduateEntranceExamination/v2-a5216f825d769b26bb9e2d25a265e145_1440w.jpg" alt="v2-a5216f825d769b26bb9e2d25a265e145_1440w"></p>
<p>后一天的自己总因为前一天自己的很多现在看来蠢的不行的行为而想打自己一巴掌。</p>
<span id="more"></span>

<p>记录踩过的坑和试错以及自己的心路历程</p>
<p> 【掌握客观规律，是人生破局的利器（这次把客观规律聊得深一点）】 <a href="https://www.bilibili.com/video/BV1Gs4y1S7Qy/?share_source=copy_web&vd_source=12b49fdcdd0ffebaac761ae3ad9f8764">https://www.bilibili.com/video/BV1Gs4y1S7Qy/?share_source=copy_web&amp;vd_source=12b49fdcdd0ffebaac761ae3ad9f8764</a></p>
<p>这个up主的想法转变和大一的我不谋而合，那生不如死的大一一年，这是我唯一记得的事情了。</p>
<p>【放弃熬夜，做清晨的霸主（人生效率的巨变）】 <a href="https://www.bilibili.com/video/BV1r24y1J7E7/?share_source=copy_web&vd_source=12b49fdcdd0ffebaac761ae3ad9f8764">https://www.bilibili.com/video/BV1r24y1J7E7/?share_source=copy_web&amp;vd_source=12b49fdcdd0ffebaac761ae3ad9f8764</a></p>
<p>讲的不错，更我最近总结的东西不谋而合</p>
<p>因为我相信</p>
<p>总结出来的适合自己的路线</p>
]]></content>
  </entry>
  <entry>
    <title>论究竟谁是小丑？</title>
    <url>/2023/06/08/%E8%AE%BA%E7%A9%B6%E7%AB%9F%E8%B0%81%E6%98%AF%E5%B0%8F%E4%B8%91%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f7565e1ec242c66217b1970a6e74ac56ab2b2e7c9574a7724d38c0df2297c310"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>解决Failed to connect to github.com port 443:Connection refused</title>
    <url>/2023/06/07/%E8%A7%A3%E5%86%B3Failed-to-connect-to-github-com-port-443-Connection-refused/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="解决Failed-to-connect-to-github-com-port-443-Connection-refused"><a href="#解决Failed-to-connect-to-github-com-port-443-Connection-refused" class="headerlink" title="解决Failed to connect to github.com port 443:Connection refused"></a><strong>解决Failed to connect to github.com port 443:Connection refused</strong></h1><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/technology/2/clip_image002.png" alt="img"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>因为我是一直挂着代理的。因此如果你也是本地有连接vpn的情况。</p>
<p>通过在终端输入以下命令解决：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>

<p>说明：7890为本地混合配置的端口号</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/technology/2/clip_image004.png" alt="img"></p>
<p>在输入git clone 可以看见成功了。</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo框架Next主题添加自定义Page和专题系列</title>
    <url>/2023/06/07/Hexo%E6%A1%86%E6%9E%B6Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89Page%E5%92%8C%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Hexo框架Next主题添加自定义Page和专题系列"><a href="#Hexo框架Next主题添加自定义Page和专题系列" class="headerlink" title="Hexo框架Next主题添加自定义Page和专题系列"></a>Hexo框架Next主题添加自定义Page和专题系列</h1><p>每天都会解决一些小技术，想发博客但是篇幅太短，总感觉没有水的必要，但是积少成多感觉还是要发，因此为了方便索引。就用专题的形式来组织文章。主要思想是新建一个标签页，然后手动利用站内引用来组织想组织的文章。</p>
 <span id="more"></span>

<p>在整理博客的过程中，发现需要新增一些页面，对于 Hexo 框架来说是 <strong>page</strong> 的概念，例如 <strong>首页</strong> 、 <strong>关于</strong> 、 <strong>分类</strong> 、 <strong>搜索</strong> 等页面。这种页面不同于每一篇博客文章那种发表的内容，对于 Hexo 框架来说是 <strong>post</strong>，而是可以交互的页面，例如可以在 <strong>搜索</strong> 页面中搜索博客的内容，可以在 <strong>分类</strong> 页面中查看博客文章的分类统计。当然，类似于 <strong>关于</strong> 这种页面也是静态的，没有交互的概念。</p>
<p>上面提到的这些页面都是 Next 主题自带的，只要在 <strong>_config.yml</strong> 配置文件中开启相关配置即可，不需要关心它是怎么实现的，例如开启了 <strong>分类</strong> 页面，它会自动把博客的分类统计好，展示出来。但是我的想法其实是新增一个页面，并且自定义图标、名称、内容，其实也可以实现，本文记录这个过程。</p>
<h1 id="自带的页面"><a href="#自带的页面" class="headerlink" title="自带的页面"></a><strong>自带的页面</strong></h1><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Hexo/Page/clip_image002.png" alt="img"></p>
<p>这里面的配置有固定的格式，一共有四列：第一列是展示的名字以及页面标识、第二列是 url 地址、第三列是固定的双竖线、第四列是图标名称。我这里使用 <code>about: /about/ || user</code> 举例，<strong>about</strong> 就是页面的名字【虽然配置的是英文，但是有汉化字典转为中文，汉化字典文件为：<code>themes/next/languages/zh-CN.yml</code>，**&#x2F;about&#x2F;** 是页面的 url 地址，表示从主页跳转的地址，前面加上域名可以直接访问，**||** 双竖线是固定标识符，<strong>user</strong> 是图标名称，来自于一个图标库：<a href="https://fontawesome.com/">https://fontawesome.com</a> 。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Hexo/Page/clip_image004.png" alt="img"></p>
<h2 id="新增页面"><a href="#新增页面" class="headerlink" title="新增页面"></a>新增页面</h2><p>了解完了自带的页面，接下来准备新增自定义页面。</p>
<p>我需要新增的是一个静态页面，名称为 <strong>技术</strong> ，里面会列出我的碰到的一些技术问题，并给出这些技术问题解决的博客的跳转地址。</p>
<h2 id="生成页面并编辑"><a href="#生成页面并编辑" class="headerlink" title="生成页面并编辑"></a>生成页面并编辑</h2><p>经过查询 Hexo 的语法，生成新页面的命令为：**<code>hexo new page name</code>**，page 是关键字，name 表示页面的名字，我直接使用 <strong><code>hexo new page technology</code></strong> 即可。</p>
<p>执行完命令后，可以在 <strong>source</strong> 目录看到生成了一个 technology 目录，</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Hexo/Page/clip_image006.png" alt="img"></p>
<p>里面有一个 index.md 文件，直接编辑这个页面即可。</p>
<p>简单编辑内容如图：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Hexo/Page/clip_image008.png" alt="img"></p>
<p>这里需要注意文件头的内容，有固定的格式：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: technology</span><br><span class="line"></span><br><span class="line">date: 2023-06-07 10:41:56</span><br><span class="line"></span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>

<p>其中，title 就是渲染后 html 网页的居中标题以及网页的 title 标签值，会在浏览器的 tab 页上面显示【这里也可以使用英文名称 technology，但是需要在汉化文件的 title 选项下面增加中英文配置，和后面的 menu 汉化类似】。此外 comments 切记关闭，因为博客如果开启了评论功能，会默认在所有的页面都开启评论框，而这种自定义页面是不需要评论框的，因此选择关闭，即设置为 false。</p>
<h2 id="开启页面配置"><a href="#开启页面配置" class="headerlink" title="开启页面配置"></a>开启页面配置</h2><p>在主题的配置文件 <strong><code>themes/next/_config.yml</code></strong> 中，配置自定义页面，在 <strong>menu</strong> 选项下面，配置内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">technology: /technology/ || fa fa-calendar</span><br></pre></td></tr></table></figure>

<p>截图如下：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Hexo/Page/clip_image009.png" alt="img"></p>
<p>其中，<strong>technology</strong> 是新建的页面名称，**&#x2F;technology&#x2F;** 是链接.</p>
<h2 id="汉化页面名称"><a href="#汉化页面名称" class="headerlink" title="汉化页面名称"></a>汉化页面名称</h2><p>配置 <strong><code>themes/next/languages/zh-CN.yml</code></strong> 文件，也是在 <strong>menu</strong> 选项下面，配置内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">technology: 技术</span><br></pre></td></tr></table></figure>

<p>截图如下：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Hexo/Page/clip_image010.png" alt="img"></p>
<h2 id="打开页面预览"><a href="#打开页面预览" class="headerlink" title="打开页面预览"></a>打开页面预览</h2><p>在博客直接输入 <strong>域名</strong> <strong>&#x2F;technology&#x2F;</strong> 链接，打开页面。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Hexo/Page/clip_image012.png" alt="img"></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>注意，图标是来自于图标库：<a href="https://fontawesome.com/">https://fontawesome.com</a> ，只要提供图标的名字即可，Hexo 会自动匹配对应的图标展示。需要特别注意的是，这里面的图标有大部分是收费的【搜索时会显示灰色状态，能免费使用的才会显示黑色状态】，</p>
<p>失败的图案</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Hexo/Page/clip_image013.png" alt="img"></p>
<p>成功的图案</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Hexo/Page/clip_image014.png" alt="img"></p>
<p>搜索图标结果<br> <img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Hexo/Page/clip_image016.png" alt="img"></p>
<h1 id="专题系列"><a href="#专题系列" class="headerlink" title="专题系列"></a>专题系列</h1><p>由于有些文章有内在的关联性，除了用目录和标签还可以用专题的形式来组织。</p>
<h2 id="新建标签页"><a href="#新建标签页" class="headerlink" title="新建标签页"></a>新建标签页</h2><p>首先利用 hexo 命令新建一个标签页。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page technology</span><br></pre></td></tr></table></figure>

<p>然后修改 themes&#x2F;next&#x2F;_config.yaml menu 配置，增加一行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">technology: /technology/ || fa fa-desktop</span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Hexo/Page/clip_image017.png" alt="img"></p>
<p>然后新增对应中文：修改 <code>themes/next/languages/zh-CN.yml</code> 中的 menu 一项下面添加 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">technology: 技术</span><br></pre></td></tr></table></figure>

<h2 id="编辑-index-md-组织专题目录"><a href="#编辑-index-md-组织专题目录" class="headerlink" title="编辑 index.md 组织专题目录"></a>编辑 index.md 组织专题目录</h2><p>像文章一样编辑 index.md 即可，引用站内文章可以用如下 hexo 语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link post-name post-title %&#125;</span></span><br></pre></td></tr></table></figure>



<p><em>post_link</em>：为站内文章引用的关键字，照抄就行。</p>
<p><em>post-name</em>：为你的 md 文件的名字，不带日期。</p>
<p><em>post-title</em>：给该文章起的链接标题，为空的话就会从文章中提取。</p>
<p>更加详细的标签插件见</p>
<p>Hexo的中文使用说明文档</p>
<p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#%E5%BC%95%E7%94%A8%E6%96%87%E7%AB%A0">https://hexo.io/zh-cn/docs/tag-plugins.html#%E5%BC%95%E7%94%A8%E6%96%87%E7%AB%A0</a></p>
]]></content>
  </entry>
  <entry>
    <title>酷狗下载的kgma和kmg格式转为flac和mp3格式</title>
    <url>/2023/06/01/%E9%85%B7%E7%8B%97%E4%B8%8B%E8%BD%BD%E7%9A%84kgma%E5%92%8Ckmg%E6%A0%BC%E5%BC%8F%E8%BD%AC%E4%B8%BAmp3%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="酷狗下载的kgma和kmg格式转为flac和mp3格式"><a href="#酷狗下载的kgma和kmg格式转为flac和mp3格式" class="headerlink" title="酷狗下载的kgma和kmg格式转为flac和mp3格式"></a>酷狗下载的kgma和kmg格式转为flac和mp3格式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>Kgma格式是酷狗音乐专用的音频格式，是对mp3格式的一种加密封装，只要开通酷狗会员就可以下载到kgma音乐。</p>
<p>通常一般的MP3&#x2F;MP4播放器，车载，HiFi设备等都不能播放kgma格式。下面，介绍几个简单有效的方法，可以让酷狗下载的kgma格式转为mp3格式。</p>
<span id="more"></span>

<p>GIthub上面一个项目可以在线转</p>
<p><strong><a href="https://demo.unlock-music.dev/">https://demo.unlock-music.dev/</a></strong></p>
<p><strong>这是他们的仓库地址</strong></p>
<p><strong><a href="https://github.com/unlock-music/unlock-music">https://github.com/unlock-music/unlock-music</a></strong></p>
<p><strong><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/convert_song%20_ormat/clip_image002.png" alt="img"></strong></p>
<p><strong>亲测可用，感谢他们</strong></p>
<p><strong>本来是kgma后缀的Ditto经过转换之下下载下来的是flac格式了</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/convert_song%20_ormat/clip_image004.jpg" alt="img"></p>
<p><strong>本来是kgm后缀的 暗号 经过转换之下下载下来的是MP3格式了</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/convert_song%20_ormat/clip_image006.jpg" alt="img"></p>
<p>还有其他的方式，详情见别人的回答</p>
<p>酷狗下载的kgma格式怎么转为mp3格式？ - 果师兄的回答 - 知乎</p>
<p><a href="https://www.zhihu.com/question/278420742/answer/2528582514">https://www.zhihu.com/question/278420742/answer/2528582514</a></p>
<p>酷狗下载的kgma格式怎么转为mp3格式？ - 嗨格式数据恢复的回答 - 知乎</p>
<p><a href="https://www.zhihu.com/question/278420742/answer/2865125068">https://www.zhihu.com/question/278420742/answer/2865125068</a></p>
<p>酷狗下载的kgma格式怎么转为mp3格式？ - 小场的回答 - 知乎</p>
<p><a href="https://www.zhihu.com/question/278420742/answer/2865926598">https://www.zhihu.com/question/278420742/answer/2865926598</a></p>
<p>酷狗下载的kgma格式怎么转为mp3格式？ - 一搜君的回答 - 知乎</p>
<p><a href="https://www.zhihu.com/question/278420742/answer/2631510425">https://www.zhihu.com/question/278420742/answer/2631510425</a></p>
<p>有问题：为何localhost:5555的歌曲更新了</p>
<p>但是hexo d之后我的博客里面的歌曲还是没变</p>
<p>好吧，hexo d之后我的博客里面的歌曲变了</p>
<p>可能是因为放在阿里OSS上面存储，加上歌曲文件比较大，hexo d之后大概过了10分钟才加载出来</p>
]]></content>
  </entry>
  <entry>
    <title>IntelliJ IDEA好看的主题设置（支持自定义）</title>
    <url>/2023/05/27/IntelliJ-IDEA%E5%A5%BD%E7%9C%8B%E7%9A%84%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%EF%BC%88%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p><strong>本来这点小事是没必要写一篇博客的，但是无奈导入的过程中遇到了很多问题，而且网上也真的是一个解决办法都没找到，找来找去就那么几篇文章，讲的方法还都差不多！我这里记录的事前事后的经历，给后来人提个醒！</strong></p>
  <span id="more"></span>

<p>现在越来越多的人使用IntelliJ IDEA，你是否想要一个好看的IDEA主题呢？本篇博客教你如何设置一个美美哒IDEA主题，你也可以根据个人喜好自定义喜欢的主题样式。</p>
<h2 id="系统主题设置"><a href="#系统主题设置" class="headerlink" title="系统主题设置"></a><strong>系统主题设置</strong></h2><p>首先进到设置里：File➞Settings➞Appearance&amp;Behavior➞Appearance。</p>
<p>这里默认提供了三套主题：IntelliJ,Darcula，high contrast。这里可以根据个人爱好进行设置。</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121215728060-285111197.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image002.png" alt="img"></a></p>
<p>IntelliJ样式</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121215921841-532285755.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image004.png" alt="img"></a></p>
<p>Darcula样式</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121220249836-262681155.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image006.png" alt="img"></a></p>
<p>high constract样式</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121220428580-680571332.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image008.png" alt="img"></a></p>
<p><strong>系统字体样式</strong></p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121220830476-103133641.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image010.png" alt="img"></a></p>
<h2 id="导入其他IDEA主题"><a href="#导入其他IDEA主题" class="headerlink" title="导入其他IDEA主题"></a>导入其他IDEA主题</h2><p>IDEA默认主题</p>
<p>IDEA默认提供了三个编辑区主题，可以通过如下的方式进行选择。</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121221157590-1069385493.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image012.png" alt="img"></a></p>
<p>更多IDEA主题</p>
<p>如果想要更多主题效果就需要下载主题包，这里提供几个IDEA主题下载的网站：</p>
<p>➣ IDEA Theme官网: <a href="https://plugins.jetbrains.com/search?headline=164-theme&isPaid=false&tags=Theme">☛ 传送门</a></p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326120420636-2081176523.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image014.png" alt="img"></a></p>
<p>➣ riaway官网: <a href="https://www.riaway.com/">☛ 传送门</a></p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121221627810-1795372001.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image016.png" alt="img"></a></p>
<p>➣ easycolor官网: <a href="http://easycolor.cc/index.php">☛ 传送门</a></p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326115814669-948799764.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image018.png" alt="img"></a></p>
<p>➣ Color Themes官网: <a href="http://color-themes.com/?view=index">☛ 传送门</a></p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326120744544-348966698.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image020.png" alt="img"></a></p>
<p>这里给大家提供几个比较好看的主题</p>
<p>One Dark theme样式</p>
<p><a href="https://plugins.jetbrains.com/plugin/11938-one-dark-theme/versions">https://plugins.jetbrains.com/plugin/11938-one-dark-theme/versions</a></p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326121111730-746073794.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image022.png" alt="img"></a></p>
<p><strong>Hiberbee theme</strong></p>
<p><a href="https://plugins.jetbrains.com/plugin/12118-hiberbee-theme/versions">https://plugins.jetbrains.com/plugin/12118-hiberbee-theme/versions</a></p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326122133131-1123202268.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image024.png" alt="img"></a></p>
<p><strong>Monokai_2</strong>样式</p>
<p><a href="https://www.riaway.com/themeshow.php?tid=52$cid=1">https://www.riaway.com/themeshow.php?tid=52$cid=1</a></p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326124337431-728203461.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image026.png" alt="img"></a></p>
<p><strong>Bluloco Light样式</strong></p>
<p>链接失效<br> <del><a href="http://easycolor.cc/idea/detail/28426.html">http://easycolor.cc/idea/detail/28426.html</a></del></p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326125115203-1995625159.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image028.png" alt="img"></a></p>
<p>下载后为如下jar包：</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121221935118-453630242.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image029.png" alt="img"></a></p>
<p>　导入主题：（方式一）</p>
<p>　file → import settings → 选中下载的主题jar文件 → 按提示确认 → 重启程序</p>
<p>　重启以后，新主题会自动启用，如果没有启用，可以如下方式选择：</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121225411378-935228800.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image031.png" alt="img"></a></p>
<p>下载以后导入主题：（方式二）</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121225510306-1650659657.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image033.png" alt="img"></a></p>
<p>卸载编辑区主题插件：</p>
<p>选中要卸载的主题 →Delete，然后重启IDEA</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121225829357-154821125.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image035.png" alt="img"></a></p>
<h2 id="主题优化及字体设置"><a href="#主题优化及字体设置" class="headerlink" title="主题优化及字体设置"></a><strong>主题优化及字体设置</strong></h2><p><strong>设置鼠标滚轮修改字体大小</strong></p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121231358058-66957090.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image037.png" alt="img"></a></p>
<p>我们可以勾选此选项，设置为CTR+鼠标滚轮来控制代码字体大小显示</p>
<p><strong>设置鼠标悬浮提示</strong></p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121231650526-1950401567.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image039.png" alt="img"></a></p>
<p>展示效果：</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121231804815-1819762704.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image041.png" alt="img"></a></p>
<p><strong>设置自动导包功能</strong></p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121232142247-2131104525.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image043.png" alt="img"></a></p>
<p>➣ Add unambiguous imports on the fly：自动导入不明确的结构</p>
<p>➣ Optimize imports on the fly：自动帮我们优化导入的包</p>
<p><strong>设置显示行号和方法间的分隔符</strong></p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121233649415-1013050010.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image045.png" alt="img"></a></p>
<p>展示效果：</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121233843865-118269358.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image047.png" alt="img"></a></p>
<p>➣如上图红圈所示，可以勾选 Show line numbers：显示行数。我建议一般这个要勾选上。</p>
<p>➣如上图红圈所示，可以勾选 Show method separators： 显示方法分隔线。这种线有助于我们区分开方法，所以建议勾选上。</p>
<p><strong>设置tab文件显示</strong></p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121234721481-1520405606.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image049.png" alt="img"></a></p>
<p>如上图标注所示，在打开很多文件的时候，IntelliJ IDEA 默认是把所有打开的文件名 Tab 单行显示的。多行效率比单行高，因为单行会隐藏超过界面部分 Tab，这样找文件不方便，根据个人习惯进行选择。</p>
<p>展示效果：</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121234905264-1089214008.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image051.png" alt="img"></a></p>
<p><strong>设置默认的字体、字体大小、字体行间距</strong></p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200121235318341-136323318.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image053.png" alt="img"></a></p>
<p><strong>修改当前主题的字体、字体大小、字体行间距</strong></p>
<p>如果当前主题不希望使用默认字体样式还可以单独设置</p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200122000209382-1153877851.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image055.png" alt="img"></a></p>
<p><strong>修改当前主题的控制台输出的字体及字体大小</strong></p>
<p><a href="https://img2018.cnblogs.com/i-beta/1924746/202001/1924746-20200122000110506-295663345.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image057.png" alt="img"></a></p>
<h2 id="自定义IDEA主题"><a href="#自定义IDEA主题" class="headerlink" title="自定义IDEA主题"></a>自定义IDEA主题</h2><p>本部分是主题设置的高级部分，不建议小白使用，当然可以以此为基础修改原有主题的部分设置</p>
<p>首先需要进入到选中主题的设置界面：File➞Settings➞Editor➞Color Scheme</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326131144945-228816871.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image058.png" alt="img"></a></p>
<p><strong>设置关键字说明</strong></p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326135832980-1432716486.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image060.png" alt="img"></a></p>
<p><strong>Genera****：通用样式设置</strong></p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326134727331-1790398599.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image062.png" alt="img"></a></p>
<p><strong>Code</strong></p>
<p>☃ Code➞Identifier under caret: return 变量选中框设置</p>
<p>☃ Code➞Identifier under caret(write): 声明变量选中框设置</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326134911570-1482945080.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image063.png" alt="img"></a></p>
<p>☃ Code Line number:行号样式</p>
<p>☃ Code➞Identifier under caret(write): 鼠标所在行的行号样式</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326140134421-1929264341.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image064.png" alt="img"></a></p>
<p>☃ Code➞Matched brace:匹配{}提示</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326140246806-307350270.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image065.png" alt="img"></a></p>
<p>☃ Code➞ Method separator color: 方法分隔线样式</p>
<p>需要在Editor➞ General➞ Appearance中勾选show method separators</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326140526203-1769868965.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image066.png" alt="img"></a></p>
<p>☃ Code➞ TODO defaults:TODO高亮提示</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326140705100-407711487.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image067.png" alt="img"></a></p>
<p><strong>Editor</strong></p>
<p>☃ Editor➞Breadcrumbs: 底部类和方法信息栏样式</p>
<p>current是选中时样式;</p>
<p>Default是默认样式;</p>
<p>Hovered是鼠标在标签上方移动时样式；</p>
<p>Inactive是从一个方法且换到类时显示的样式</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326141022097-1374190618.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image069.png" alt="img"></a></p>
<p>☃ Editor–&gt;Caret:鼠标输入光标颜色</p>
<p>☃ Editor–&gt;Caret row:鼠标所在行背景颜色</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326141144256-928324878.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image070.png" alt="img"></a></p>
<p><strong>Errors and Warnings</strong></p>
<p>☃ 一些错误或者警告提示下划线</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326141550172-1005234702.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image072.png" alt="img"></a></p>
<p><strong>Search Results</strong></p>
<p>☃ 搜索结构加边框提示</p>
<p>Search result:搜索结果变量 对应2</p>
<p>Search result（write access）:写访问，对应1</p>
<p>Text search result:文本搜索结果；对应3</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326142528797-343702955.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image073.png" alt="img"></a></p>
<p><strong>Template</strong></p>
<p>☃ 定义Template模板页面的代码样式</p>
<p>Live Template：实时模板样式</p>
<p>Template variable:模板中变量样式</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326143052591-737321822.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image075.png" alt="img"></a></p>
<p><strong>Text</strong></p>
<p>☃ 一些重要的代码编辑区设置</p>
<p>Background in readonly files：只读的文件背景</p>
<p>Default text:本主题编辑区默认背景和文字颜色，顺便推荐个护眼色（豆沙绿）：#BDF8CA</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326143648456-482939508.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image076.png" alt="img"></a></p>
<p><strong>Language Defaults****：代码编辑区域的一些全局设置</strong></p>
<p>**Braces and Operators :**<strong>符号颜色设置</strong></p>
<p>☃ Braces: { } 样式设置</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326144348522-1557324341.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image077.png" alt="img"></a></p>
<p>☃ Brackets: [ ] 样式设置</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326144435383-967064291.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image078.png" alt="img"></a></p>
<p>☃ Dot: 点 . 样式；Comma: 逗号,样式；Semicolon: 分号； 样式</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326144602107-533742963.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image079.png" alt="img"></a></p>
<p>☃ Operation sign:操作符+-&#x3D;&#x2F;等样式</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326144708767-629158610.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image080.png" alt="img"></a></p>
<p>☃ Parentheses:（ ）样式</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326144819415-447732260.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image081.png" alt="img"></a></p>
<p><strong>Classes****：类相关颜色设置</strong></p>
<p>☃ Class name: 类的名字样式</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326145005484-335839889.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image082.png" alt="img"></a></p>
<p><strong>Comments****：注释颜色设置</strong></p>
<p>☃ Block comment：注释块&#x2F;* *&#x2F; 我的配色#948130</p>
<p>☃ Doc comment: 文档注释</p>
<p> Markup:语言标记如<div>&lt;\div&gt;</p>
<p> Tag:标签，我的配色#7F5D96</p>
<p> Tag value:标签值，我的配色#A48674</p>
<p> Text:注释文字，我的配色#5E7798</p>
<p>☃ Line coment:行注释，我的配色# 9B9B9B</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326150002336-513790726.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image083.png" alt="img"></a></p>
<p><strong>Identifiers：Java标识符设置</strong></p>
<p>Constant :常量</p>
<p>Default：默认值</p>
<p>Function Call：调用方法名样式设置</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326150249499-1762477686.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image084.png" alt="img"></a></p>
<p>Function declaration：被调用过的方法名样式设置</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326150350571-1839689656.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image085.png" alt="img"></a></p>
<p>Global variable：全局变量样式设置</p>
<p>Local variable：局部变量样式</p>
<p>Parameter：参数样式</p>
<p><strong>Inline parameter hints内联参数样式</strong></p>
<p>Current</p>
<p>Default</p>
<p>Highlighted</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326154145346-484753877.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image087.png" alt="img"></a></p>
<p><strong>Keyword****关键字样式</strong></p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326154330070-1960133958.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image088.png" alt="img"></a></p>
<p><strong>Number****数字样式</strong></p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326154624400-753432817.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image089.png" alt="img"></a></p>
<p><strong>String:字符串相关样式</strong></p>
<p>☃ Escape Sequence</p>
<p> Invalid: 无效的，如%?</p>
<p> Valid: 有效的，如\n\t</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326154832941-1605761059.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image090.png" alt="img"></a></p>
<p>☃ String text:字符串字体样式</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326154939622-813076229.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image091.png" alt="img"></a></p>
<p><strong>其他设置</strong></p>
<p>剩余部分不再详细介绍（内容太多太杂，需要使用者自己慢慢摸索）</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326160027762-53489615.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image093.png" alt="img"></a></p>
<p><strong>保存IDEA主题样式</strong></p>
<p>当所有主题样式设置好后，可以将主题导出为对应文件，方便下次使用</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326160334568-482594939.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image095.png" alt="img"></a></p>
<p>填好信息，点击OK,选择存放位置就行了，信息非必填</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326160613310-1312799684.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image096.png" alt="img"></a></p>
<p>自定义主题制作成功，下次直接导入使用即可</p>
<p><a href="https://img2020.cnblogs.com/blog/1924746/202003/1924746-20200326160756369-1336331213.png"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image097.png" alt="img"></a></p>
<p>转载自<a href="https://blog.csdn.net/weixin_43439972/category_9682047.html">༺ཌ༈君☠纤༈ད༻</a></p>
<p>博客园博客：<a href="https://www.cnblogs.com/asio/p/12582311.html">https://www.cnblogs.com/asio/p/12582311.html</a></p>
<h1 id="自己的尝试"><a href="#自己的尝试" class="headerlink" title="自己的尝试"></a>自己的尝试</h1><p>先贴上提到的主题插件网站<a href="https://plugins.jetbrains.com/search?pricingModels=FREE&pricingModels=FREEMIUM&tags=Theme">https://plugins.jetbrains.com/search?pricingModels=FREE&amp;pricingModels=FREEMIUM&amp;tags=Theme</a></p>
<p>因为本人的IntelliJ IDEA是这个2018.3.6</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image098.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image100.png" alt="img"></p>
<p>所以在该网站里面很多版本都不兼容，推荐大家最低还是下载2019+的IntelliJ IDEA。</p>
<p>我唯一一个valid成功的jar包竟然是这样子的乱码</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Zhehang_practical_training/clip_image102.png" alt="img"></p>
<p>然后我还查询了下面这两个相关教程</p>
<p><a href="https://cloud.tencent.com/developer/article/2060630">https://cloud.tencent.com/developer/article/2060630</a></p>
<p><a href="https://blog.csdn.net/qq_44477437/article/details/103097651">https://blog.csdn.net/qq_44477437/article/details/103097651</a></p>
<p>最终也是没有让我这个低版本的换主题，就用了自带的Darcula主题</p>
<p>最后欲哭无泪</p>
<h1 id="最后的总结"><a href="#最后的总结" class="headerlink" title="最后的总结"></a>最后的总结</h1><p>感觉自己太多东西总是习惯性的舍本逐末，IDEA的环境主题是怎么样并不是最重要的，重要的是在规定的时间里面完成实训的任务。我现在可不是闲人（事实上，我前面的做的事情就是在浪费时间😭😭😭）</p>
]]></content>
  </entry>
  <entry>
    <title>Window Terminal</title>
    <url>/2023/05/26/Window-Terminal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>你还在使用 <code>Window</code> 的默认终端吗？<br> 用过 <code>Window</code> 默认终端的都知道，真的太丑、太烂、太落伍。 微软也逐渐意识到这个问题，并在 <code>Build2019</code> 大会上发布了 新一代 <code>Window</code> 终端程序：<code>Window Terminal</code> 。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>第一代产品不没有实现预期的功能，甚至有些严重性的功能缺陷。 但是随着 <code>Window Terminal</code> 的不断更新(目前已经到了 <code>v1.6.10412.0</code>)，个人觉得已经是一个比较不错的的终端了。 支持许多功能诸如：</p>
<ul>
<li>支持各种 <code>Shell</code>的配置文件 ,例如命令行工具、命令提示符、<code>PowerShell</code> 、<code>WSL2</code> ( <code>Linux</code> 子系统)等等</li>
<li>支持自定义主题、样式方案和配置，支持多种配色方案和设置</li>
<li>自定义操作，支持使用多种自定义命令，可以修改默认的键盘快捷方式</li>
<li>可以显示 <code>Unicode</code> 和 <code>UTF-8</code> 字符，支持各种语言的表情符号和字符</li>
<li>支持 <code>GPU</code> 加速文本呈现，提供比默认 <code>Windows</code> 命令行体验更好的性能</li>
<li>支持背景图像, <code>Window     Terminal</code> 窗口中显示背景图像和 <code>gif</code> </li>
<li>命令行参数，可以使用命令行参数将 <code>Window     Terminal</code> 设置为在特定配置中启动</li>
<li>快速高效，并且不会占用太多的内存和电量(这个很重要哦)</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>目前有两个版本，一个是 <code>Window Terminal</code> ,另一个是 <code>Window Terminal Preview</code> 。 区别在于 <code>Window Terminal Preview</code> 版本类似于开发工程版，但是还没有正式 <code>Release</code> , 所以两个版本都可以安装。</p>
<p>安装方法有很多，比如可以直接从 <a href="https://link.zhihu.com/?target=https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?rtc=1&activetab=pivot:overviewtab">Microsoft Store</a> 下载安装。</p>
<p>如果你无法访问 <code>Microsoft Store</code>，<a href="https://link.zhihu.com/?target=https://github.com/microsoft/terminal/releases">Github发布页</a>上发布有内部版本。 如果从 <code>GitHub</code> 安装，<code>Window Terminal</code> 将不会自动更新为新版本。</p>
<p>或者通过 <code>Window</code> 的软件包工具 <a href="https://link.zhihu.com/?target=https://github.com/microsoft/winget-cli">winget</a> (全称： <code>Windows Package Manager Client</code> )安装，类似 <code>Linux</code> 的 <code>apt-get</code> .</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">winget install <span class="attribute">--id</span>=Microsoft.WindowsTerminal -e</span><br></pre></td></tr></table></figure>

<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>安装后打开 <code>Windows Terminal</code> 时，它会在打开的选项卡中通过 <code>PowerShell</code> 作为默认配置文件启动。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/clip_image002.png" alt="img"></p>
<h2 id="支持动态配置文件"><a href="#支持动态配置文件" class="headerlink" title="支持动态配置文件"></a><strong>支持动态配置文件</strong></h2><p>如果安装了多个 <code>shell</code> , <code>Window terminal</code> 会自动创建配置文件。</p>
<h2 id="打开新选项卡"><a href="#打开新选项卡" class="headerlink" title="打开新选项卡"></a><strong>打开新选项卡</strong></h2><p>可以按 <code>ctrl+shift+t</code> 或直接选择窗口上方 <code>+</code>（加号）按钮，打开默认配置文件的新选项卡。 若要打开其他配置文件，请选择 <code>+</code> 按钮旁的 <code>˅</code>（箭头）打开下拉菜单。 然后可以从中选择要打开的配置文件。</p>
<h2 id="打开新窗格"><a href="#打开新窗格" class="headerlink" title="打开新窗格"></a><strong>打开新窗格</strong></h2><p>可以使用窗格并行运行多个 <code>shell</code> 。 若要打开窗格，可以使用 <code>alt+shift+d</code> 。 此键绑定将打开焦点配置文件的重复窗格。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h2><p>若要自定义 <code>Windows Terminal</code> 的设置，请在下拉菜单中选择 “setting”。在左下角点击 “Open JSON file” 会在默认文本编辑器中打开 <code>settings.json</code> 文件。 （默认文本编辑器在 <a href="ms-settings:defaultapps">Windows</a> 设置 中定义。） <code>Windows Terminal</code> 支持自定义影响整个应用程序的全局属性、影响每个配置文件的设置的配置文件属性以及允许你使用键盘与 <code>Windows Terminal</code> 交互的键绑定。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/clip_image004.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/clip_image006.png" alt="img"></p>
<p>当然了，我们可直接通过左上角的选项框部分完成一些基础设置。</p>
<p>下面讲的是通过 修改 setting.json 文件完成高级配置。</p>
<h1 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h1><h2 id="创建自己的配色方案"><a href="#创建自己的配色方案" class="headerlink" title="创建自己的配色方案"></a>创建自己的配色方案</h2><p>可以在 <code>settings.json</code> 文件的 <code>schemes</code> 数组中定义配色方案。 它们是使用以下格式写入的：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Campbell&quot;</span>,</span><br><span class="line"> </span><br><span class="line">    <span class="string">&quot;cursorColor&quot;</span>: <span class="string">&quot;<span class="subst">#FFFFFF</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;selectionBackground&quot;</span>: <span class="string">&quot;<span class="subst">#FFFFFF</span>&quot;</span>,</span><br><span class="line"> </span><br><span class="line">    <span class="string">&quot;background&quot;</span> : <span class="string">&quot;#0C0C0C&quot;</span>,</span><br><span class="line">    <span class="string">&quot;foreground&quot;</span> : <span class="string">&quot;<span class="subst">#CCCCCC</span>&quot;</span>,</span><br><span class="line"> </span><br><span class="line">    <span class="string">&quot;black&quot;</span> : <span class="string">&quot;#0C0C0C&quot;</span>,</span><br><span class="line">    <span class="string">&quot;blue&quot;</span> : <span class="string">&quot;#0037DA&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cyan&quot;</span> : <span class="string">&quot;#3A96DD&quot;</span>,</span><br><span class="line">    <span class="string">&quot;green&quot;</span> : <span class="string">&quot;#13A10E&quot;</span>,</span><br><span class="line">    <span class="string">&quot;purple&quot;</span> : <span class="string">&quot;#881798&quot;</span>,</span><br><span class="line">    <span class="string">&quot;red&quot;</span> : <span class="string">&quot;<span class="subst">#C50F1F</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;white&quot;</span> : <span class="string">&quot;<span class="subst">#CCCCCC</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yellow&quot;</span> : <span class="string">&quot;<span class="subst">#C19C00</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightBlack&quot;</span> : <span class="string">&quot;#767676&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightBlue&quot;</span> : <span class="string">&quot;#3B78FF&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightCyan&quot;</span> : <span class="string">&quot;#61D6D6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightGreen&quot;</span> : <span class="string">&quot;#16C60C&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightPurple&quot;</span> : <span class="string">&quot;<span class="subst">#B4009E</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightRed&quot;</span> : <span class="string">&quot;<span class="subst">#E74856</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightWhite&quot;</span> : <span class="string">&quot;<span class="subst">#F2F2F2</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightYellow&quot;</span> : <span class="string">&quot;<span class="subst">#F9F1A5</span>&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>除 <code>name</code> 以外，每个设置都接受十六进制格式（ <code>&quot;#rgb&quot;</code> 或 <code>&quot;#rrggbb&quot;</code> ）的字符串形式的颜色。 <code>cursorColor</code> 和 <code>selectionBackground</code> 设置是可选的。</p>
<h2 id="包含的配色方案"><a href="#包含的配色方案" class="headerlink" title="包含的配色方案"></a>包含的配色方案</h2><p><code>Windows terminal</code> 将这些配色方案包含在 <code>defaults.json</code> 文件中，可按住 <code>alt</code> 并选择设置按钮来访问该文件。 如果要在一个命令行配置文件中设置配色方案，可以在<code>settings.json</code> 文件中添加 <code>colorScheme</code> 属性，并将配色方案的 <code>name</code> 作为值。</p>
<p>支持的方案有很多。</p>
<h1 id="使用Windows-Terminal的尝试。"><a href="#使用Windows-Terminal的尝试。" class="headerlink" title="使用Windows Terminal的尝试。"></a>使用<strong>Windows Terminal的尝试。</strong></h1><p><strong>您可以通过三种不同的方式在Windows 上转义文件路径：</strong></p>
<ol>
<li>通过将路径（或路径的一部分）括在双引号( ” ) 中。</li>
<li>通过在每个<strong>空格</strong>前添加插入符(^)。 （这仅适用于<strong>命令</strong>提示符&#x2F;CMD，并且似乎不适用于每个<strong>命令</strong>。）</li>
<li>通过在每个<strong>空格</strong>前添加重音符号(&#96;)。 （这仅适用于PowerShell，但它始终有效。）</li>
</ol>
<p>我这里因为下载了<strong>Windows Terminal，所以采用的第三种方法</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/clip_image008.png" alt="img">新建一篇博客试试</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/clip_image010.png" alt="img"></p>
<p>可以看到新建成功了，新的博客名字是WINDOW TERMINAL</p>
<p>（如果不在空格前面加&#96;来转义的话，生成的博客名字只是WINDOW，并不会是WINDOW TERMINAL，因为碰到空格的时候就自动停止了，不会再读取后面的TERMINAL）</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/clip_image012.png" alt="img"></p>
<p>WINDOW TERMINAL换主题的颜色</p>
<p>默认主题是黑色的，我更改成了浅色的</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/clip_image014.png" alt="img"><br> <img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/clip_image016.png" alt="img"></p>
<p>顺便改了改字体和光标</p>
<p>可以看到最后的界面变成这个样子了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/clip_image018.png" alt="img"></p>
<p>网上也有自定义配置主题的，我逛了逛目前有的主题，感觉都不如这个好看，所以我只是附上链接，剩下的可以自己探索</p>
<h2 id="Windows-Terminal-更换主题配色方案-speculatecat的文章-知乎"><a href="#Windows-Terminal-更换主题配色方案-speculatecat的文章-知乎" class="headerlink" title="Windows Terminal 更换主题配色方案 - speculatecat的文章 - 知乎"></a>Windows Terminal 更换主题配色方案 - speculatecat的文章 - 知乎</h2><p><a href="https://zhuanlan.zhihu.com/p/202766437">https://zhuanlan.zhihu.com/p/202766437</a></p>
<h2 id="配色查看网站"><a href="#配色查看网站" class="headerlink" title="配色查看网站"></a>配色查看网站</h2><p><a href="https://link.zhihu.com/?target=https://atomcorp.github.io/themes/">https://atomcorp.github.io/them</a></p>
<h2 id="详解-Windows-Terminal-配置文件-settings-json-启用图形化设置界面-孤单魂随风荡的文章-知乎"><a href="#详解-Windows-Terminal-配置文件-settings-json-启用图形化设置界面-孤单魂随风荡的文章-知乎" class="headerlink" title="详解 Windows Terminal 配置文件 settings.json 启用图形化设置界面 - 孤单魂随风荡的文章 - 知乎"></a>详解 Windows Terminal 配置文件 settings.json 启用图形化设置界面 - 孤单魂随风荡的文章 - 知乎</h2><p><a href="https://zhuanlan.zhihu.com/p/163785375">https://zhuanlan.zhihu.com/p/163785375</a></p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>6月1日： </p>
<p>以前常用的一键三连不行了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/Replenish/clip_image002.png" alt="img"></p>
<p>那么我们在需要同时执行多条命令的时候该怎么办呢</p>
<p>以前在win的cmd上执行多条命令是用<code>&amp;&amp;</code>连接即可，但是这在powershell中并不管用</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/Replenish/clip_image004.png" alt="img"></p>
<p>方法1</p>
<p>使用<code>;</code>号进行连接，如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean ; hexo g ; hexo s -p 5555</span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/Replenish/clip_image006.png" alt="img"></p>
<p>方法2</p>
<p>使用<code>shift+enter</code>换行输入多行命令</p>
<p>在powershell中使用shift+enter表示换行继续输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"> hexo g</span><br><span class="line"></span><br><span class="line"> hexo s -p 5555</span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/WindowTerminal/Replenish/clip_image008.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>40分钟学会Git</title>
    <url>/2023/05/22/Git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>pilipili(bilibili)上面相关的教程大多数对着晦涩难懂的条例念经，为了让小白快速入门，我发现了一个讲的深入浅出的up主，讲解干货满满，弹幕清一色地在视频最后自发地感谢这位up主——<a href="https://space.bilibili.com/20467058">冯雨</a></p>
<p>本人也是看了这位up主的视频，才从一知半解的使用git到现在熟练掌握git的常用操作，秉持着传播优质的开源分享内容给大家，也为了表达自己对他的优质视频的感激之情，特地将他的视频安利给大家。（也算是为他引一波流）</p>
<p>哪怕你是什么都不知道的小白，看了他的视频讲解，动手一起做，你也完全可以轻松掌握绝大部分的git命令行和相关工具的使用。✌</p>
<p>所以还在等什么，快快为他的视频一键三连吧！</p>
<p>【40 分钟学会 Git | 日常开发全程大放送&amp;搭配Github】 <a href="https://www.bilibili.com/video/BV1db4y1d79C/?share_source=copy_web&vd_source=12b49fdcdd0ffebaac761ae3ad9f8764">https://www.bilibili.com/video/BV1db4y1d79C/?share_source=copy_web&amp;vd_source=12b49fdcdd0ffebaac761ae3ad9f8764</a></p>
<span id="more"></span>

<h1 id="课代表笔记"><a href="#课代表笔记" class="headerlink" title="课代表笔记"></a>课代表笔记</h1><p>示例项目 GoGoCode的仓库 <a href="https://github.com/thx/gogocode/">https://github.com/thx/gogocode/</a></p>
<p>搭配食用更佳的 Github 新手够用指南：</p>
<p>【Github 新手够用指南 | 全程演示&amp;个人找项目技巧放送】 <a href="https://www.bilibili.com/video/BV1e541137Tc/?share_source=copy_web&vd_source=12b49fdcdd0ffebaac761ae3ad9f8764">https://www.bilibili.com/video/BV1e541137Tc/?share_source=copy_web&amp;vd_source=12b49fdcdd0ffebaac761ae3ad9f8764</a></p>
<p>软件下载地址：</p>
<p><a href="https://gitforwindows.org/">https://gitforwindows.org/</a><br><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>
<p>用到的命令：</p>
<p>克隆仓库：git clone &lt;git地址&gt;<br>初始化仓库：git init </p>
<p>添加文件到暂存区：git add -A<br>把暂存区的文件提交到仓库：git commit -m “提交信息”<br>查看提交的历史记录：git log –stat</p>
<p>工作区回滚：git checkout <filename><br>撤销最后一次提交：git reset HEAD^1</p>
<p>以当前分支为基础新建分支：git checkout -b <branchname><br>列举所有的分支：git branch<br>单纯地切换到某个分支：git checkout <branchname><br>删掉特定的分支：git branch -D <branchname><br>合并分支：git merge <branchname></p>
<p>推送当前分支最新的提交到远程：git push<br>拉取远程分支最新的提交到本地：git pull</p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p><code>fatal: unable to access &#39;https://github.com/BradTorres/neu-os-experiments.git/&#39;: Recv failure: Connection was reset</code></p>
<p>解决方法：</p>
<p>①依次将如下两条语句复制到git中后，点击回车。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<p>②从Windows搜索中输入打开cmd，将<code>ipconfig/flushdns</code>复制，点击回车，清理DNS缓存</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/Git/image-20230522205013070.png" alt="image-20230522205013070"></p>
<p>再重新试一遍就行了</p>
<h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p><code>Git 提示fatal: remote origin already exists 错误解决办法</code></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/Git/image-20230522205126840.png" alt="image-20230522205126840"></p>
<p>解决办法如下：<br>1、先删除远程 Git 仓库</p>
<blockquote>
<p>$ git remote rm origin</p>
</blockquote>
<p>2、再添加远程 Git 仓库</p>
<blockquote>
<p>$ git remote add origin <a href="https://github.com/BradTorres/neu-os-experiments.git">https://github.com/BradTorres/neu-os-experiments.git</a></p>
</blockquote>
<h1 id="其余的资料"><a href="#其余的资料" class="headerlink" title="其余的资料"></a>其余的资料</h1><p>通过游戏来学习git命令的网站</p>
<p><a href="https://learngitbranching.js.org/?demo=&locale=zh_CN">https://learngitbranching.js.org/?demo=&amp;locale=zh_CN</a></p>
<p>这个对应项目的GitHub仓库</p>
<p><a href="https://github.com/pcottle/learnGitBranching">https://github.com/pcottle/learnGitBranching</a></p>
<p>一个篇关于git有趣的文章</p>
<p><a href="https://ohshitgit.com/">https://ohshitgit.com/</a></p>
]]></content>
      <categories>
        <category>NEU课程</category>
      </categories>
      <tags>
        <tag>课内学习</tag>
      </tags>
  </entry>
  <entry>
    <title>neu-os-experiments</title>
    <url>/2023/05/22/neu-os-experiments/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="neu-os-experiments"><a href="#neu-os-experiments" class="headerlink" title="neu-os-experiments"></a>neu-os-experiments</h1><h2 id="注意注意一定要看！！！"><a href="#注意注意一定要看！！！" class="headerlink" title="注意注意一定要看！！！"></a>注意注意一定要看！！！</h2><p>使用阿里OSS+typora+picgo图床一键自动上传图片的时候，总是会出现复制到md文档里面的图片顺序出现混乱的情况，我的初步猜测是picgo图片上传的时候速度不一样与阿里OSS自动生成的图片ID不一样导致的矛盾。（事实上，我相信有基础的兄弟们就算是看乱序的图片也能对应的上正确的位置）</p>
<p>我想修改来着，但工作量繁琐且收效甚微。（因为我的GitHub仓库有完整的报告，所以直接上我的GitHub仓库吧，</p>
<p><a href="https://github.com/BradTorres/neu-os-experiments">https://github.com/BradTorres/neu-os-experiments</a></p>
<p>如果想看初步粗略看的话，可以接着往下看）</p>
<span id="more"></span>

<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>NEU操作系统实验（共四次）</strong></p>
<p><strong>详情见实验ppt</strong></p>
<p><strong>实验一：三状态转换（五状态，七状态）</strong></p>
<p><strong>实验二：生产者消费者模型</strong></p>
<p><strong>实验三：管道通信与进程同步</strong></p>
<p><strong>实验四：页面置换算法</strong></p>
<p><strong>实验内容说明请参考实验PPT</strong></p>
<h2 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a><strong>实验一</strong></h2><h3 id="一．-实验内容"><a href="#一．-实验内容" class="headerlink" title="一． 实验内容"></a><strong>一．</strong> <strong>实验内容</strong></h3><p>1.设计并实现一个模拟进程状态转换及其相应PCB组织结构变化的程序。</p>
<p>2.独立设计、编写、调试程序。</p>
<p>3.程序界面应能反映出在模拟条件下，进程之间状态转换及其对应的PCB组织的变化。</p>
<p>4.进程的状态模型（三状态、五状态、七状态或其它）可自行选择。</p>
<h3 id="二．-程序流程图"><a href="#二．-程序流程图" class="headerlink" title="二． 程序流程图"></a><strong>二．</strong> <strong>程序流程图</strong></h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image002.jpg" alt="img"></p>
<h3 id="三．-程序描述"><a href="#三．-程序描述" class="headerlink" title="三． 程序描述"></a><strong>三．</strong> <strong>程序描述</strong></h3><p>使用C++进行开发，实现了一个五状态的进程间状态转移的模型。同时设定了内存的机制，具备一定的运行内存限制（100M），若处理进程内存超过系统内存限制则会先被放入等待队列中。完成了界面功能，可以显示实时的不同队列中的进程的id。</p>
<p>自定义了结构体 pcb，组织方式采用的是链表。结构体 pcb用来存储一个进程的 id和指向下一个节点的指针next。同一状态的进程其PCB成一队列，多个状态对应多个不同的队列；</p>
<p>所以这里形成了不同的队列：新建队列、就绪队列、运行队列、阻塞队列。可以实现初始化新建队列、就绪队列、运行队列、阻塞队列以及下述七个操作。</p>
<p>0:exit</p>
<p>1:Dispatch(ReadyQueue-&gt;RunningQueue)</p>
<p>2:Timeout(RunningQueue-&gt;ReadyQueue)</p>
<p>3:Event Wait(RunningQueue-&gt;BlockedQueue)</p>
<p>4:Event Occurs(BlockedQueue-&gt;ReadyQueue)</p>
<p>5:Admit(NewQueue-&gt;ReadyQueue)</p>
<p>6:Release(RunningQueue-&gt;Exit)</p>
<p>定义了 4 个队列，分别用来储存 Ready,Running,Block,New 队列。同时考虑到了非法的输入，对于不同的非法输入都有处理。同时设定了不同操作之间的在不同情况下的连带关系，例如结束进程后会自动把新的就绪态进程派遣到运行队列中等等。</p>
<h3 id="四．-实验结果（部分截图）"><a href="#四．-实验结果（部分截图）" class="headerlink" title="四． 实验结果（部分截图）"></a><strong>四．</strong> <strong>实验结果（部分截图）</strong></h3><p>创建进程</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image002.gif" alt="img"></p>
<p>5:Admit(NewQueue-&gt;ReadyQueue)进入就绪队列。其他操作类似，都是实现进程队列的切换。</p>
<h3 id="五．-部分核心代码"><a href="#五．-部分核心代码" class="headerlink" title="五． 部分核心代码"></a><strong>五．</strong> <strong>部分核心代码</strong></h3><h4 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">pcb</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType id;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">pcb</span> *next;</span><br><span class="line">&#125; pcb;</span><br><span class="line"></span><br><span class="line">pcb *NewQueue, *ReadyQueue, *RunningQueue, *BlockedQueue, *ExitQueue;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="具体函数见我的GitHub仓库"><a href="#具体函数见我的GitHub仓库" class="headerlink" title="具体函数见我的GitHub仓库"></a>具体函数见我的GitHub仓库</h4><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NewQueue = <span class="built_in">create</span>();</span><br><span class="line">    ReadyQueue = <span class="keyword">new</span> pcb;</span><br><span class="line">    ReadyQueue-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    RunningQueue = <span class="keyword">new</span> pcb;</span><br><span class="line">    RunningQueue-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    BlockedQueue = <span class="keyword">new</span> pcb;</span><br><span class="line">    BlockedQueue-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    ExitQueue = <span class="keyword">new</span> pcb;</span><br><span class="line">    ExitQueue-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// RunningQueue和BlockedQueue没有对第一个结点的id赋值，在insert（）之后，属于带头结点的队列，保持和ReadyQueue一样的结构</span></span><br><span class="line">    <span class="built_in">show</span>();</span><br><span class="line">    <span class="type">int</span> ChangeNum;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please choose one of the following actions&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;0:exit&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1:Dispatch(ReadyQueue-&gt;RunningQueue)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2:Timeout(RunningQueue-&gt;ReadyQueue)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;3:Event Wait(RunningQueue-&gt;BlockedQueue)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;4:Event Occurs(BlockedQueue-&gt;ReadyQueue)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;5:Admit(NewQueue-&gt;ReadyQueue)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;6:Release(RunningQueue-&gt;Exit)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; ChangeNum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ChangeNum == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ChangeNum == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ReadyQueue-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (RunningQueue-&gt;next)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">insert</span>(BlockedQueue, RunningQueue-&gt;next);</span><br><span class="line">                    <span class="built_in">del</span>(RunningQueue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">insert</span>(RunningQueue, ReadyQueue-&gt;next);</span><br><span class="line">                <span class="built_in">del</span>(ReadyQueue);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (BlockedQueue-&gt;next)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">insert</span>(BlockedQueue, RunningQueue-&gt;next);</span><br><span class="line">                    <span class="built_in">del</span>(RunningQueue);</span><br><span class="line">                    <span class="built_in">insert</span>(RunningQueue, BlockedQueue-&gt;next);</span><br><span class="line">                    <span class="built_in">del</span>(BlockedQueue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ChangeNum == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (RunningQueue-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ReadyQueue-&gt;next)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">insert</span>(ReadyQueue, RunningQueue-&gt;next);</span><br><span class="line">                    <span class="built_in">del</span>(RunningQueue);</span><br><span class="line">                    <span class="built_in">insert</span>(RunningQueue, ReadyQueue-&gt;next);</span><br><span class="line">                    <span class="built_in">del</span>(ReadyQueue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ChangeNum == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (RunningQueue-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ReadyQueue-&gt;next)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">insert</span>(BlockedQueue, RunningQueue-&gt;next);</span><br><span class="line">                    <span class="built_in">del</span>(RunningQueue);</span><br><span class="line">                    <span class="built_in">insert</span>(RunningQueue, ReadyQueue-&gt;next);</span><br><span class="line">                    <span class="built_in">del</span>(ReadyQueue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">insert</span>(BlockedQueue, RunningQueue-&gt;next);</span><br><span class="line">                    <span class="built_in">del</span>(RunningQueue);</span><br><span class="line">                    <span class="built_in">insert</span>(RunningQueue, BlockedQueue-&gt;next);</span><br><span class="line">                    <span class="built_in">del</span>(BlockedQueue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ChangeNum == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (BlockedQueue-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">insert</span>(ReadyQueue, BlockedQueue-&gt;next);</span><br><span class="line">                <span class="built_in">del</span>(BlockedQueue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ChangeNum == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (NewQueue-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">insert</span>(ReadyQueue, NewQueue-&gt;next);</span><br><span class="line">                <span class="built_in">del</span>(NewQueue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ChangeNum == <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (RunningQueue-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">insert</span>(ExitQueue, RunningQueue-&gt;next);</span><br><span class="line">                <span class="built_in">del</span>(RunningQueue);</span><br><span class="line">                <span class="comment">// del(ExitQueue);释放处于结束状态的进程结点</span></span><br><span class="line">                <span class="comment">// 也可以直接释放RunnningQueue的结点</span></span><br><span class="line">                <span class="keyword">if</span> (ReadyQueue-&gt;next)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">insert</span>(RunningQueue, ReadyQueue-&gt;next);</span><br><span class="line">                    <span class="built_in">del</span>(ReadyQueue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;You can only type in numbers in range(0~6)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">show</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Please choose one of the following actions&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0:exit&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1:Dispatch(ReadyQueue-&gt;RunningQueue)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2:Timeout(RunningQueue-&gt;ReadyQueue)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3:Event Wait(RunningQueue-&gt;BlockedQueue)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;4:Event Occurs(BlockedQueue-&gt;ReadyQueue)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;5:Admit(NewQueue-&gt;ReadyQueue)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;6:Release(RunningQueue-&gt;Exit)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a><strong>实验二</strong></h2><h3 id="一．-实验内容-1"><a href="#一．-实验内容-1" class="headerlink" title="一． 实验内容"></a><strong>一．</strong> <strong>实验内容</strong></h3><p>1.调试、运行给出的程序，从操作系统原理的角度验证程序的正确性。</p>
<p>2.发现并修改程序中的原理性错误或不完善的地方。 </p>
<p>3.鼓励在程序中增加新的功能。完成基本。</p>
<h3 id="二．-程序流程图-1"><a href="#二．-程序流程图-1" class="headerlink" title="二． 程序流程图"></a><strong>二．</strong> <strong>程序流程图</strong></h3><p>见我的GitHub仓库</p>
<h3 id="三．-程序描述-1"><a href="#三．-程序描述-1" class="headerlink" title="三． 程序描述"></a><strong>三．</strong> <strong>程序描述</strong></h3><p>利用写指针和读指针实现了生产者和消费者对缓冲区按顺序进行生产和消费。同时设定了缓冲区 BUFFER，设定了缓冲区的大小。</p>
<p>当缓冲区已满时，再次创建的生产进程会进入阻塞队列中，而下次消费者消费了一个产品后，会自动将阻塞队列中的生产进程执行并将产品放入缓冲区。同理消费者也有消费者阻塞队列，也能在产品生产后自动执行消费进程。</p>
<h3 id="四．-实验结果（部分截图）-1"><a href="#四．-实验结果（部分截图）-1" class="headerlink" title="四． 实验结果（部分截图）"></a><strong>四．</strong> <strong>实验结果（部分截图）</strong></h3><p>按P创建生产进程，将产出产品放入缓冲区。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image002.gif" alt="img"></p>
<p>按C创建消费进程，对缓存区产品进行消费。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image004.gif" alt="img"></p>
<p>当缓冲区满时，新创建的生产者进程会被加入生产者阻塞队列。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image006.gif" alt="img"></p>
<p>当消费者进程执行后，缓冲区重新获得空间，会自动执行阻塞队列中的生产者进程。</p>
<p><strong><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image008.gif" alt="img"></strong></p>
<p>消费者进程同样会被阻塞，并放入阻塞队列。</p>
<p><strong><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image010.gif" alt="img"></strong></p>
<p><strong><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image012.gif" alt="img"></strong></p>
<h3 id="五．-部分核心代码-1"><a href="#五．-部分核心代码-1" class="headerlink" title="五． 部分核心代码"></a><strong>五．</strong> <strong>部分核心代码</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 生产</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">produce</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">findEmpty</span>(buffer, BUFFER_SIZE) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 缓冲区满,阻塞</span></span><br><span class="line">        number = number + <span class="number">1</span>;</span><br><span class="line">        producer++;</span><br><span class="line">        pQueue.<span class="built_in">push</span>(number);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isEmpty</span>(buffer, BUFFER_SIZE))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 缓冲区空</span></span><br><span class="line">        <span class="keyword">if</span> (cQueue.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 消费者等待队列为空,直接写入即可</span></span><br><span class="line">            number = number + <span class="number">1</span>;</span><br><span class="line">            buffer[writeptr] = number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 有阻塞的消费者，先写入再读出</span></span><br><span class="line">            number = number + <span class="number">1</span>;</span><br><span class="line">            buffer[writeptr] = number;</span><br><span class="line">            <span class="built_in">show</span>(); <span class="comment">// 不仅在produce函数运行全部完成后show，在中间就show一次</span></span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line">            buffer[readptr] = <span class="number">0</span>;</span><br><span class="line">            readptr = (readptr + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">            consumer--;</span><br><span class="line">            cQueue.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        writeptr = (writeptr + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 缓冲区不空也不满,直接写入即可</span></span><br><span class="line">        number = number + <span class="number">1</span>;</span><br><span class="line">        buffer[writeptr] = number;</span><br><span class="line">        writeptr = (writeptr + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">findDirty</span>(buffer, BUFFER_SIZE) == <span class="number">-1</span>) <span class="comment">// buffer里面全都是0</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 缓冲区空,则阻塞</span></span><br><span class="line">        <span class="comment">// ++number;但事实上不能让number++，不然number的数值就变了，</span></span><br><span class="line">        consumer++;</span><br><span class="line">        cQueue.<span class="built_in">push</span>(number);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isFull</span>(buffer, BUFFER_SIZE))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 缓冲区满</span></span><br><span class="line">        <span class="keyword">if</span> (!pQueue.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 生产者等待队列不空，则先读出再写入</span></span><br><span class="line">            buffer[readptr] = <span class="number">0</span>;</span><br><span class="line">            readptr = (readptr + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">            <span class="built_in">show</span>(); <span class="comment">// 不仅在consume函数运行全部完成后show，在中间就show一次</span></span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line">            buffer[writeptr] = pQueue.<span class="built_in">front</span>();</span><br><span class="line">            writeptr = (writeptr + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">            pQueue.<span class="built_in">pop</span>();</span><br><span class="line">            producer--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 生产者队列为空</span></span><br><span class="line">            buffer[readptr] = <span class="number">0</span>;</span><br><span class="line">            readptr = (readptr + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 缓冲区不空也不满,直接读取即可</span></span><br><span class="line">        buffer[readptr] = <span class="number">0</span>;</span><br><span class="line">        readptr = (readptr + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a><strong>实验三</strong></h2><h3 id="一．-实验内容-2"><a href="#一．-实验内容-2" class="headerlink" title="一． 实验内容"></a><strong>一．</strong> <strong>实验内容</strong></h3><p>1.使用系统调用pipe()建立一条管道，系统调用fork()分别创建两个子进程，它们分别向管道写一句话，如：</p>
<p>   Child process1 is sending a message!</p>
<p>   Child process2 is sending a message!</p>
<p>2.父进程分别从管道读出来自两个子进程的信息，显示在屏幕上。</p>
<h3 id="二．-程序流程图-2"><a href="#二．-程序流程图-2" class="headerlink" title="二． 程序流程图"></a><strong>二．</strong> <strong>程序流程图</strong></h3><p>见我的GitHub仓库</p>
<h3 id="三．-程序描述-2"><a href="#三．-程序描述-2" class="headerlink" title="三． 程序描述"></a><strong>三．</strong> <strong>程序描述</strong></h3><p>在 linux 系 统 的 环 境 下 使 用 C++ 完 成 实 验 ， 使 用 了 系 统 调 用fork(),read(),write(),pipe(),lockf(),wait(),exit(),sleep()等。随机创建了三个子进程，并且按照相关语句进行输出以检查进程执行顺序。过程中通过加锁解锁和wait函数对进程进行控制。（事实上是n个紫荆城</p>
<p>使用系统调用 pipe()建立一条管道，系统调用 fork()分别创建两个子进程，它们分别向管道写一句话，如：Child process1 is sending a message! Child process2 is sending a message!父进程分别从管道读出来自两个子进程的信息，显示在屏幕上</p>
<h3 id="四．-实验结果（部分截图）-2"><a href="#四．-实验结果（部分截图）-2" class="headerlink" title="四． 实验结果（部分截图）"></a><strong>四．</strong> <strong>实验结果（部分截图）</strong></h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image002.gif" alt="img"></p>
<h3 id="五．-部分核心代码-2"><a href="#五．-部分核心代码-2" class="headerlink" title="五． 部分核心代码"></a><strong>五．</strong> <strong>部分核心代码</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;error.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> F_ULOCK 0 <span class="comment">// 解锁</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> F_LOCK 1  <span class="comment">// 互斥锁定区域</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num, fd[<span class="number">2</span>], result = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">pid_t</span> pid, reid, gtid;</span><br><span class="line">    <span class="type">char</span> outpipe[<span class="number">100</span>], father_str[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建管道, fd[0]读管道，fd[1]写管道</span></span><br><span class="line">    result = <span class="built_in">pipe</span>(fd);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">-1</span>) <span class="comment">// 调用失败</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fail to create pipe \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建子进程</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input the number of processes: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n-------------------------分割线----------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pid: %d\n&quot;</span>, pid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建失败</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;creat subprocess failed!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建子进程，从子进程返回ID</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;now I&#x27;m writing in subprocess %d\n&quot;</span>, gtid = <span class="built_in">getpid</span>());</span><br><span class="line">            <span class="built_in">lockf</span>(fd[<span class="number">1</span>], F_LOCK, <span class="number">0</span>); <span class="comment">// 加锁</span></span><br><span class="line">            <span class="built_in">sprintf</span>(outpipe, <span class="string">&quot;child process %d is sending message!\n&quot;</span>, gtid);</span><br><span class="line">            <span class="built_in">write</span>(fd[<span class="number">1</span>], outpipe, <span class="built_in">sizeof</span>(outpipe));</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">lockf</span>(fd[<span class="number">1</span>], F_ULOCK, <span class="number">0</span>); <span class="comment">// 解锁</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;send message successfully and exit subprocess %d\n&quot;</span>, gtid);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建子进程，从父进程返回子进程的ID</span></span><br><span class="line">            reid = <span class="built_in">wait</span>(<span class="literal">NULL</span>); <span class="comment">// 等待一个子线程结束？？？</span></span><br><span class="line">            <span class="keyword">if</span> (reid == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;father process calls subprocess failed!\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">read</span>(fd[<span class="number">0</span>], father_str, <span class="built_in">sizeof</span>(father_str));</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\nfather process reads from subprocess %d:\n&quot;</span>, reid);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, father_str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n-------------------------分割线----------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="实验四"><a href="#实验四" class="headerlink" title="实验四"></a><strong>实验四</strong></h2><h3 id="一．-实验内容-3"><a href="#一．-实验内容-3" class="headerlink" title="一． 实验内容"></a><strong>一．</strong> <strong>实验内容</strong></h3><p>  这是一个综合型实验，要求在掌握父子进程并发执行机制和内存页面置换算法的基础上，能综合运用这两方面的知识，自行编制程序。</p>
<p>程序涉及一个父进程和两个子进程。父进程使用rand()函数随机产生若干随机数，经过处理后，存于一数组Acess_Series[]中，作为内存页面访问的序列。两个子进程根据这个访问序列，分别采用FIFO和LRU两种不同的页面置换算法对内存页面进行调度。要求：</p>
<p>1） 每个子进程应能反映出页面置换的过程，并统计页面置换算法的命中或缺页情况。</p>
<p>设缺页的次数为diseffect。总的页面访问次数为total_instruction。</p>
<p>缺页率 &#x3D; disaffect&#x2F;total_instruction</p>
<p>命中率 &#x3D; 1- disaffect&#x2F;total_instruction</p>
<p>2）将为进程分配的内存页面数mframe作为程序的参数，通过多次运行程序，说明FIFO算法存在的Belady现象。</p>
<h3 id="二．-程序流程图-3"><a href="#二．-程序流程图-3" class="headerlink" title="二． 程序流程图"></a><strong>二．</strong> <strong>程序流程图</strong></h3><p>见我的GitHub仓库</p>
<h3 id="三．-程序描述-3"><a href="#三．-程序描述-3" class="headerlink" title="三． 程序描述"></a><strong>三．</strong> <strong>程序描述</strong></h3><p>对生产的随机页面数据，开展了FIFO与LRU的页面置换算法，并对置换效果和命中率等信息进行展示。并对FIFO中的Belady现象进行了检验。</p>
<p>完成了基础点： 程序用父进程创建两个子进程， 父进程产生随机序列并完成初始化，两个子进程分别实现 FIFO 算法和 LRU 算法，并分别输出每个状态的内存中页帧状态，最终输出缺页率。</p>
<p>完成了扩展点一： 可以使用父进程创建了两个子进程,两个子进程分别使用不同大小的驻留集，都是用 FIFO 的置换算法，最终可以观察到驻留集更大的子进程反而缺页率更高。</p>
<p>程序涉及一个父进程和两个子进程。父进程使用 rand()函数随机产生若干随机数，经过处理后，存于一数组 Acess_Series[]中，作为内存页面访问的序列。两个子进程根据这个访问序列，分别采用 FIFO 和 LRU 两种不同的页面置换算法对内存页面进行调度。同时统计不同的页面调度算法的缺页率。在 linux 系 统 的 环 境 下 使 用 C++ 并 用 g++ 进 行 编 译 完 成 实 验 ， 使 用 了 系 统 调 用fork(),wait(),exit(),sleep(),rand()等。可以随意修改程序序列的长度。</p>
<h3 id="四．-实验结果（部分截图）-3"><a href="#四．-实验结果（部分截图）-3" class="headerlink" title="四． 实验结果（部分截图）"></a><strong>四．</strong> <strong>实验结果（部分截图）</strong></h3><p>对于随机生产的页面序号分别进行FIFO、LRU进行页面置换，对FIFO进行再一次执行以检验是否有Belady现象发生。</p>
<p>若选择要看Belady异常</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image002.gif" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image004.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image006.jpg" alt="img"></p>
<p>若选择不要看Belady异常</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image008.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/neu_os_experiments/clip_image010.jpg" alt="img"></p>
<h3 id="五．-部分核心代码-3"><a href="#五．-部分核心代码-3" class="headerlink" title="五． 部分核心代码"></a><strong>五．</strong> <strong>部分核心代码</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现FIFO算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FIFO</span><span class="params">(<span class="type">int</span> memory_blocks_number, <span class="type">int</span> choice = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,choice);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nFIFO的内存块数： %d 块\n&quot;</span>, memory_blocks_number);</span><br><span class="line">    <span class="comment">// 这里没有随机化数组元素，之后再加</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    total_instructions为总的页面访问次数</span></span><br><span class="line"><span class="comment">    diseffect为缺页数</span></span><br><span class="line"><span class="comment">    pageid为想访问的页面的序号</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> total_instructions = <span class="number">12</span>;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> Acess_Series[total_instructions] = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (choice == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; total_instructions; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Acess_Series[i] = <span class="built_in">rand</span>() % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// srand((unsigned)time(NULL));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="function">Page_Frame <span class="title">page_Frame</span><span class="params">(memory_blocks_number)</span></span>;</span><br><span class="line">    std::deque&lt;<span class="type">int</span>&gt; fifo_queue; <span class="comment">// 双段队列</span></span><br><span class="line">    <span class="type">int</span> diseffect = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; total_instructions; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pageid = Acess_Series[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;访问页面序号：%d &quot;</span>, pageid);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        对Acess_Series数组里面的数字，判断以下三种情况</span></span><br><span class="line"><span class="comment">        1 内存块中存在此页面,什么都不用做</span></span><br><span class="line"><span class="comment">        2 内存块中无此页面，且内存块未满，直接加入</span></span><br><span class="line"><span class="comment">        3 内存块中无此页面，且内存块已满，取出队列首个元素（FIFO算法）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// find返回的是指针，指向找序列里面第一个出现的地方</span></span><br><span class="line">        <span class="comment">// 存在此页面</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(page_Frame.pageframe_array.<span class="built_in">begin</span>(), page_Frame.pageframe_array.<span class="built_in">end</span>(), pageid) != page_Frame.pageframe_array.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            page_Frame.<span class="built_in">print_info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 无此页面，缺页数先加一</span></span><br><span class="line">            diseffect++;</span><br><span class="line">            fifo_queue.<span class="built_in">push_back</span>(pageid);</span><br><span class="line">            <span class="comment">// 同时内存快未满</span></span><br><span class="line">            <span class="keyword">if</span> (page_Frame.occupied_size &lt; page_Frame.pageframe_size)</span><br><span class="line">            <span class="comment">// if (page_Frame.pageframe_array.size() &lt; page_Frame.pageframe_size)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 直接加入</span></span><br><span class="line">                page_Frame.occupied_size++;</span><br><span class="line">                page_Frame.pageframe_array.<span class="built_in">push_back</span>(pageid);</span><br><span class="line">                page_Frame.<span class="built_in">print_info</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 同时内存块已满</span></span><br><span class="line">                <span class="type">int</span> be_replaced_pageid = fifo_queue.<span class="built_in">front</span>();</span><br><span class="line">                fifo_queue.<span class="built_in">pop_front</span>();</span><br><span class="line">                <span class="keyword">auto</span> be_replaced_pageid_iter = <span class="built_in">find</span>(page_Frame.pageframe_array.<span class="built_in">begin</span>(), page_Frame.pageframe_array.<span class="built_in">end</span>(), be_replaced_pageid);</span><br><span class="line">                *be_replaced_pageid_iter = pageid;</span><br><span class="line">                page_Frame.<span class="built_in">print_info</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;缺页数：%d  缺页率：%f  命中率：%f\n&quot;</span>, diseffect, (<span class="type">float</span>)diseffect / total_instructions, (<span class="number">1</span> - (<span class="type">float</span>)diseffect / total_instructions));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n--------------------------------分割线-------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LRU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> total_instructions = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> Acess_Series[total_instructions] = &#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; total_instructions; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Acess_Series[i] = <span class="built_in">rand</span>() % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Page_Frame <span class="title">page_Frame</span><span class="params">(<span class="number">4</span>)</span></span>; <span class="comment">// 是一个数组</span></span><br><span class="line">    <span class="type">int</span> diseffect = <span class="number">0</span>;        <span class="comment">// 缺页数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; total_instructions; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pageid = Acess_Series[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;访问页面序号：%d &quot;</span>, pageid);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">       对Acess_Series数组里面的数字，判断以下三种情况</span></span><br><span class="line"><span class="comment">       1 内存块中存在此页面,则把其次数置为0即可</span></span><br><span class="line"><span class="comment">       2 内存块中无此页面，且内存块未满，直接加入</span></span><br><span class="line"><span class="comment">       3 内存块中无此页面，且内存块已满，找到最近最久未使用的页面</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt;::iterator iter;</span><br><span class="line">        <span class="keyword">if</span> ((iter = <span class="built_in">find</span>(page_Frame.pageframe_array.<span class="built_in">begin</span>(), page_Frame.pageframe_array.<span class="built_in">end</span>(), pageid)) != page_Frame.pageframe_array.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            page_Frame.<span class="built_in">add_pageframe_array_time</span>();</span><br><span class="line">            <span class="type">int</span> position = std::<span class="built_in">distance</span>(page_Frame.pageframe_array.<span class="built_in">begin</span>(), iter);</span><br><span class="line">            page_Frame.pageframe_array_time.<span class="built_in">at</span>(position) = <span class="number">0</span>; <span class="comment">// 新出现一次，就置成0,越大代表越久没有访问，0代表刚刚访问</span></span><br><span class="line">            page_Frame.<span class="built_in">print_info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 内存中无此页面,缺页数加一</span></span><br><span class="line">            diseffect++;</span><br><span class="line">            <span class="comment">// 且内存块未满，直接加入</span></span><br><span class="line">            <span class="keyword">if</span> (page_Frame.occupied_size &lt; page_Frame.pageframe_size)</span><br><span class="line">            &#123;</span><br><span class="line">                page_Frame.<span class="built_in">add_pageframe_array_time</span>();</span><br><span class="line">                page_Frame.occupied_size++;</span><br><span class="line">                page_Frame.pageframe_array.<span class="built_in">push_back</span>(pageid);</span><br><span class="line">                page_Frame.pageframe_array_time.<span class="built_in">push_back</span>(<span class="number">0</span>); <span class="comment">// 0代表刚刚访问</span></span><br><span class="line">                page_Frame.<span class="built_in">print_info</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 且内存块已满，找到最近最久未使用的页面,也就之找到times次数最大的数组下标</span></span><br><span class="line">                page_Frame.<span class="built_in">add_pageframe_array_time</span>();</span><br><span class="line">                <span class="keyword">auto</span> max_iter = std::<span class="built_in">max_element</span>(page_Frame.pageframe_array_time.<span class="built_in">begin</span>(), page_Frame.pageframe_array_time.<span class="built_in">end</span>());</span><br><span class="line">                <span class="type">int</span> max_position = std::<span class="built_in">distance</span>(page_Frame.pageframe_array_time.<span class="built_in">begin</span>(), max_iter);</span><br><span class="line">                page_Frame.pageframe_array.<span class="built_in">at</span>(max_position) = pageid;</span><br><span class="line">                page_Frame.pageframe_array_time.<span class="built_in">at</span>(max_position) = <span class="number">0</span>;</span><br><span class="line">                page_Frame.<span class="built_in">print_info</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;缺页数：%d  缺页率：%f  命中率：%f\n&quot;</span>, diseffect, (<span class="type">float</span>)diseffect / total_instructions, (<span class="number">1</span> - (<span class="type">float</span>)diseffect / total_instructions));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n--------------------------------分割线-------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="源码和其余参考资料见我的github仓库"><a href="#源码和其余参考资料见我的github仓库" class="headerlink" title="源码和其余参考资料见我的github仓库"></a>源码和其余参考资料见我的github仓库</h1><p><a href="https://github.com/BradTorres/neu-os-experiments">https://github.com/BradTorres/neu-os-experiments</a></p>
]]></content>
      <categories>
        <category>NEU课程</category>
      </categories>
      <tags>
        <tag>课内学习</tag>
      </tags>
  </entry>
  <entry>
    <title>想买一个移动硬盘，有哪些推荐？</title>
    <url>/2023/05/22/%E6%83%B3%E4%B9%B0%E4%B8%80%E4%B8%AA%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%EF%BC%8C%E6%9C%89%E5%93%AA%E4%BA%9B%E6%8E%A8%E8%8D%90%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人打算后面实训完之后格式化一次电脑，然后将电脑装成双系统的，因此就需要一个硬盘存储原来电脑存储的文件。</p>
 <span id="more"></span>



<h1 id="想买一个移动硬盘，有哪些推荐？"><a href="#想买一个移动硬盘，有哪些推荐？" class="headerlink" title="想买一个移动硬盘，有哪些推荐？"></a>想买一个移动硬盘，有哪些推荐？</h1><p>先贴上我选购硬盘时候的指导文章</p>
<p>想买一个移动硬盘，有哪些推荐？ - 林大路的回答 - 知乎</p>
<p><a href="https://www.zhihu.com/question/27516350/answer/847509040">https://www.zhihu.com/question/27516350/answer/847509040</a></p>
<h2 id="自己购买的产品的链接"><a href="#自己购买的产品的链接" class="headerlink" title="自己购买的产品的链接"></a>自己购买的产品的链接</h2><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/SSD/clip_image001.png" alt="QR 代码  描述已自动生成"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/SSD/clip_image002.png" alt="QR 代码  描述已自动生成"></p>
<h2 id="手机拍照实物"><a href="#手机拍照实物" class="headerlink" title="手机拍照实物"></a>手机拍照实物</h2><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/SSD/clip_image004.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/SSD/clip_image006.jpg" alt="img"></p>
<h2 id="我用固态硬盘和硬盘盒制作移动硬盘的参考教程"><a href="#我用固态硬盘和硬盘盒制作移动硬盘的参考教程" class="headerlink" title="我用固态硬盘和硬盘盒制作移动硬盘的参考教程"></a>我用固态硬盘和硬盘盒制作移动硬盘的参考教程</h2><p>【当你用固态硬盘和硬盘盒制作移动硬盘【梵想s690】<a href="https://www.bilibili.com/video/BV1Lc411P7Xd/?share_source=copy_web">https://www.bilibili.com/video/BV1Lc411P7Xd/?share_source=copy_web</a></p>
<h2 id="CrystalDiskinfo"><a href="#CrystalDiskinfo" class="headerlink" title="CrystalDiskinfo"></a>CrystalDiskinfo</h2><p>软件官网</p>
<p><a href="https://crystalmark.info/en/">https://crystalmark.info/en/</a></p>
<p>软件官网的下载页面</p>
<p><a href="https://crystalmark.info/en/download/">https://crystalmark.info/en/download/</a></p>
<p>点击下面的链接会自动下载CrystalDiskinfo的exe可执行文件</p>
<p><a href="https://crystalmark.info/en/download/">https://crystalmark.info/en/download/</a></p>
<h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><p>【磁盘健康度检测软件 | CrystalDiskInfo软件，才5M大小，检测硬盘情况！】 <a href="https://www.bilibili.com/video/BV1Bt4y1J7su/?share_source=copy_web">https://www.bilibili.com/video/BV1Bt4y1J7su/?share_source=copy_web</a></p>
]]></content>
  </entry>
  <entry>
    <title>大数据技术原理与应用华为云实验实时分析</title>
    <url>/2023/04/30/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%AE%9E%E9%AA%8C%E5%AE%9E%E6%97%B6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1.实验目的"></a>1.实验目的</h1><p>l 掌握大数据相关服务的购买及基础配置</p>
<p>l 掌握使用Flume采集数据</p>
<p>l 掌握Flink SQL代码的编写</p>
<p>l 掌握使用DLV进行数据可视化</p>
<p>l 掌握实时流数据的处理流程</p>
<h1 id="2-实验平台与服务"><a href="#2-实验平台与服务" class="headerlink" title="2.实验平台与服务"></a>2.实验平台与服务</h1><p>l <strong>MRS (MapReduce Service)</strong></p>
<p>MapReduce服务是一个在华为云上部署和管理Hadoop系统的服务，一键即可部署Hadoop集群。</p>
<p>l <strong>DLI (Data Lake Insight)</strong></p>
<p>数据湖探索是完全兼容Apache Spark、Apache Flink、openLooKeng（基于Apache Presto）生态，提供一站式的流处理、批处理、交互式分析的Serverless融合处理分析服务。</p>
<p>l <strong>RDS (Relational Database Service)</strong></p>
<p>华为云关系型数据库是一种基于云计算平台的即开即用、稳定可靠、弹性伸缩、便捷管理的在线关系型数据库服务，支持单机和主备部署模式，支持MySQL、PostgreSQL、SQL Server等主流的关系型数据库引擎。</p>
<p>l <strong>CDM (Cloud Data Migration)</strong></p>
<p>云数据迁移是提供同构&#x2F;异构数据源之间批量数据迁移服务，帮助客户实现数据自由流动。</p>
<p>l <strong>DLV (Data Lake Visualization)</strong></p>
<p>数据可视化是一站式数据可视化开发平台，提供丰富多样的2D、3D可视化组件，采用拖拽式自由布局，旨在帮助用户快速定制和应用属于自己的数据大屏。</p>
<h1 id="3-实验步骤与结果"><a href="#3-实验步骤与结果" class="headerlink" title="3.实验步骤与结果"></a>3.实验步骤与结果</h1><h2 id="3-1-大数据相关服务的购买与基本配置"><a href="#3-1-大数据相关服务的购买与基本配置" class="headerlink" title="3.1.大数据相关服务的购买与基本配置"></a>3.1.大数据相关服务的购买与基本配置</h2><h3 id="3-1-1-申请弹性公网ip"><a href="#3-1-1-申请弹性公网ip" class="headerlink" title="3.1.1.申请弹性公网ip"></a>3.1.1.申请弹性公网ip</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image002.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image004.jpg" alt="img"></p>
<h3 id="3-1-2-开通MapReduce服务"><a href="#3-1-2-开通MapReduce服务" class="headerlink" title="3.1.2.开通MapReduce服务"></a>3.1.2.开通MapReduce服务</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image006.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image008.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image010.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image012.jpg" alt="img"></p>
<h3 id="3-1-3-开通云数据库服务RDS"><a href="#3-1-3-开通云数据库服务RDS" class="headerlink" title="3.1.3.开通云数据库服务RDS"></a>3.1.3.开通云数据库服务RDS</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image014.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image016.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image018.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image020.jpg" alt="img"></p>
<h3 id="3-1-4-开通数据湖探索服务"><a href="#3-1-4-开通数据湖探索服务" class="headerlink" title="3.1.4.开通数据湖探索服务"></a>3.1.4.开通数据湖探索服务</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image022.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image024.jpg" alt="img"></p>
<p><strong>配置跨源链接</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image026.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image028.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image030.jpg" alt="img"></p>
<h3 id="3-1-5-开通数据迁移服务CDM"><a href="#3-1-5-开通数据迁移服务CDM" class="headerlink" title="3.1.5.开通数据迁移服务CDM"></a>3.1.5.开通数据迁移服务CDM</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image032.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image034.jpg" alt="img"></p>
<h3 id="3-1-6-开通数据可视化服务DLV"><a href="#3-1-6-开通数据可视化服务DLV" class="headerlink" title="3.1.6.开通数据可视化服务DLV"></a>3.1.6.开通数据可视化服务DLV</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image036.jpg" alt="img"></p>
<h2 id="3-2-大数据实时数据分析开发实战"><a href="#3-2-大数据实时数据分析开发实战" class="headerlink" title="3.2.大数据实时数据分析开发实战"></a>3.2.大数据实时数据分析开发实战</h2><h3 id="3-2-1-Python脚本生成测试数据"><a href="#3-2-1-Python脚本生成测试数据" class="headerlink" title="3.2.1.Python脚本生成测试数据"></a>3.2.1.Python脚本生成测试数据</h3><p>（1）执行Python命令，测试生成100条数据</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image038.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image040.jpg" alt="img"></p>
<p>（2）使用more命令查看生成的数据。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image042.jpg" alt="img"></p>
<h3 id="3-2-2-配置Kafka"><a href="#3-2-2-配置Kafka" class="headerlink" title="3.2.2.配置Kafka"></a>3.2.2.配置Kafka</h3><p>（1）创建topic</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image044.jpg" alt="img"></p>
<p>（2）查看topic信息</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image046.jpg" alt="img"></p>
<h3 id="3-2-3-安装Flume客户端"><a href="#3-2-3-安装Flume客户端" class="headerlink" title="3.2.3.安装Flume客户端"></a>3.2.3.安装Flume客户端</h3><p>（1）进入到MRS Manager界面</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image048.jpg" alt="img"></p>
<p>下载完成后会有弹出框提示下载到哪一台服务器上（这台机器就是master节点），路径就是&#x2F;tmp&#x2F;MRS-client。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image050.jpg" alt="img"></p>
<p>（2）校验下载的客户端文件包</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image052.png" alt="img"></p>
<p>（3）安装Flume运行环境</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image054.png" alt="img"></p>
<h3 id="3-2-4-配置Flume采集数据"><a href="#3-2-4-配置Flume采集数据" class="headerlink" title="3.2.4.配置Flume采集数据"></a>3.2.4.配置Flume采集数据</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image056.png" alt="img"></p>
<h3 id="3-2-5-MySQL中准备结果表和维度数据表"><a href="#3-2-5-MySQL中准备结果表和维度数据表" class="headerlink" title="3.2.5.MySQL中准备结果表和维度数据表"></a>3.2.5.MySQL中准备结果表和维度数据表</h3><p>（1）新建数据库</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image058.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image060.jpg" alt="img"></p>
<p>（2）执行SQL</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image062.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image064.jpg" alt="img"></p>
<p>（3）创建数据表</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image066.jpg" alt="img"></p>
<h3 id="3-2-6-使用DLI中的Flink作业进行数据分析"><a href="#3-2-6-使用DLI中的Flink作业进行数据分析" class="headerlink" title="3.2.6.使用DLI中的Flink作业进行数据分析"></a>3.2.6.使用DLI中的Flink作业进行数据分析</h3><p>（1）编辑SQL并进行语义校验</p>
<p><strong><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image068.png" alt="img"></strong></p>
<p>（2）输入kafka_bootstrap_servers地址，测试连通性</p>
<p><strong><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image070.png" alt="img"></strong></p>
<p>（3）查看作业运行详情      </p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image072.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image074.png" alt="img"></p>
<p>（3）验证数据分析</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image076.jpg" alt="img"></p>
<h3 id="3-2-7-DLV数据可视化"><a href="#3-2-7-DLV数据可视化" class="headerlink" title="3.2.7.DLV数据可视化"></a>3.2.7.DLV数据可视化</h3><p>（1）展示销售额排行前5的门店信息</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image078.jpg" alt="img"></p>
<p>（2）定时执行数据生成脚本</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image079.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image081.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image083.jpg" alt="img"></p>
<h1 id="4-实验总结"><a href="#4-实验总结" class="headerlink" title="4.实验总结"></a>4.实验总结</h1><h2 id="（1）实验完成情况"><a href="#（1）实验完成情况" class="headerlink" title="（1）实验完成情况"></a>（1）实验完成情况</h2><p>实验完成率：100%。</p>
<h2 id="（2）出现的问题与解决方案"><a href="#（2）出现的问题与解决方案" class="headerlink" title="（2）出现的问题与解决方案"></a>（2）出现的问题与解决方案</h2><p>问题1：查找Zookeeper的IP时，Zookeeper的ip有三个，不知道要用哪个。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX1RealTimeAnalysis/clip_image085.jpg" alt="img"></p>
<p>解决：使用两个node-master里面的其中一个IP即可</p>
<p>问题1：对于linux命令不太熟悉。</p>
<p>解决：查找“菜鸟教程”或者命令行下直接在命令末尾“- - h”查看帮助。</p>
<p>问题2：Putty没有显示菜单键，无法duplicate session</p>
<p>解决：重新开启一个Putty，登录相同IP</p>
]]></content>
      <categories>
        <category>大数据技术原理与应用</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>NEU计算机体系结构速通</title>
    <url>/2023/04/29/NEU%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E9%80%9F%E9%80%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="NEU计算机体系结构速通"><a href="#NEU计算机体系结构速通" class="headerlink" title="NEU计算机体系结构速通"></a>NEU计算机体系结构速通</h1><p>本文记载了本人速通NEU计算机体系结构期末考试的一些方法和心得以及一些自己的关于类似现象的思考。话说在前头，这不是什么了不起的事情，因为考的非常简单而且考试题型固定，完完全全可以对症下药。我的同学大多都是速通的，甚至有个室友在我们的帮助下就复习了半天。仅仅是我的一些思考，如果与你的想法有分歧，那就是我错了。最后感谢上课的老师，他的课讲得非常好，但是大家都大三下了，已经没有人会听课了。老师也非常豁达通情达理，完全没有为难我们。毕竟取舍是必须的。</p>
 <span id="more"></span>

<h2 id="复习资料汇总"><a href="#复习资料汇总" class="headerlink" title="复习资料汇总"></a>复习资料汇总</h2><h3 id="NEU上课用的PPT"><a href="#NEU上课用的PPT" class="headerlink" title="NEU上课用的PPT"></a>NEU上课用的PPT</h3><p><a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-1.ppt">计算机系统结构-1.ppt</a></p>
<p><a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-2.PPT">计算机系统结构-2.PPT</a></p>
<p><a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-5.PPT">计算机系统结构-5.PPT</a></p>
<p><a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-34.PPT">计算机系统结构-34.PPT</a></p>
<h3 id="PPT使用的参考书籍"><a href="#PPT使用的参考书籍" class="headerlink" title="PPT使用的参考书籍"></a>PPT使用的参考书籍</h3><p><a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/12138_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89.pdf">12138_计算机系统结构教程（第2版）.pdf</a></p>
<h3 id="乔老师最后划的重点"><a href="#乔老师最后划的重点" class="headerlink" title="乔老师最后划的重点"></a>乔老师最后划的重点</h3><p><a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.doc">期末复习.doc</a></p>
<p><a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0final%E8%87%AA%E6%95%B4%E7%90%86%E7%AD%94%E6%A1%88%E7%89%88%E6%9C%AC.doc">期末复习final自整理答案版本.doc</a></p>
<h2 id="针对考试的复习总结"><a href="#针对考试的复习总结" class="headerlink" title="针对考试的复习总结"></a>针对考试的复习总结</h2><p>因为是开卷考试，所以可以带入相关资料。我带了四个PPT，课本，<a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0final%E8%87%AA%E6%95%B4%E7%90%86%E7%AD%94%E6%A1%88%E7%89%88%E6%9C%AC.doc">期末复习final自整理答案版本.doc</a>和往年题（只有17年之前的，但不知道怎么回事，22期末和21期中都流出来了）</p>
<p>整体复习流程以上面的资料为主，同时我拿到了我们学校以往的计算机体系结构的真题。实话实说，很负责的说，上面7个资料加起来都没有往年真题效果好😂。</p>
<p>这可能就是像我们这样的普通大学的通病吧。</p>
<p>因为开卷考试，出卷子的老师不故意为难我们，总是会考往年的原题。以前可能在选择题和填空题里面出原题，然后大题计算题考点是固定的，公式知识点简单理解一下背诵记住就可以了。五道计算题每年几乎只有一道题型会变动，另外四道题型不变动。</p>
<p>今年甚至更离谱，计算题直接考了两道原题，一道数据都不变，另一道就改了一下数字。🤡</p>
<h2 id="复习过程中的意外收获"><a href="#复习过程中的意外收获" class="headerlink" title="复习过程中的意外收获"></a>复习过程中的意外收获</h2><p>我花了两天时间速通，早上起的也不算早，晚上复习到11点就没有复习了。饭也是正常吃的。前前后后花的时间并不多，总而言之，足以见到开卷考试的难度，就是很水的考试。（考试没有含金量，也不能说明我怎么样，再三申明，我是很菜很菜的菜狗。）</p>
<h3 id="第一个难点-理解概念"><a href="#第一个难点-理解概念" class="headerlink" title="第一个难点 理解概念"></a>第一个难点 理解概念</h3><p>我是对照着<a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.doc">期末复习.doc</a>在老师给的四个PPT里面ctrl+f定位到相应页数，然后阅读一遍相关概念，如果还是不懂的话，就看更加详细的书本阅读理解一遍。同时定位ppt相关内容的过程，我顺便制作了<a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0final%E8%87%AA%E6%95%B4%E7%90%86%E7%AD%94%E6%A1%88%E7%89%88%E6%9C%AC.doc">期末复习final自整理答案版本.doc</a>分享给我的室友参考。（后来那位仅复习了半天的室友称赞这个<a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0final%E8%87%AA%E6%95%B4%E7%90%86%E7%AD%94%E6%A1%88%E7%89%88%E6%9C%AC.doc">期末复习final自整理答案版本.doc</a>是神级资料😉，看来制作知识点的索引还是挺有效的嘛）</p>
<h3 id="第二个难点-计算题"><a href="#第二个难点-计算题" class="headerlink" title="第二个难点 计算题"></a>第二个难点 计算题</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>通过复习（<del>预习</del>）PPT上面的例题以及课后的练习题<a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E4%BD%9C%E4%B8%9A.doc">第一章作业.doc</a>和<a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E4%BD%9C%E4%B8%9A%E9%A2%98.doc">第二章作业题.doc</a>。同时在网上找相关题目的讲解（并没有完善的视频，但是能找到一道题目的正确讲解都算是很大的帮助了，例如这个视频<a href="https://www.bilibili.com/video/BV1iY411g7HJ/?p=6&share_source=copy_web">【【自考】计算机系统结构 02325 零基础大题保姆式精讲 学完必过】</a>就只有P6的大题对我有帮助，仅仅是一题，但讲的够好就足够了）。如果还是不懂的话，就看课本对应章节的例题，课本上面的文字总是非常详细的。</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>寻求同学帮助。</p>
<p>事实上，这种方式比方法一好得多得多。教学相长也。跟着室友一起学，他看一个题型的计算题，我看另一个题型的计算题，看懂之后在互相教对方，效率极高。而且能够在对方的提问中，让自己对这道题的理解更深。当然具体方法实施策略肯定不止于此，但是跟着室友一起复习，相信我，只有交流的是考试题目，无论是提问者还是被提问者的消化吸收理解概念记忆做题套路的速度都非常快。非常非常适合速通。</p>
<h3 id="第三个难点-没有合适练习题"><a href="#第三个难点-没有合适练习题" class="headerlink" title="第三个难点 没有合适练习题"></a>第三个难点 没有合适练习题</h3><p>就我而言，因为是速通，因为考试本身就是很水，因此只要做真题就够了。</p>
<p>真题不会就问会的同学，互相交流学习提问。会了一个题型就看别的年份考的相同的题型来检测巩固自己。因为是开卷，就算忘记公式或者是做题步骤，直接翻资料就好。</p>
<h2 id="贴上一些复习过程中别的帮助"><a href="#贴上一些复习过程中别的帮助" class="headerlink" title="贴上一些复习过程中别的帮助"></a>贴上一些复习过程中别的帮助</h2><p>1.这是一个同学不知道从哪里找到的资料。我瞥了一眼，有些东西有用，但是我当时速通进入尾声，题型资料都找好对应的，不需要再带这个。所以就没有打印</p>
<p><a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.pdf">计算机体系结构.pdf</a></p>
<p>2.这是我们期中考试的资料（事实上NEUer考过这门课期中考试DDDD）最终期末复习时甚至完全没看这份资料，打印更是不可能了。</p>
<p><a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E6%9C%9F%E4%B8%AD%E8%AF%95%E5%8D%B72023.pdf">期中试卷2023.pdf</a></p>
<p>3.这是BILIBILI搜到的一个讲的很好的面向考试的UP主。其中有讲大题的章节对我理解题目的思路很有帮助。其实还是很有帮助的，类似于旁敲侧击的学习。还是愿称之为BILIBILI最好的计算机体系结构的视频。</p>
<p><a href="https://www.bilibili.com/video/BV11f4y1A7BH/?share_source=copy_web">【【从开学到期末】计算机体系结构——学习伴侣&#x2F;小白必备&#x2F;三分钟知识点&#x2F;预习复习考试一条龙】 </a></p>
<p>这是她的笔记</p>
<p><a href="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/CSEfromNEU/ComputerArchitecture/%E5%95%8A%E6%88%91%E6%9C%89%E5%85%94%E5%AD%90%E7%89%99%E2%80%94%E2%80%94%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0.docx">啊我有兔子牙——体系结构复习.docx</a></p>
<h2 id="最后考完的马后炮"><a href="#最后考完的马后炮" class="headerlink" title="最后考完的马后炮"></a>最后考完的马后炮</h2><p>（考完之后才发现，还是对着真题做，理解，背更有针对性）</p>
<h1 id="考后余声"><a href="#考后余声" class="headerlink" title="考后余声"></a>考后余声</h1><p>0.更加巩固了我之前的感悟，就我这种普通人，学习不过是背诵记忆。</p>
<p>1.就算是理科或者是工科也是。理解那些复杂的概念，不过是帮助你更好更快的背诵记忆而已。老师讲的思路，做题的方法，要怎么这么思考，这些抽象的东西，其实你只要记忆就好，然后做题的时候运用出来。虽然不是文科那样子具体的概念，但是对我们而言没有区别，只要理解记忆做题的时候运用就好了。甚至考试的时候你才会发现，底层的概念根本不考，自己第一遍学的时候完完全全理解一边就够了，其余的全是浪费时间。（举例子，100分的卷子，可能你学20小时拿到了98分，但是你一定可以花10小时拿到80分，相信我，你只要记忆就好了，纠结概念牛角尖没有意义，考完试就忘的干净。难听一点说，考试的意义就是拿分数，其余的都是别人自欺欺人，笑死我了。😋。高考的分数就是一切的意义，不用自己骗自己，也不要拿热爱所谓的自己宝贵的附加价值来欺骗自己，很无聊很蠢。你高考完成为一个旁观者清，才明白，高考学的东西没有任何意义，唯一的意义就是学历，那学历是什么，不过是敲门砖，入场券。如果你把高考看得太重你会考的很烂，从高一开始就明白考试的意义就是拿分数的话，，就能考得很好）（对我们这样的普通人来说，完完全全不会创造新的东西，而且无论是什么考试，满分100分只会拿出0分来检测你的新想法hhhhhhhhhhhhhh。当然竞赛除外，因为弄竞赛的都是不是普通人。）</p>
<p>很难理解是吧，我也感觉我有点偏激，但是事实就是如此，真话总是如此难听么？？😫😫</p>
<p>事实就是如此，针对各种类型的考试对症下药，以最少的代价拿到性价比的东西，同时不要自己骗自己投入太多宝贵的感情价值。跟很多别的事情比起来，考试是真的简单，只要记忆就够了。</p>
<p>打个比方，人总是无法与自己的初恋最终走到一起，因为大家都把自己的初恋看的太高太重，失去了自己与白月光的相处平衡，它事实上完完全全没有你想的那么好。当局者迷，旁观者清。自己成为了当局者，失去了最基本的判断对错的能力。一个盲人又怎么能确定东南西北呢？自己就成了那个盲人，乱走一通，最终失败也不明白自己为什么失败。</p>
<p>所以不要把任何事情看到太高太重，理性的客观的甚至于冷酷的严苛的看待事物，实事求是说真话总是让自己难受，但是温柔乡只会诞生被温水煮四的青蛙。至少到目前为止，2023年4月29日星期六，我所接触到的考试（除开竞赛），本质都是理解记忆背诵。</p>
<p>同时我能明显感受到很多很多过去完完全全是浪费时间，学校啊老师啊都没有搞清楚考试的意义就是拿分数这个根本宗旨。在一些额外的附加情感评价能力价值上面去花时间，浪费了很多很多的时间。到头来还是自己骗自己不愿意承认。最终导致学校的意义就是给你找事情做，给你消遣时间的场所，不让你做坏事的场所。至于最后的考试，可能自己在学校里面和家里面用来学习的时间只用1&#x2F;10就可以考出一样的成绩。另外9&#x2F;10都是学校和老师再给你找事情做，给KillTime罢了。笑死了🤣🤣🤣，事实就是如此，真相总是如此丑陋。🤡卸下所有伪装和防备，从第三人的视角审视自己的结果，就是能发现自己什么都是不是。同时也能发现，别人是都在这种环境里面自欺欺人，9&#x2F;10的时间都被拿来killtime没有在自己目标的道路上面挪动任何一步。</p>
]]></content>
      <categories>
        <category>NEU课程</category>
      </categories>
      <tags>
        <tag>课内学习</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据技术原理与应用华为云实验实时检索</title>
    <url>/2023/04/25/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%AE%9E%E9%AA%8C%E5%AE%9E%E6%97%B6%E6%A3%80%E7%B4%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-实验介绍"><a href="#1-实验介绍" class="headerlink" title="1.实验介绍"></a>1.实验介绍</h1><h2 id="1-1-实验概述"><a href="#1-1-实验概述" class="headerlink" title="1.1.实验概述"></a>1.1.实验概述</h2><p>本实验基于华为云服务。通过模拟开发流程，包括数据导入库，组件应用开发，构建搜索服务，最终完成实时检索功能。</p>
<h2 id="1-2-实验目的"><a href="#1-2-实验目的" class="headerlink" title="1.2.实验目的"></a>1.2.实验目的</h2><p>l 掌握大数据相关服务的购买及基础配置</p>
<p>l 掌握HBase应用开发的基本语法</p>
<p>l 掌握ElasticSearch应用开发的基本语法</p>
<p>l 掌握实时检索的功能实现</p>
<h2 id="1-3-实验规划"><a href="#1-3-实验规划" class="headerlink" title="1.3.实验规划"></a>1.3.实验规划</h2><p>在同一VPC内的ECS通过内网访问MRS HBase和CSS各自的网络地址，并通过各自网络地址完成数据导入和数据查询。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image002.jpg" alt="img"></p>
<h2 id="1-4-实验思路"><a href="#1-4-实验思路" class="headerlink" title="1.4.实验思路"></a>1.4.实验思路</h2><p>（1）通过配置和申请华为云服务VPC，ECS，MRS和CSS作为基础配置。</p>
<p>（2）ECS在同一VPC内通过安全组规则访问MRS和CSS服务。</p>
<p>（3）在ECS上搭建基本应用开发环境。</p>
<p>（4）在ECS上建工程项目，开发基于MRS和CSS的应用程序。</p>
<p>（5）服务使用完毕，进行释放资源。</p>
<h2 id="1-5-实验流程"><a href="#1-5-实验流程" class="headerlink" title="1.5.实验流程"></a>1.5.实验流程</h2><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image004.png" alt="img"></p>
<h1 id="2-实验平台与服务"><a href="#2-实验平台与服务" class="headerlink" title="2.实验平台与服务"></a>2.实验平台与服务</h1><p>l <strong>ECS (Elastic Cloud Server)</strong></p>
<p>弹性云服务器是由CPU、内存、操作系统、云硬盘组成的基础的计算组件。弹性云服务器创建成功后，就可以像使用自己的本地PC或物理服务器一样，在云上使用弹性云服务器。</p>
<p>l <strong>MRS (MapReduce Service)</strong></p>
<p>MapReduce服务是一个在华为云上部署和管理Hadoop系统的服务，一键即可部署Hadoop集群。</p>
<p>l <strong>VPC(Virtual Private Cloud)</strong></p>
<p>虚拟私有云是为云服务器、云容器、云数据库等云上资源构建隔离、私密的虚拟网络环境。VPC丰富的功能可以灵活管理云上网络，包括创建子网、设置安全组和网络ACL、管理路由表、申请弹性公网IP和带宽等。此外，还可以通过云专线、VPN等服务将VPC与传统的数据中心互联互通，灵活整合资源，构建混合云网络。</p>
<p>VPC使用网络虚拟化技术，通过链路冗余，分布式网关集群，多AZ部署等多种技术，保障网络的安全、稳定、高可用。</p>
<p>l <strong>CSS (Cloud Search Service)</strong></p>
<p>云搜索服务提供托管的分布式搜索引擎服务，完全兼容开源Elasticsearch搜索引擎，支持结构化、非结构化文本的多条件检索、统计、报表。云搜索服务的使用流程和数据库类似。</p>
<h1 id="3-实验步骤与结果"><a href="#3-实验步骤与结果" class="headerlink" title="3.实验步骤与结果"></a>3.实验步骤与结果</h1><h2 id="3-1-大数据相关服务的购买与基本配置"><a href="#3-1-大数据相关服务的购买与基本配置" class="headerlink" title="3.1. 大数据相关服务的购买与基本配置"></a>3.1. 大数据相关服务的购买与基本配置</h2><h3 id="3-1-1-开通VPC服务"><a href="#3-1-1-开通VPC服务" class="headerlink" title="3.1.1. 开通VPC服务"></a>3.1.1. 开通VPC服务</h3><p>步骤如下：</p>
<p>创建私有云</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image006.jpg" alt="img"></p>
<p>配置私有云后购买</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image008.jpg" alt="img"></p>
<p>创建成功</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image010.jpg" alt="img"></p>
<p>购买和配置弹性公网IP</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image012.jpg" alt="img"></p>
<p>购买配置如下：</p>
<p>计费模式 - 按需计费</p>
<p>区域 - 华北-北京四</p>
<p>带宽类型 - 独享</p>
<p>购买量 - 2</p>
<p>其余配置默认，详细配置如下：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image014.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image016.jpg" alt="img"></p>
<p>配置好后点击立即购买</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image018.jpg" alt="img"></p>
<p>确认配置后提交</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image020.jpg" alt="img"></p>
<p>可以看到配置成功</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image022.jpg" alt="img"></p>
<h3 id="3-1-2-开通MRS服务"><a href="#3-1-2-开通MRS服务" class="headerlink" title="3.1.2. 开通MRS服务"></a>3.1.2. 开通MRS服务</h3><p>购买MapReduce服务 - MRS搜索MapReduce服务搜索MapReduce服务或MRS<img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image024.jpg" alt="img"></p>
<p>购买MapReduce服务</p>
<p>进入MapReduce服务控制台后，选择右边的购买集群</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image026.jpg" alt="img"></p>
<p>MapReduce服务配置</p>
<p>进入购买页面后，选择自定义购买</p>
<p>按照如下信息配置集群基本信息：</p>
<p>区域—选择“华北-北京四”。</p>
<p>集群名称—自定义名称，本人是“mrs-HSU”。</p>
<p>集群版本—MRS 1.9.2</p>
<p>集群类型—选择分析集群。</p>
<p>组件选择—勾选所有组件。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image028.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image030.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image032.jpg" alt="img">点击下一步</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image034.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image036.jpg" alt="img">告警—选择关闭，其他都是默认配置。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image038.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image040.jpg" alt="img">点击立即购买，返回控制台集群列表页面，显示集群正在启动(需要10分钟左右)。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image042.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image044.jpg" alt="img">集群启动成功后，点击集群名称进入集群信息页面</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image046.jpg" alt="img"></p>
<p>绑定弹性公网IP</p>
<p>在集群信息页面点击节点管理，选择Core节点，点击进入</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image048.jpg" alt="img"></p>
<p>进入弹性云服务器页面后，选择弹性公网IP，点击绑定弹性公网IP</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image050.jpg" alt="img"></p>
<p>选择一个弹性公网IP绑定，点击确定（请记住这两个IP用于后续登录）。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image052.jpg" alt="img"></p>
<p>修改安全组</p>
<p>配置好IP后需要修改网络安全组，否则无法登陆到Master服务器。点击“安全组”，选择“更改安全组”。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image054.jpg" alt="img"></p>
<p>选择入方向规则，点击“添加规则”，选择“全部放通”，点击确定。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image056.jpg" alt="img"></p>
<p>确定集群节点hostname和ip</p>
<p>在集群节点管理页面查看集群节点hostname和ip</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image058.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image060.jpg" alt="img"></p>
<p>记住此hostname和ip，并将ip地址前移，下划线”_”改为短线”-”，后面ECS修改hosts文件会用到。如下</p>
<p>192.168.0.71        node-master2xhIH</p>
<p>192.168.0.193    node-master1iqma</p>
<p>192.168.0.124    node-ana-coreTcIw</p>
<p>192.168.0.173    node-ana-coreDqFa</p>
<p>192.168.0.30     node-ana-coreyBOq</p>
<p>注意：也可以通过远程登录MRS集群任意节点通过命令查看&#x2F;etc&#x2F;hosts文件拿到hostname和ip。登录MRS集群节点后，执行命令如下：</p>
<p>cat &#x2F;etc&#x2F;hosts</p>
<h3 id="3-1-3-开通云搜索CSS服务"><a href="#3-1-3-开通云搜索CSS服务" class="headerlink" title="3.1.3. 开通云搜索CSS服务"></a>3.1.3. 开通云搜索CSS服务</h3><p>搜索云搜索服务</p>
<p>在页面搜索云搜索服务或CSS，回车进入</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image061.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image063.jpg" alt="img"></p>
<p>购买云搜索服务</p>
<p>进入云搜索服务控制台后，选择创建集群。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image065.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image067.jpg" alt="img"></p>
<p>云搜索服务配置</p>
<p>进入购买页面后，配置集群参数</p>
<p><strong>计费模式</strong> - 按需计费</p>
<p><strong>区域</strong> - 华北-北京四</p>
<p><strong>集群版本</strong> – 7.6.2</p>
<p><strong>集群名称</strong> – Es-search。</p>
<p><strong>节点数量</strong> – 1</p>
<p><strong>CPU****架构</strong> – x86计算</p>
<p><strong>节点规格</strong> - 内存优化型 - 2u16g（若无此配置可选择更高配置）</p>
<p>节点存储 – 高I&#x2F;O</p>
<p>节点存储容量 – 40GB</p>
<p><strong>按需套餐包</strong> – 默认不勾选</p>
<p><strong>虚拟私有云</strong> - 选择之前设置的虚拟私有云</p>
<p><strong>子网</strong> - 选择一个子网</p>
<p><strong>安全组</strong> - Sys-default（与需要购买的ECS，MRS保持一致）</p>
<p>安全模式 - 关闭</p>
<p>其余配置默认</p>
<p>详细配置见下图：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image069.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image071.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image073.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image075.jpg" alt="img"></p>
<p>配置完成之后，右边选择立即申请，进入页面确认配置提交申请。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image077.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image079.jpg" alt="img"></p>
<p>进入集群管理页面，等待集群启动</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image081.jpg" alt="img"></p>
<p>集群启动成功后，查看集群名和内网访问地址，后续conf.properties配置文件会用到：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image083.jpg" alt="img"></p>
<h3 id="3-1-4-购买弹性云服务器ECS"><a href="#3-1-4-购买弹性云服务器ECS" class="headerlink" title="3.1.4. 购买弹性云服务器ECS"></a>3.1.4. 购买弹性云服务器ECS</h3><p>搜索弹性云服务器</p>
<p>在页面搜索弹性云服务器或ECS回车进入</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image084.png" alt="img"></p>
<p>购买弹性云服务器</p>
<p>进入控制台后,选择购买弹性云服务器</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image086.jpg" alt="img"></p>
<p>弹性云服务器配置</p>
<p>计费模式 - 按需计费，</p>
<p>区域 - 华北-北京四</p>
<p>可用区 – 随机分配</p>
<p>规格 - 四核8G</p>
<p>镜像 - 公共镜像Windows Server 2016 标准版 64位简体中文(40GB)</p>
<p>主机安全 – 不勾选主机安全</p>
<p>系统盘 – 普通IO，40GB</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image088.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image090.jpg" alt="img"></p>
<p>点击下一步：网络配置</p>
<p>虚拟私有云 - 选择之前设置的虚拟私有云</p>
<p>网卡 – 默认选择一个子网，自动分配IP地址</p>
<p>安全组 - Sys-default（注意：此安全组和之后购买的MRS，CSS保持一致）</p>
<p>弹性公网IP - 现在购买</p>
<p>规格 - 全动态BGP，带宽大小 – 5</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image092.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image094.png" alt="img"></p>
<p>点击下一步：高级配置</p>
<p>云服务器名称 – 自定义名称，本例以ecs-search为例</p>
<p>登录方式 - 密码</p>
<p>密码 - 自行设置（用于登录，请妥善保管！！！)</p>
<p>云备份 、云服务器 、高级选项 – 默认配置</p>
<p>购买量 - 1</p>
<p>配置完成之后，右边选择下一步，进入页面确认配置后立即提交。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image096.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image098.png" alt="img"></p>
<p>确认配置后，点击立即购买。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image100.png" alt="img"></p>
<p>完成后，控制台显示正在启动（启动后可看到弹性公网IP）。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image102.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image104.jpg" alt="img"></p>
<h3 id="3-1-5-访问Windows云服务器"><a href="#3-1-5-访问Windows云服务器" class="headerlink" title="3.1.5. 访问Windows云服务器"></a>3.1.5. 访问Windows云服务器</h3><p>连接弹性云服务器</p>
<p>在个人电脑打开运行 （快捷键Win + R）输入mstsc，打开远程桌面连接</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image105.png" alt="img"></p>
<p>输入任务四中购买的弹性云服务器<a href="https://console.huaweicloud.com/ecm/?agencyId=2f08ee8c7f9949b58a660d0b9dd1b372&locale=zh-cn&region=cn-north-1#/ecs/manager/vmList/vmDetail/basicinfo?instanceId=ad9e7ced-4711-446d-9de0-922efa4d3614">ecs-search</a>的弹性公网IP，在弹性云服务器页面可看到该IP地址</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image107.png" alt="img"></p>
<p>输入用户名Administrator和密码（ECS服务器设置的密码）</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image109.png" alt="img"></p>
<p>安装chrome浏览器</p>
<p>在ECS远程桌面打开IE浏览器，输入谷歌官网<a href="https://www.google.cn/chrome/%E4%B8%8B%E8%BD%BDchrome%E6%B5%8F%E8%A7%88%E5%99%A8">https://www.google.cn/chrome/下载chrome浏览器</a></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image111.jpg" alt="img"></p>
<p>选择下载</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image113.jpg" alt="img"></p>
<p>下载完后直接运行文件，自动安装。完成</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image115.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image117.png" alt="img"></p>
<p>安装Maven</p>
<p>下载Maven</p>
<p>连接ECS到远程桌面后，在远程桌面打开谷歌浏览器输入下面网址下载Maven安装包</p>
<p>下载链接：<a href="http://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zip">http://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zip</a></p>
<p>（注：若版本失效进入<a href="http://archive.apache.org/dist/maven/maven-3/%E5%AF%BB%E6%89%BE%E5%90%88%E9%80%82%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%89">http://archive.apache.org/dist/maven/maven-3/寻找合适的版本）</a></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image119.jpg" alt="img"></p>
<p>下载好进入文件所在路径，解压安装到默认地址：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image121.png" alt="img"></p>
<p>配置maven的setting文件</p>
<p>进入华为开源镜像网站<a href="https://mirrors.huaweicloud.com/">https://mirrors.huaweicloud.com/</a> ，下载setting文件</p>
<p>搜索华为huaweiCloud SDK，点击空白处下载。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image123.jpg" alt="img"></p>
<p>登录后下载setting文件</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image125.jpg" alt="img"></p>
<p>将下载好的setting文件放入maven的conf 路径下，直接覆盖原有的setting文件即可</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image127.png" alt="img"></p>
<p>安装JDK</p>
<p>在ECS远程桌面进入Oracle官网<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
<p>下载JDK8 版本8u261，需要接受协议，单击下载后登录Orcale账户才能正常下载。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image129.png" alt="img"></p>
<p>下载好后运行安装JDK</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image131.png" alt="img"></p>
<p>安装路径默认</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image132.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image134.png" alt="img"></p>
<p>安装JRE java运行环境</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image136.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image138.png" alt="img"></p>
<p>安装路径默认，完成后点击关闭。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image140.jpg" alt="img"></p>
<p>JDK安装完成。</p>
<p>配置JDK环境变量</p>
<p>在ECS远程桌面打开系统设置，在文件资源管理器右键此电脑，选择属性</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image142.jpg" alt="img"></p>
<p>选择高级系统设置，选择环境变量</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image144.jpg" alt="img"></p>
<p>编辑系统变量Path</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image146.jpg" alt="img"></p>
<p>新建三个系统变量</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image148.jpg" alt="img"></p>
<p>通过浏览更改路径</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image150.jpg" alt="img"></p>
<p>选择刚才安装的Maven路径下的bin文件夹路径</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image152.jpg" alt="img"></p>
<p>确定后，同理，修改变量2的路径，选择浏览</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image154.png" alt="img"></p>
<p>选择安装的JDK路径下的bin路径</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image156.jpg" alt="img"></p>
<p>确定后，继续选择变量3，选择浏览</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image158.jpg" alt="img"></p>
<p>选择JRE的安装路径下的bin路径</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image160.png" alt="img"></p>
<p>确定后，将新增的环境变量移动至最上方。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image162.jpg" alt="img"></p>
<p>点击确认，保存更改。</p>
<p>验证是否正确配置</p>
<p>在远程桌面打开运行(快捷键Win + R) 输入cmd</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image164.jpg" alt="img"></p>
<p>输入</p>
<p>mvn -version </p>
<p>若配置正确会有Maven版本信息输出</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image166.jpg" alt="img"></p>
<p>输入：</p>
<p>java -version</p>
<p>若配置正确会有java版本信息输出</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image168.jpg" alt="img"></p>
<p>输入：</p>
<p>javac -version</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image170.jpg" alt="img"></p>
<p>若配置正确会有java 编译器版本信息输出</p>
<p>安装Eclipse</p>
<p>下载Eclipse</p>
<p>在ECS远程桌面进入Eclipse官网<a href="https://www.eclipse.org/downloads/packages/release/oxygen/3a">https://www.eclipse.org/downloads/packages/release/oxygen/3a</a> 下载oxygen版本</p>
<p>选择64位</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image172.jpg" alt="img"></p>
<p>点击下载</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image174.jpg" alt="img"></p>
<p>安装Eclipse</p>
<p>下载完成之后，解压安装包，解压路径随意，打开解压好的eclipse文件夹，选中 eclipse.exe文件，在桌面创建快捷方式，Eclipse的安装就完成了。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image176.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image178.jpg" alt="img"></p>
<p>选择工作空间即代码存储位置。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image180.jpg" alt="img"></p>
<p>配置Maven</p>
<p>在Eclipse页面选择Window -&gt; Preferences -&gt; Maven -&gt; Installations - &gt; add</p>
<p>添加之前安装的Maven</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image182.png" alt="img"></p>
<p>添加自己的Maven安装路径，点击Finish。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image184.jpg" alt="img"></p>
<p>选择应用自行安装的Maven</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image186.jpg" alt="img"></p>
<p>在Preferences 下的Maven下选择User Setting</p>
<p>选择自行下载的setting文件</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image188.png" alt="img"></p>
<p>完成后点击应用并关闭</p>
<p>修改hosts文件</p>
<p>在ECS远程桌面进入目录C:\Windows\System32\drivers\etc，修改hosts文件</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image190.jpg" alt="img"></p>
<p>右键打开方式，选择记事本，在末尾编辑添加集群节点hostname和ip（任务二中MRS的主机名和IP地址），结果如下。（替换为自己集群节点的hostname和ip）：</p>
<p>192.168.0.124  node-ana-coreTcIw</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image192.jpg" alt="img"></p>
<p>保存，环境配置到此结束。</p>
<h2 id="3-2-大数据实时数据分析开发实战"><a href="#3-2-大数据实时数据分析开发实战" class="headerlink" title="3.2. 大数据实时数据分析开发实战"></a>3.2. 大数据实时数据分析开发实战</h2><h3 id="3-2-1-步骤1-新建项目"><a href="#3-2-1-步骤1-新建项目" class="headerlink" title="3.2.1. 步骤1 新建项目"></a>3.2.1. 步骤1 新建项目</h3><p>在ECS远程桌面进打开Eclipse，新建项目。</p>
<p>点击File -&gt; New -&gt; Maven Project（如果没有Maven Project,则选择project，然后在Maven中找到Maven Project）</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image194.png" alt="img"></p>
<p>点击next，勾选Create a simple project </p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image196.jpg" alt="img"></p>
<p>点击Next，输入GroupId和ArtifactId，版本默认</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image198.png" alt="img"></p>
<p>点击Finish，等待项目初始化完成。</p>
<h3 id="3-2-2-步骤2-修改依赖文件"><a href="#3-2-2-步骤2-修改依赖文件" class="headerlink" title="3.2.2. 步骤2 修改依赖文件"></a>3.2.2. 步骤2 修改依赖文件</h3><p>项目初始化完成后，修改pom文件，该文件用来管理项目依赖包。</p>
<p>pom文件初始如下：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image200.jpg" alt="img"></p>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

<p> <modelVersion>4.0.0</modelVersion></p>
<p> <groupId>com.huawei.bigdata</groupId></p>
<p> <artifactId>realtimesearch</artifactId></p>
<p> <version>0.0.1-SNAPSHOT</version></p>
</project>

<p>在</version> 和 </project>之间添加如下配置（可从提供的POM文件粘贴所需内容）</p>
<!-- Spring boot 父引用 -->

  <parent>

<p>​    <groupId>org.springframework.boot</groupId></p>
<p>​    <artifactId>spring-boot-starter-parent</artifactId></p>
<p>​    <version>1.4.0.RELEASE</version></p>
  </parent>

 

  <properties>

<p>​    &lt;hbase.version&gt;2.1.1.0101-mrs-2.0&lt;&#x2F;hbase.version&gt;</p>
<p>​    &lt;zookeeper.version&gt;3.5.1-mrs-2.0&lt;&#x2F;zookeeper.version&gt;</p>
<p>​    &lt;hadoop.version&gt;3.1.1-mrs-2.0&lt;&#x2F;hadoop.version&gt;</p>
<p>​    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</p>
<p>​    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</p>
<p>​    &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</p>
<p>​    &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</p>
  </properties>

 

  <!--仓库源-->

  <repositories>

<p>​    <repository></p>
<p>​      <id>alimaven</id></p>
<p>​      <name>aliyun maven</name></p>
<p>​      <url><a href="http://maven.aliyun.com/nexus/content/groups/public/">http://maven.aliyun.com/nexus/content/groups/public/</a></url></p>
<p>​      <releases></p>
<p>​        <enabled>true</enabled></p>
<p>​      </releases></p>
<p>​      <snapshots></p>
<p>​        <enabled>false</enabled></p>
<p>​      </snapshots></p>
<p>​    </repository></p>
  </repositories>

 

  <dependencies>

<p>​    <!-- Spring boot 核心web --></p>
<p>​    <dependency></p>
<p>​      <groupId>org.springframework.boot</groupId></p>
<p>​      <artifactId>spring-boot-starter-web</artifactId></p>
<p>​    </dependency></p>
<p>​    <!-- 解决thymeleaf模板引擎对h5页面检查太严格问题 --></p>
<p>​    <dependency></p>
<p>​      <groupId>net.sourceforge.nekohtml</groupId></p>
<p>​      <artifactId>nekohtml</artifactId></p>
<p>​      <version>1.9.22</version></p>
<p>​    </dependency></p>
<p>​    <dependency></p>
<p>​      <groupId>org.springframework.boot</groupId></p>
<p>​      <artifactId>spring-boot-starter-thymeleaf</artifactId></p>
<p>​    </dependency></p>
<p>​    <dependency></p>
<p>​      <groupId>org.apache.hbase</groupId></p>
<p>​      <artifactId>hbase-common</artifactId></p>
<p>​      <version>${hbase.version}</version></p>
<p>​    </dependency></p>
<p>​    <dependency></p>
<p>​      <groupId>org.apache.hbase</groupId></p>
<p>​      <artifactId>hbase-protocol</artifactId></p>
<p>​      <version>${hbase.version}</version></p>
<p>​    </dependency></p>
<p>​    <dependency></p>
<p>​      <groupId>org.apache.hbase</groupId></p>
<p>​      <artifactId>hbase-client</artifactId></p>
<p>​      <version>${hbase.version}</version></p>
<p>​    </dependency></p>
<p>​    <dependency></p>
<p>​      <groupId>org.apache.hadoop</groupId></p>
<p>​      <artifactId>hadoop-common</artifactId></p>
<p>​      <version>${hadoop.version}</version></p>
<p>​    </dependency></p>
<p>​     <dependency></p>
<p>​      <groupId>org.apache.hadoop</groupId></p>
<p>​      <artifactId>hadoop-auth</artifactId></p>
<p>​      <version>${hadoop.version}</version></p>
<p>​    </dependency></p>
<p>​    <dependency></p>
<p>​      <groupId>org.apache.hadoop</groupId></p>
<p>​      <artifactId>hadoop-client</artifactId></p>
<p>​      <version>${hadoop.version}</version></p>
<p>​    </dependency></p>
<p>​    <dependency></p>
<p>​      <groupId>org.apache.hadoop</groupId></p>
<p>​      <artifactId>hadoop-hdfs</artifactId></p>
<p>​      <version>${hadoop.version}</version></p>
<p>​    </dependency></p>
<p>​    <!-- ElasticSearch --></p>
<p>​    <!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch --></p>
<p>​    <dependency></p>
<p>​      <groupId>org.elasticsearch</groupId></p>
<p>​      <artifactId>elasticsearch</artifactId></p>
<p>​      <version>6.2.3</version></p>
<p>​    </dependency></p>
<p>​    <dependency></p>
<p>​      <groupId>org.elasticsearch.client</groupId></p>
<p>​      <artifactId>transport</artifactId></p>
<p>​      <version>6.2.3</version></p>
<p>​    </dependency></p>
<p>​    <!-- 解锁ES运行时没有对应方法的的错误 --></p>
<p>​    <dependency></p>
<p>​      <groupId>org.locationtech.spatial4j</groupId></p>
<p>​      <artifactId>spatial4j</artifactId></p>
<p>​      <version>0.6</version></p>
<p>​    </dependency></p>
<p>​    <!-- zookeeper --></p>
<p>​    <dependency></p>
<p>​      <groupId>org.apache.zookeeper</groupId></p>
<p>​      <artifactId>zookeeper</artifactId></p>
<p>​      <version>${zookeeper.version}</version></p>
<p>​    </dependency></p>
<p>​    <!-- 解决ES和HBase中 io.netty包冲突 --></p>
<p>​    <dependency></p>
<p>​      <groupId>io.netty</groupId></p>
<p>​      <artifactId>netty-all</artifactId></p>
<p>​      <version>4.1.16.Final</version></p>
<p>​    </dependency></p>
<p>​    <!-- json --></p>
<p>​    <dependency></p>
<p>​      <groupId>com.alibaba</groupId></p>
<p>​      <artifactId>fastjson</artifactId></p>
<p>​      <version>1.2.13</version></p>
<p>​    </dependency></p>
  </dependencies>

 

  <dependencyManagement>

<p>​    <dependencies></p>
<p>​      <dependency></p>
<p>​        <groupId>jdk.tools</groupId></p>
<p>​        <artifactId>jdk.tools</artifactId></p>
<p>​         <version>1.8</version></p>
<p>​      </dependency></p>
<p>​    </dependencies></p>
  </dependencyManagement>

 

  <build>

<p>​    <plugins></p>
<p>​      <plugin></p>
<p>​        <groupId>org.apache.maven.plugins</groupId></p>
<p>​        <artifactId>maven-compiler-plugin</artifactId></p>
<p>​        <version>3.1</version></p>
<p>​        <configuration></p>
<p>​          <source>1.7</source></p>
<p>​          <target>1.7</target></p>
<p>​        </configuration></p>
<p>​      </plugin></p>
<p>​    </plugins></p>
<p>​    <resources></p>
<p>​      <resource></p>
<p>​        <directory>src&#x2F;main&#x2F;resources</directory></p>
<p>​      </resource></p>
<p>​    </resources></p>
  </build>

<p>更改完成之后使pom文件(ctrl+s保存)生效，此时确保连通网络,等待项目下载相关资源。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image202.jpg" alt="img"></p>
<p>下载完成后，右键项目名选择Run As，选择Maven install</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image204.png" alt="img"></p>
<p>右键项目名选择Maven，选择Update Project</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image206.png" alt="img"></p>
<p>修改项目的Java Build Path</p>
<p>项目右键，选择Build Path &gt; Configure Build Path &gt; Java Build Path &gt;Libraries ,选中JRE System Library[J2SE-1.5]，点击右侧的Remove,</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image208.png" alt="img"></p>
<p>再点击Add Library… &gt; JRE System Library &gt; Next (默认选中安装的JDK1.8) &gt; Finish</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image210.png" alt="img"></p>
<p>设置完成后确保项目不再报错即可。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image211.png" alt="img"></p>
<h3 id="3-2-3．步骤3-编辑配置文件"><a href="#3-2-3．步骤3-编辑配置文件" class="headerlink" title="3.2.3．步骤3 编辑配置文件"></a>3.2.3．步骤3 编辑配置文件</h3><p>新建conf.properties文件</p>
<p>右键src&#x2F;main&#x2F;resources -&gt; New -&gt; Other -&gt; General -&gt; File -&gt; 新建conf.properties配置文件</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image213.jpg" alt="img"></p>
<p>文件建好之后，在该文件键入如下内容：</p>
<p>#原始数据路径</p>
<p>inputPath &#x3D;data&#x2F;</p>
<p>#HBase的配置</p>
<p>#通过MRS Manager服务管理列表获取的ZK连接地址</p>
<p>ZKServer&#x3D;192.168.0.77:2181</p>
<p>#HBase表名</p>
<p>tableName&#x3D;PublicSecurity</p>
<p>#HBase列族</p>
<p>columnFamily1&#x3D;Basic</p>
<p>columnFamily2&#x3D;OtherInfo</p>
<p>#ElasticSearch的配置</p>
<p>#通过CSS服务列表获取的ES集群名称，内外IP，默认端口</p>
<p>clusterName&#x3D;Es-search</p>
<p>hostName&#x3D;192.168.0.3</p>
<p>tcpPort&#x3D;9300</p>
<p>indexName&#x3D;publicsecurity</p>
<p>typeName&#x3D;info</p>
<p>注意:更改ZKServer的地址为购买的MRS Manager服务页面的ZKServer服务地址，ElasticSearch的clusterName和hostName也改为购买的对应CSS服务的集群名和IP地址。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image215.jpg" alt="img"></p>
<p>新建application.properties文件</p>
<p>右键src&#x2F;main&#x2F;resources -&gt; New -&gt; Other -&gt; General -&gt; File -&gt;新建application.properties配置文件</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image217.jpg" alt="img"></p>
<p>文件建好之后，在该文件键入如下内容：</p>
<p>#config</p>
<p>server.port&#x3D;8084</p>
<p>server.contextPath&#x3D;&#x2F;hw_bigdata</p>
<p>#web页面热布署</p>
<p>spring.thymeleaf.cache&#x3D;false</p>
<p>#解决html5检查太严格问题</p>
<p>spring.thymeleaf.mode &#x3D; LEGACYHTML5</p>
<p>新建log4j.properties文件</p>
<p>右键src&#x2F;main&#x2F;resources -&gt; New -&gt; Other -&gt; General -&gt; File -&gt; 新建log4j.properties配置文件</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image219.jpg" alt="img"></p>
<p>文件建好之后，在该文件键入如下内容:</p>
<p>log4j.rootLogger&#x3D;INFO,console</p>
<p>log4j.appender.console&#x3D;org.apache.log4j.ConsoleAppender</p>
<p>log4j.appender.console.target&#x3D;System.out</p>
<p>log4j.appender.console.layout&#x3D;org.apache.log4j.PatternLayout</p>
<p>log4j.appender.console.layout.ConversionPattern&#x3D;%-4r [%t] %-5p %c %x - %m%n</p>
<p>新建log4j2.properties文件</p>
<p>右键src&#x2F;main&#x2F;resources -&gt; New -&gt; Other -&gt; General -&gt; File -&gt; 新建log4j2.properties配置文件</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image221.jpg" alt="img"></p>
<p>文件建好之后，在该文件键入如下内容：</p>
<p>name &#x3D; PropertiesConfig</p>
<p>property.filename &#x3D; target&#x2F;logs</p>
<p>#appenders &#x3D; console, file</p>
<p>#配置值是appender的类型，并不是具体appender实例的name</p>
<p>appenders &#x3D; rolling</p>
<p>appender.rolling.type &#x3D; RollingFile</p>
<p>appender.rolling.name &#x3D; RollingLogFile</p>
<p>appender.rolling.fileName&#x3D;${filename}&#x2F;automationlogs.log</p>
<p>appender.rolling.filePattern &#x3D; ${filename}&#x2F;automationlogs-%d{MM-dd-yy-HH-mm-ss}-%i.log</p>
<p>appender.rolling.layout.type &#x3D; PatternLayout</p>
<p>appender.rolling.layout.pattern&#x3D;[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n</p>
<p>appender.rolling.policies.type &#x3D; Policies</p>
<p>appender.rolling.policies.size.type &#x3D; SizeBasedTriggeringPolicy</p>
<p>appender.rolling.policies.size.size&#x3D;100MB</p>
<p>appender.rolling.strategy.type &#x3D; DefaultRolloverStrategy</p>
<p>appender.rolling.strategy.max &#x3D; 5</p>
<p>rootLogger.level &#x3D; INFO,console</p>
<p>rootLogger.appenderRef.rolling.ref &#x3D; rolling</p>
<p>rootLogger.appenderRef.rolling.ref &#x3D; RollingLogFile</p>
<h3 id="3-2-4．步骤4-导入数据"><a href="#3-2-4．步骤4-导入数据" class="headerlink" title="3.2.4．步骤4 导入数据"></a>3.2.4．步骤4 导入数据</h3><p>新建文件夹</p>
<p>在项目下新建数据存放文件夹</p>
<p>右键项目名 -&gt; New -&gt; Folder -&gt; 新建data文件夹（可根据路径在conf.properties文件修改）</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image223.png" alt="img"></p>
<p>导入数据</p>
<p>将测试数据文件复制到该文件夹。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image225.jpg" alt="img"></p>
<h3 id="3-2-5．步骤5-编写常量工具类"><a href="#3-2-5．步骤5-编写常量工具类" class="headerlink" title="3.2.5．步骤5 编写常量工具类"></a>3.2.5．步骤5 编写常量工具类</h3><p>新建包</p>
<p>右键src&#x2F;main&#x2F;java -&gt; New -&gt; Package -&gt; 新建com.huawei.bigdata.utils包</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image226.png" alt="img"></p>
<p>新建类</p>
<p>右键com.huawei.bigdata.utils -&gt; New -&gt; Class -&gt; 新建ConstantUtil类</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image228.png" alt="img"></p>
<p>编辑类</p>
<p>编辑该类的内容：</p>
<p>package com.huawei.bigdata.utils;</p>
<p>import org.apache.log4j.PropertyConfigurator;</p>
<p>import org.slf4j.Logger;</p>
<p>import org.slf4j.LoggerFactory;</p>
<p>import java.io.FileInputStream;</p>
<p>import java.io.IOException;</p>
<p>import java.util.Properties;</p>
<p>&#x2F;**</p>
<p> * Created by ThisPC on 2020&#x2F;8&#x2F;6.</p>
<p> *&#x2F;</p>
<p>public class ConstantUtil {</p>
<p>  public static final Properties PROPS &#x3D; new Properties();</p>
<p>  public static final Logger LOG &#x3D; LoggerFactory.getLogger(ConstantUtil.class);</p>
<p>  public static final String INPUT_PATH;</p>
<p>  public static final String ZK_SERVER;</p>
<p>  public static final String TABLE_NAME;</p>
<p>  public static final String COLUMN_FAMILY_1;</p>
<p>  public static final String COLUMN_FAMILY_2;</p>
<p>  public static final String INDEX_NAME;</p>
<p>  public static final String TYPE_NAME;</p>
<p>  &#x2F;&#x2F;ES集群名,默认值elasticsearch</p>
<p>  public static final String CLUSTER_NAME;</p>
<p>  &#x2F;&#x2F;ES集群中某个节点</p>
<p>  public static final String HOSTNAME;</p>
<p>  &#x2F;&#x2F;ES连接端口号</p>
<p>  public static final int TCP_PORT;</p>
<p>  static {</p>
<p>​    try {</p>
<p>​      &#x2F;&#x2F;加载日志配置</p>
<p>​      PropertyConfigurator.configure(ConstantUtil.class.getClassLoader().getResource(“log4j.properties”).getPath());</p>
<p>​      &#x2F;&#x2F;加载连接配置</p>
<p>​      PROPS.load(new FileInputStream(ConstantUtil.class.getClassLoader().getResource(“conf.properties”).getPath()));</p>
<p>​    } catch (IOException e) {</p>
<p>​      e.printStackTrace();</p>
<p>​    }</p>
<p>​    INPUT_PATH &#x3D; PROPS.getProperty(“inputPath”);</p>
<p>​    ZK_SERVER &#x3D; PROPS.getProperty(“ZKServer”);</p>
<p>​    TABLE_NAME &#x3D; PROPS.getProperty(“tableName”);</p>
<p>​    INDEX_NAME &#x3D; PROPS.getProperty(“indexName”).toLowerCase();</p>
<p>​    TYPE_NAME &#x3D; PROPS.getProperty(“typeName”);</p>
<p>​    COLUMN_FAMILY_1 &#x3D; PROPS.getProperty(“columnFamily1”);</p>
<p>​    COLUMN_FAMILY_2 &#x3D; PROPS.getProperty(“columnFamily2”);</p>
<p>​    CLUSTER_NAME &#x3D; PROPS.getProperty(“clusterName”);</p>
<p>​    HOSTNAME &#x3D; PROPS.getProperty(“hostName”);</p>
<p>​    TCP_PORT &#x3D; Integer.valueOf(PROPS.getProperty(“tcpPort”));</p>
<p>  }</p>
<p>}</p>
<h3 id="3-2-6．步骤6-编写Hbase工具类"><a href="#3-2-6．步骤6-编写Hbase工具类" class="headerlink" title="3.2.6．步骤6 编写Hbase工具类"></a>3.2.6．步骤6 编写Hbase工具类</h3><p>新建类</p>
<p>右键com.huawei.bigdata.utils -&gt; New -&gt; Class -&gt; 新建HBaseUtil类</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image230.png" alt="img"></p>
<p>编辑类</p>
<p>编辑该类的内容</p>
<p>package com.huawei.bigdata.utils;</p>
<p>import org.apache.hadoop.conf.Configuration;</p>
<p>import org.apache.hadoop.hbase.*;</p>
<p>import org.apache.hadoop.hbase.client.*;</p>
<p>import org.apache.hadoop.hbase.util.Bytes;</p>
<p>import org.slf4j.Logger;</p>
<p>import java.io.IOException;</p>
<p>import java.util.ArrayList;</p>
<p>import java.util.HashMap;</p>
<p>import java.util.List;</p>
<p>import java.util.Map;</p>
<p>&#x2F;**</p>
<p> * Created by ThisPC on 2020&#x2F;8&#x2F;6.</p>
<p> *&#x2F;</p>
<p>public class HBaseUtil {</p>
<p>  &#x2F;**</p>
<p>   * HBase连接的基本配置</p>
<p>   *&#x2F;</p>
<p>  public static Admin admin &#x3D; null;</p>
<p>  public static Configuration conf &#x3D; null;</p>
<p>  public static Connection conn &#x3D; null;</p>
<p>  private HashMap&lt;String, Table&gt; tables &#x3D; null;</p>
<p>  private static final Logger LOG &#x3D; ConstantUtil.LOG;</p>
<p>  &#x2F;**</p>
<p>   * 构造函数加载配置</p>
<p>   *&#x2F;</p>
<p>  public HBaseUtil() {</p>
<p>​    this(ConstantUtil.ZK_SERVER);</p>
<p>  }</p>
<p>  public HBaseUtil(String zkServer) {</p>
<p>​    init(zkServer);</p>
<p>  }</p>
<p>  private void ifNotConnTableJustConn(String tableName) {</p>
<p>​    if (!tables.containsKey(tableName)) {</p>
<p>​      this.addTable(tableName);</p>
<p>​    }</p>
<p>  }</p>
<p>  public Table getTable(String tableName) {</p>
<p>​    ifNotConnTableJustConn(tableName);</p>
<p>​    return tables.get(tableName);</p>
<p>  }</p>
<p>  public void addTable(String tableName) {</p>
<p>​    try {</p>
<p>​      tables.put(tableName, conn.getTable(TableName.valueOf(tableName)));</p>
<p>​    } catch (IOException e) {</p>
<p>​      e.printStackTrace();</p>
<p>​    }</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 通过 LIst<put> 直接插入一批数据</p>
<ul>
<li></li>
</ul>
<p>   * @param putList</p>
<p>   * @return</p>
<p>   *&#x2F;</p>
<p>  public boolean put(String tableName, List<Put> putList) throws Exception {</p>
<p>​    boolean res &#x3D; false;</p>
<p>​    ifNotConnTableJustConn(tableName);</p>
<p>​    try {</p>
<p>​      getTable(tableName).put(putList);</p>
<p>​      res &#x3D; true;</p>
<p>​    } catch (IOException e) {</p>
<p>​      e.printStackTrace();</p>
<p>​    }</p>
<p>​    return res;</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 读取一行记录，一个rowKey的所有记录</p>
<ul>
<li></li>
</ul>
<p>   * @param tableName</p>
<p>   * @param row</p>
<p>   * @return</p>
<p>   * @throws IOException</p>
<p>   *&#x2F;</p>
<p>  public Result get(String tableName, String row) throws IOException {</p>
<p>​    Result result &#x3D; null;</p>
<p>​    ifNotConnTableJustConn(tableName);</p>
<p>​    Table newTable &#x3D; getTable(tableName);</p>
<p>​    Get get &#x3D; new Get(Bytes.toBytes(row));</p>
<p>​    try {</p>
<p>​      result &#x3D; newTable.get(get); </p>
<p>​    } catch (IOException e) {</p>
<p>​      e.printStackTrace();</p>
<p>​    }</p>
<p>​    return result;</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 创建表</p>
<ul>
<li></li>
</ul>
<p>   * @param tableName</p>
<p>   * @param columnFamilys</p>
<p>   *&#x2F;</p>
<p>  public boolean createTable(String tableName, String… columnFamilys) {</p>
<p>​    boolean result &#x3D; false;</p>
<p>​    try {</p>
<p>​      if (admin.tableExists(TableName.valueOf(tableName))) {</p>
<p>​        LOG.info(tableName + “表已经存在！”);</p>
<p>​      } else {</p>
<p>​        HTableDescriptor tableDesc &#x3D; new HTableDescriptor(TableName.valueOf(tableName));</p>
<p>​        for (String columnFamily : columnFamilys) {</p>
<p>​           tableDesc.addFamily(new HColumnDescriptor(columnFamily.getBytes()));</p>
<p>​        }</p>
<p>​        admin.createTable(tableDesc);</p>
<p>​        result &#x3D; true;</p>
<p>​        LOG.info(tableName + “表创建成功！”);</p>
<p>​      }</p>
<p>​    } catch (IOException e) {</p>
<p>​      e.printStackTrace();</p>
<p>​      LOG.info(tableName + “表创建失败 ！”);</p>
<p>​    }</p>
<p>​    return result;</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 判断表是否存在</p>
<ul>
<li></li>
</ul>
<p>   * @param tableName</p>
<p>   * @return</p>
<p>   *&#x2F;</p>
<p>  public boolean tableExists(String tableName) throws IOException {</p>
<p>​     return admin.tableExists(TableName.valueOf(tableName));</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 停用表</p>
<ul>
<li></li>
</ul>
<p>   * @param tableName</p>
<p>   *&#x2F;</p>
<p>  public void disableTable(String tableName) throws IOException {</p>
<p>​    if (tableExists(tableName)) {</p>
<p>​       admin.disableTable(TableName.valueOf(tableName));</p>
<p>​    }</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 删除表</p>
<ul>
<li></li>
</ul>
<p>   * @param tableName</p>
<p>   *&#x2F;</p>
<p>  public void deleteTable(String tableName) throws IOException {</p>
<p>​    disableTable(tableName);</p>
<p>​    admin.deleteTable(TableName.valueOf(tableName));</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 查询所有表名</p>
<ul>
<li></li>
</ul>
<p>   * @return</p>
<p>   * @throws Exception</p>
<p>   *&#x2F;</p>
<p>  public List<String> getALLTableName() throws Exception {</p>
<p>​    ArrayList<String> tableNames &#x3D; new ArrayList<String>();</p>
<p>​    if (admin !&#x3D; null) {</p>
<p>​      HTableDescriptor[] listTables &#x3D; admin.listTables();</p>
<p>​      if (listTables.length &gt; 0) {</p>
<p>​        for (HTableDescriptor tableDesc : listTables) {</p>
<p>​          tableNames.add(tableDesc.getNameAsString());</p>
<p>​        }</p>
<p>​      }</p>
<p>​    }</p>
<p>​    return tableNames;</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 删除所有表,慎用!仅用于测试环境</p>
<p>   *&#x2F;</p>
<p>  public void deleteAllTable() throws Exception {</p>
<p>​    List<String> allTbName &#x3D; getALLTableName();</p>
<p>​    for (String s : allTbName) {</p>
<p>​      LOG.info(“Start delete table : “ + s + “……”);</p>
<p>​      deleteTable(s);</p>
<p>​      LOG.info(“done delete table : “ + s);</p>
<p>​    }</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 初始化配置</p>
<ul>
<li></li>
</ul>
<p>   * @param zkServer</p>
<p>   *&#x2F;</p>
<p>  public void init(String zkServer) {</p>
<p>​    tables &#x3D; new HashMap&lt;String, Table&gt;();</p>
<p>​    conf &#x3D; HBaseConfiguration.create();</p>
<p>​    &#x2F;&#x2F;通过CSS cloudTable服务列表获取的ZK连接地址</p>
<p>​    &#x2F;&#x2F;cloudtable-f7c2-zk1-nMuTH9Xv.cloudtable.com:2181,cloudtable-f7c2-zk2-5z92kpre.cloudtable.com:2181,cloudtable-f7c2-zk3-xVNq61Sb.cloudtable.com:2181</p>
<p>​    &#x2F;&#x2F;192.168.0.121:2181 运行后可看到日志打印具体内网地址</p>
<p>​    conf.set(“hbase.zookeeper.quorum”, zkServer);</p>
<p>​    try {</p>
<p>​      conn &#x3D; ConnectionFactory.createConnection(conf);</p>
<p>​      admin &#x3D; conn.getAdmin();</p>
<p>​    } catch (IOException e) {</p>
<p>​      e.printStackTrace();</p>
<p>​    }</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 清理所有连接</p>
<ul>
<li></li>
</ul>
<p>   * @throws IOException</p>
<p>   *&#x2F;</p>
<p>  public void clear() throws IOException {</p>
<p>​    for (Map.Entry&lt;String, Table&gt; m : tables.entrySet()) {</p>
<p>​      m.getValue().close();</p>
<p>​    }</p>
<p>​    admin.close();</p>
<p>​    conn.close();</p>
<p>​     conf.clear();</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 关卡登记信息bayonet：姓名，身份证号，年龄，性别，关卡号，日期时间，通关形式</p>
<p>   * 住宿登记信息hotel：姓名，身份证号，年龄，性别，起始日期，结束日期，同行人</p>
<p>   * 网吧登记信息internet：姓名，身份证号，年龄，性别，网吧名，日期，逗留时长</p>
<p>   *&#x2F;</p>
<p>  &#x2F;&#x2F;用于提前建好表和列族</p>
<p>  public static void preDeal() throws Exception {</p>
<p>​    HBaseUtil hBaseUtils &#x3D; new HBaseUtil();</p>
<p>​    hBaseUtils.createTable(ConstantUtil.TABLE_NAME, ConstantUtil.COLUMN_FAMILY_1, ConstantUtil.COLUMN_FAMILY_2);</p>
<p>  }</p>
<p>  &#x2F;&#x2F;测试</p>
<p>  public static void test() throws Exception {</p>
<p>​    HBaseUtil hBaseUtils &#x3D; new HBaseUtil();</p>
<p>​    long startTime &#x3D; System.currentTimeMillis();</p>
<p>​    String tb &#x3D; “testTb”;</p>
<p>​    String colFamily &#x3D; “info”;</p>
<p>​    String col &#x3D; “name”;</p>
<p>​    String row &#x3D; “100000”;</p>
<p>​    String value &#x3D; “张三”;</p>
<p>​    hBaseUtils.createTable(tb, colFamily);</p>
<p>​    List<Put> listPut &#x3D; new ArrayList&lt;&gt;();</p>
<p>​    Put put &#x3D; new Put(Bytes.toBytes(row));</p>
<p>​    put.addColumn(Bytes.toBytes(colFamily), Bytes.toBytes(col), Bytes.toBytes(value));</p>
<p>​    listPut.add(put);</p>
<p>​    hBaseUtils.put(tb, listPut);</p>
<p>​    Result res &#x3D; hBaseUtils.get(“testTb”, “100000”);</p>
<p>​    List<Cell> list &#x3D; res.getColumnCells(Bytes.toBytes(“info”), Bytes.toBytes(“name”));</p>
<p>​    for (Cell c : list) {</p>
<p>​      LOG.info(Bytes.toString(CellUtil.cloneFamily(c)));</p>
<p>​      LOG.info(Bytes.toString(CellUtil.cloneQualifier(c)));</p>
<p>​      LOG.info(Bytes.toString(CellUtil.cloneValue(c)));</p>
<p>​    }</p>
<p>​    long endTime &#x3D; System.currentTimeMillis();</p>
<p>​    float seconds &#x3D; (endTime - startTime) &#x2F; 1000F;</p>
<p>​    LOG.info(“ 耗时” + Float.toString(seconds) + “ seconds.”);</p>
<p>  }</p>
<p>  public static void main(String[] args) throws Exception {</p>
<p>​    test();</p>
<p>​    preDeal();</p>
<p>  }</p>
<p>}</p>
<p>运行测试</p>
<p>在主方法里将test方法设为非注释，preDeal方法设为注释</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image232.jpg" alt="img"></p>
<p>右键HBaseUtil -&gt; Run As -&gt; Java Application，运行测试代码</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image234.png" alt="img"></p>
<p>运行以后控制台输出如下</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image236.png" alt="img"></p>
<p>运行预处理</p>
<p>在Main方法中，将preDeal方法设为非注释，test方法设为注释。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image238.jpg" alt="img"></p>
<p>右键HBaseUtil -&gt; Run As -&gt; Java Application，运行预处理(建表和列族)代码。</p>
<p>控制台输出如下信息：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image240.png" alt="img"> </p>
<h3 id="3-2-7．步骤7-编写ElasticSearch工具类"><a href="#3-2-7．步骤7-编写ElasticSearch工具类" class="headerlink" title="3.2.7．步骤7 编写ElasticSearch工具类"></a>3.2.7．步骤7 编写ElasticSearch工具类</h3><p>新建类</p>
<p>右键com.huawei.bigdata.utils -&gt; New -&gt; Class -&gt; 新建ElasticSearchUtil类</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image242.jpg" alt="img"></p>
<p>编辑类</p>
<p>编辑该类的内容</p>
<p>package com.huawei.bigdata.utils;</p>
<p>import com.alibaba.fastjson.JSONObject;</p>
<p>import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;</p>
<p>import org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;</p>
<p>import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse;</p>
<p>import org.elasticsearch.action.index.IndexRequestBuilder;</p>
<p>import org.elasticsearch.action.index.IndexResponse;</p>
<p>import org.elasticsearch.action.search.SearchRequestBuilder;</p>
<p>import org.elasticsearch.action.search.SearchResponse;</p>
<p>import org.elasticsearch.client.IndicesAdminClient;</p>
<p>import org.elasticsearch.client.transport.TransportClient;</p>
<p>import org.elasticsearch.common.settings.Settings;</p>
<p>import org.elasticsearch.common.transport.TransportAddress;</p>
<p>import org.elasticsearch.common.xcontent.XContentBuilder;</p>
<p>import org.elasticsearch.common.xcontent.XContentType;</p>
<p>import org.elasticsearch.index.query.QueryBuilder;</p>
<p>import org.elasticsearch.index.query.QueryBuilders;</p>
<p>import org.elasticsearch.search.SearchHit;</p>
<p>import org.elasticsearch.search.SearchHits;</p>
<p>import org.elasticsearch.transport.client.PreBuiltTransportClient;</p>
<p>import org.slf4j.Logger;</p>
<p>import java.io.IOException;</p>
<p>import java.net.InetAddress;</p>
<p>import java.net.UnknownHostException;</p>
<p>import java.util.ArrayList;</p>
<p>import java.util.List;</p>
<p>import java.util.Map;</p>
<p>import java.util.Set;</p>
<p>import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;</p>
<p>&#x2F;**</p>
<p> * Created by ThisPC on 2020&#x2F;8&#x2F;6.</p>
<p> *&#x2F;</p>
<p>public class ElasticSearchUtil {</p>
<p>  &#x2F;&#x2F;构建Settings对象</p>
<p>  private static Settings settings &#x3D; Settings.builder().put(“cluster.name”, ConstantUtil.CLUSTER_NAME)</p>
<p>​      .put(“client.transport.sniff”, false).build();</p>
<p>  &#x2F;&#x2F;TransportClient对象，用于连接ES集群</p>
<p>  private volatile TransportClient client;</p>
<p>  private final static Logger LOG &#x3D; ConstantUtil.LOG;</p>
<p>  public ElasticSearchUtil() {</p>
<p>​    init();</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 同步synchronized(*.class)代码块的作用和synchronized static方法作用一样,</p>
<p>   * 对当前对应的*.class进行持锁,static方法和.class一样都是锁的该类本身,同一个监听器</p>
<ul>
<li></li>
</ul>
<p>   * @return</p>
<p>   * @throws UnknownHostException</p>
<p>   *&#x2F;</p>
<p>  public TransportClient getClient() {</p>
<p>​    if (client &#x3D;&#x3D; null) {</p>
<p>​      synchronized (TransportClient.class) {</p>
<p>​        try {</p>
<p>​          client &#x3D; new PreBuiltTransportClient(settings)</p>
<p>​              .addTransportAddress(new TransportAddress(InetAddress.getByName(ConstantUtil.HOSTNAME), ConstantUtil.TCP_PORT));</p>
<p>​        } catch (UnknownHostException e) {</p>
<p>​          e.printStackTrace();</p>
<p>​        }</p>
<p>​      }</p>
<p>​    }</p>
<p>​    return client;</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 获取索引管理的IndicesAdminClient</p>
<p>   *&#x2F;</p>
<p>  public IndicesAdminClient getAdminClient() {</p>
<p>​    return getClient().admin().indices();</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 判定索引是否存在</p>
<ul>
<li></li>
</ul>
<p>   * @param indexName</p>
<p>   * @return</p>
<p>   *&#x2F;</p>
<p>  public boolean isExistsIndex(String indexName) {</p>
<p>​    IndicesExistsResponse response &#x3D; getAdminClient().prepareExists(indexName).get();</p>
<p>​    return response.isExists() ? true : false;</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 创建索引</p>
<ul>
<li></li>
</ul>
<p>   * @param indexName</p>
<p>   * @return</p>
<p>   *&#x2F;</p>
<p>  public boolean createIndex(String indexName) {</p>
<p>​    CreateIndexResponse createIndexResponse &#x3D; getAdminClient()</p>
<p>​        .prepareCreate(indexName.toLowerCase())</p>
<p>​        .get();</p>
<p>​    return createIndexResponse.isAcknowledged() ? true : false;</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 删除索引</p>
<ul>
<li></li>
</ul>
<p>   * @param indexName</p>
<p>   * @return</p>
<p>   *&#x2F;</p>
<p>  public boolean deleteIndex(String indexName) {</p>
<p>​    DeleteIndexResponse deleteResponse &#x3D; getAdminClient()</p>
<p>​        .prepareDelete(indexName.toLowerCase())</p>
<p>​        .execute()</p>
<p>​        .actionGet();</p>
<p>​    return deleteResponse.isAcknowledged() ? true : false;</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 位索引indexName设置mapping</p>
<ul>
<li></li>
</ul>
<p>   * @param indexName</p>
<p>   * @param typeName</p>
<p>   * @param mapping</p>
<p>   *&#x2F;</p>
<p>  public void setMapping(String indexName, String typeName, String mapping) {</p>
<p>​    getAdminClient().preparePutMapping(indexName)</p>
<p>​        .setType(typeName)</p>
<p>​        .setSource(mapping, XContentType.JSON)</p>
<p>​        .get();</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 创建文档,相当于往表里面insert一行数据</p>
<ul>
<li></li>
</ul>
<p>   * @param indexName</p>
<p>   * @param typeName</p>
<p>   * @param id</p>
<p>   * @param document</p>
<p>   * @return</p>
<p>   * @throws IOException</p>
<p>   *&#x2F;</p>
<p>  public long addDocument(String indexName, String typeName, String id, Map&lt;String, Object&gt; document) throws IOException {</p>
<p>​    Set&lt;Map.Entry&lt;String, Object&gt;&gt; documentSet &#x3D; document.entrySet();</p>
<p>​    IndexRequestBuilder builder &#x3D; getClient().prepareIndex(indexName, typeName, id);</p>
<p>​    XContentBuilder xContentBuilder &#x3D; jsonBuilder().startObject();</p>
<p>​    for (Map.Entry e : documentSet) {</p>
<p>​      xContentBuilder &#x3D; xContentBuilder.field(e.getKey().toString(), e.getValue());</p>
<p>​    }</p>
<p>​    IndexResponse response &#x3D; builder.setSource(xContentBuilder.endObject()).get();</p>
<p>​    return response.getVersion();</p>
<p>  }</p>
<p>  public List&lt;Map&lt;String, Object&gt;&gt; queryStringQuery(String text) {</p>
<p>​    List&lt;Map&lt;String, Object&gt;&gt; resListMap &#x3D; null;</p>
<p>​    QueryBuilder match &#x3D; QueryBuilders.queryStringQuery(text);</p>
<p>​    SearchRequestBuilder search &#x3D; getClient().prepareSearch()</p>
<p>​        .setQuery(match); &#x2F;&#x2F;分页 可选</p>
<p>​    &#x2F;&#x2F;搜索返回搜索结果</p>
<p>​    SearchResponse response &#x3D; search.get();</p>
<p>​    &#x2F;&#x2F;命中的文档</p>
<p>​    SearchHits hits &#x3D; response.getHits();</p>
<p>​    &#x2F;&#x2F;命中总数</p>
<p>​    Long total &#x3D; hits.getTotalHits();</p>
<p>​    SearchHit[] hitAarr &#x3D; hits.getHits();</p>
<p>​    &#x2F;&#x2F;循环查看命中值</p>
<p>​    resListMap &#x3D; new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</p>
<p>​    for (SearchHit hit : hitAarr) {</p>
<p>​      &#x2F;&#x2F;文档元数据</p>
<p>​      String index &#x3D; hit.getIndex();</p>
<p>​      &#x2F;&#x2F;文档的_source的值</p>
<p>​      Map&lt;String, Object&gt; resultMap &#x3D; hit.getSourceAsMap();</p>
<p>​      resListMap.add(resultMap);</p>
<p>​    }</p>
<p>​    return resListMap;</p>
<p>  }</p>
<p>  private void init() {</p>
<p>​    try {</p>
<p>​      client &#x3D; new PreBuiltTransportClient(settings)</p>
<p>​          .addTransportAddress(new TransportAddress(InetAddress.getByName(ConstantUtil.HOSTNAME), ConstantUtil.TCP_PORT));</p>
<p>​    } catch (UnknownHostException e) {</p>
<p>​      e.printStackTrace();</p>
<p>​    }</p>
<p>  }</p>
<p>  &#x2F;&#x2F;用于提前建好索引，相当于关系型数据库当中的数据库</p>
<p>  public static void preDealCreatIndex() {</p>
<p>​    ElasticSearchUtil esUtils &#x3D; new ElasticSearchUtil();</p>
<p>​    LOG.info(“start create index…………..”);</p>
<p>​    esUtils.createIndex(ConstantUtil.INDEX_NAME);</p>
<p>​    LOG.info(“finished create index !”);</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 关卡登记信息bayonet：姓名，身份证号，年龄，性别，关卡号，日期时间，通关形式</p>
<p>   * 住宿登记信息hotel：姓名，身份证号，年龄，性别，起始日期，结束日期，同行人</p>
<p>   * 网吧登记信息internet：姓名，身份证号，年龄，性别，网吧名，日期，逗留时长</p>
<p>   * name,id,age,gender,</p>
<p>   * hotelAddr,hotelInTime,hotelOutTime,acquaintancer,</p>
<p>   * barAddr,internetDate,timeSpent,</p>
<p>   * bayonetAddr,crossDate,tripType</p>
<p>   *&#x2F;</p>
<p>  public static void preDealSetMapping() {</p>
<p>​    JSONObject mappingTypeJson &#x3D; new JSONObject();</p>
<p>​    JSONObject propertiesJson &#x3D; new JSONObject();</p>
<p>​    JSONObject idJson &#x3D; new JSONObject();</p>
<p>​    idJson.put(“type”, “keyword”);</p>
<p>​    idJson.put(“store”, “true”);</p>
<p>​    propertiesJson.put(“id”, idJson);</p>
<p>​    JSONObject nameJson &#x3D; new JSONObject();</p>
<p>​    nameJson.put(“type”, “keyword”);</p>
<p>​    propertiesJson.put(“name”, nameJson);</p>
<p>​    JSONObject uidJson &#x3D; new JSONObject();</p>
<p>​    uidJson.put(“type”, “keyword”);</p>
<p>​    uidJson.put(“store”, “false”);</p>
<p>​    propertiesJson.put(“uid”, uidJson);</p>
<p>​    JSONObject hotelAddr &#x3D; new JSONObject();</p>
<p>​    hotelAddr.put(“type”, “text”);</p>
<p>​    propertiesJson.put(“address”, hotelAddr);</p>
<p>​    JSONObject happenedDate &#x3D; new JSONObject();</p>
<p>​    happenedDate.put(“type”, “date”);</p>
<p>​    happenedDate.put(“format”, “yyyy-MM-dd”);</p>
<p>​    propertiesJson.put(“happenedDate”, happenedDate);</p>
<p>​    JSONObject endDate &#x3D; new JSONObject();</p>
<p>​    endDate.put(“type”, “date”);</p>
<p>​    endDate.put(“format”, “yyyy-MM-dd”);</p>
<p>​    propertiesJson.put(“endDate”, endDate);</p>
<p>​    JSONObject acquaintancer &#x3D; new JSONObject();</p>
<p>​    acquaintancer.put(“type”, “keyword”);</p>
<p>​    propertiesJson.put(“acquaintancer”, acquaintancer);</p>
<p>​    mappingTypeJson.put(“properties”, propertiesJson);</p>
<p>​    LOG.info(“start set mapping to “ + ConstantUtil.INDEX_NAME + “ “ + ConstantUtil.TYPE_NAME + “ …..”);</p>
<p>​    LOG.info(mappingTypeJson.toString());</p>
<p>​    ElasticSearchUtil esUtils &#x3D; new ElasticSearchUtil();</p>
<p>​    esUtils.setMapping(ConstantUtil.INDEX_NAME, ConstantUtil.TYPE_NAME, mappingTypeJson.toString());</p>
<p>​    LOG.info(“set mapping done!!!”);</p>
<p>  }</p>
<p>  &#x2F;&#x2F;用于测试</p>
<p>  public static void test() {</p>
<p>​    String index &#x3D; “esindex”;</p>
<p>​    System.out.println(“createIndex…………..”);</p>
<p>​    ElasticSearchUtil esUtils &#x3D; new ElasticSearchUtil();</p>
<p>​    esUtils.createIndex(index);</p>
<p>​    System.out.println(“createIndex done!!!!!!!!!!!”);</p>
<p>​    System.out.println(“isExists &#x3D; “ + esUtils.isExistsIndex(index));</p>
<p>​    System.out.println(“deleteIndex……………”);</p>
<p>​    esUtils.deleteIndex(index);</p>
<p>​    System.out.println(“deleteIndex done!!!!”);</p>
<p>  }</p>
<p>  public static void main(String[] args) throws IOException {</p>
<p>​    preDealCreatIndex();</p>
<p>​    preDealSetMapping();</p>
<p>​    test();</p>
<p>  }</p>
<p>}</p>
<p>运行测试</p>
<p>在Main方法中，将test方法设为非注释，其余都注释，右键Run As -&gt; Java Application运行测试代码</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image244.jpg" alt="img"></p>
<p>运行完成控制台输出如下信息</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image245.png" alt="img"></p>
<p>运行预处理</p>
<p>将test方法设为注释，preDealCreatIndex和preDealSetMapping方法设为非注释。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image247.jpg" alt="img"></p>
<p>右键ElasticSearchUtil -&gt; Run As -&gt; Java Application，运行预处理代码。</p>
<p>运行完成后控制台输出如下信息：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image249.png" alt="img"></p>
<h3 id="3-2-8．步骤8-编写数据导入模块"><a href="#3-2-8．步骤8-编写数据导入模块" class="headerlink" title="3.2.8．步骤8 编写数据导入模块"></a>3.2.8．步骤8 编写数据导入模块</h3><p>新建包</p>
<p>右键src&#x2F;main&#x2F;java -&gt; New -&gt; Package -&gt; 新建com.huawei.bigdata.insert包</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image250.png" alt="img"></p>
<p>新建类</p>
<p>右键com.huawei.bigdata. insert -&gt; New -&gt; Class -&gt; 新建LoadData2HBaseAndElasticSearch类</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image251.png" alt="img"></p>
<p>编辑该类内容为：</p>
<p>package com.huawei.bigdata.insert;</p>
<p>import com.huawei.bigdata.utils.ConstantUtil;</p>
<p>import com.huawei.bigdata.utils.ElasticSearchUtil;</p>
<p>import com.huawei.bigdata.utils.HBaseUtil;</p>
<p>import org.apache.hadoop.hbase.client.Put;</p>
<p>import org.apache.hadoop.hbase.util.Bytes;</p>
<p>import java.io.BufferedReader;</p>
<p>import java.io.File;</p>
<p>import java.io.FileReader;</p>
<p>import java.util.*;</p>
<p>&#x2F;**</p>
<p> * Created by ThisPC on 2020&#x2F;8&#x2F;6.</p>
<p> *&#x2F;</p>
<p>&#x2F;**</p>
<p> * 读取本地文件并解析数据，之后插入HBase、ElasticSearch和graphBase 。</p>
<p> * 对应华为云服务为CloudTable、CSS、GES</p>
<p> *&#x2F;</p>
<p>public class LoadData2HBaseAndElasticSearch {</p>
<p>  private HBaseUtil hBaseUtil;</p>
<p>  private ElasticSearchUtil elasticSearchUtil;</p>
<p>  public LoadData2HBaseAndElasticSearch() {</p>
<p>  }</p>
<p>  &#x2F;**</p>
<p>   * 关卡登记信息bayonet：姓名，身份证号，年龄，性别，关卡号，日期时间，通关形式</p>
<p>   * 住宿登记信息hotel：姓名，身份证号，年龄，性别，起始日期，结束日期，同行人</p>
<p>   * 网吧登记信息internet：姓名，身份证号，年龄，性别，网吧名，日期，逗留时长</p>
<p>   * name,uid,age,gender,</p>
<p>   * hotelAddr,happenedDate,endDate,acquaintancer,</p>
<p>   * barAddr,happenedDate,duration,</p>
<p>   * bayonetAddr,happenedDate,tripType</p>
<p>   *&#x2F;</p>
<p>  public void insert() throws Exception {</p>
<p>​    hBaseUtil &#x3D; new HBaseUtil();</p>
<p>​    elasticSearchUtil &#x3D; new ElasticSearchUtil();</p>
<p>​    String filePath &#x3D; ConstantUtil.INPUT_PATH;</p>
<p>​    File dir &#x3D; new File(filePath);</p>
<p>​    File[] files &#x3D; dir.listFiles();</p>
<p>​    if (files !&#x3D; null) {</p>
<p>​      for (File file : files) {</p>
<p>​        if (file.isDirectory()) {</p>
<p>​          System.out.println(file.getName() + “This is a directory!”);</p>
<p>​        } else {</p>
<p>​          &#x2F;&#x2F;住宿登记信息</p>
<p>​          if (file.getName().contains(“hotel”)) {</p>
<p>​            BufferedReader reader &#x3D; null;</p>
<p>​            reader &#x3D; new BufferedReader(new FileReader(filePath + file.getName()));</p>
<p>​            String tempString &#x3D; null;</p>
<p>​            while ((tempString &#x3D; reader.readLine()) !&#x3D; null) {</p>
<p>​              &#x2F;&#x2F;Blank line judgment</p>
<p>​               if (!tempString.isEmpty()) {</p>
<p>​                List<Put> putList &#x3D; new ArrayList<Put>();</p>
<p>​                String[] elements &#x3D; tempString.split(“,”);</p>
<p>​                &#x2F;&#x2F;生成不重复用户ID，</p>
<p>​                String id &#x3D; UUID.randomUUID().toString();</p>
<p>​                Put put &#x3D; new Put(Bytes.toBytes(id));</p>
<p>​                &#x2F;&#x2F;将数据添加至hbase库</p>
<p>​                put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“name”), Bytes.toBytes(elements[0]));</p>
<p>​                put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“uid”), Bytes.toBytes(elements[1]));</p>
<p>​                put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“age”), Bytes.toBytes(elements[2]));</p>
<p>​                put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“gender”), Bytes.toBytes(elements[3]));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“event”), Bytes.toBytes(“hotel”));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“address”), Bytes.toBytes(elements[4]));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“happenedDate”), Bytes.toBytes(elements[5]));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“endDate”), Bytes.toBytes(elements[6]));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“acquaintancer”), Bytes.toBytes(elements[7]));</p>
<p>​                putList.add(put);</p>
<p>​                ConstantUtil.LOG.info(“hotel_info start putting to HBase ….:” + id + “ “ + tempString);</p>
<p>​                hBaseUtil.put(ConstantUtil.TABLE_NAME, putList);</p>
<p>​                &#x2F;&#x2F;将数据添加至ES库</p>
<p>​                Map&lt;String, Object&gt; esMap &#x3D; new HashMap&lt;String, Object&gt;();</p>
<p>​                esMap.put(“id”, id);</p>
<p>​                esMap.put(“name”, elements[0]);</p>
<p>​                esMap.put(“uid”, elements[1]);</p>
<p>​                esMap.put(“address”, elements[4]);</p>
<p>​                esMap.put(“happenedDate”, elements[5]);</p>
<p>​                esMap.put(“endDate”, elements[6]);</p>
<p>​                esMap.put(“acquaintancer”, elements[7]);</p>
<p>​                elasticSearchUtil.addDocument(ConstantUtil.INDEX_NAME, ConstantUtil.TYPE_NAME, id, esMap);</p>
<p>​                ConstantUtil.LOG.info(“start add document to ES…” + ConstantUtil.INDEX_NAME + “ “ + ConstantUtil.TYPE_NAME + “ “ + id + “ “ + esMap);</p>
<p>​              }</p>
<p>​            }</p>
<p>​            reader.close();</p>
<p>​          }</p>
<p>​          &#x2F;&#x2F;网吧登记信息</p>
<p>​          else if (file.getName().contains(“internet”)) {</p>
<p>​            BufferedReader reader &#x3D; null;</p>
<p>​            reader &#x3D; new BufferedReader(new FileReader(filePath + file.getName()));</p>
<p>​            String tempString &#x3D; null;</p>
<p>​            while ((tempString &#x3D; reader.readLine()) !&#x3D; null) {</p>
<p>​              &#x2F;&#x2F;Blank line judgment</p>
<p>​              if (!tempString.isEmpty()) {</p>
<p>​                List<Put> putList &#x3D; new ArrayList<Put>();</p>
<p>​                String[] elements &#x3D; tempString.split(“,”);</p>
<p>​                &#x2F;&#x2F;生成不重复用户ID，</p>
<p>​                String id &#x3D; UUID.randomUUID().toString();</p>
<p>​                 Put put &#x3D; new Put(Bytes.toBytes(id));</p>
<p>​                &#x2F;&#x2F;将数据添加至hbase库</p>
<p>​                put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“name”), Bytes.toBytes(elements[0]));</p>
<p>​                put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“uid”), Bytes.toBytes(elements[1]));</p>
<p>​                put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“age”), Bytes.toBytes(elements[2]));</p>
<p>​                put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“gender”), Bytes.toBytes(elements[3]));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“event”), Bytes.toBytes(“internetBar”));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“address”), Bytes.toBytes(elements[4]));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“happenedDate”), Bytes.toBytes(elements[5]));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“duration”), Bytes.toBytes(elements[6]));</p>
<p>​                putList.add(put);</p>
<p>​                ConstantUtil.LOG.info(“internet_info start putting to HBase … :” + id + “ “ + tempString);</p>
<p>​                hBaseUtil.put(ConstantUtil.TABLE_NAME, putList);</p>
<p>​                &#x2F;&#x2F;将数据添加至ES库</p>
<p>​                 Map&lt;String, Object&gt; esMap &#x3D; new HashMap&lt;String, Object&gt;();</p>
<p>​                esMap.put(“id”, id);</p>
<p>​                esMap.put(“name”, elements[0]);</p>
<p>​                esMap.put(“uid”, elements[1]);</p>
<p>​                 esMap.put(“address”, elements[4]);</p>
<p>​                esMap.put(“happenedDate”, elements[5]);</p>
<p>​                elasticSearchUtil.addDocument(ConstantUtil.INDEX_NAME, ConstantUtil.TYPE_NAME, id, esMap);</p>
<p>​                ConstantUtil.LOG.info(“start add document to ES…” + ConstantUtil.INDEX_NAME + “ “ + ConstantUtil.TYPE_NAME + “ “ + id + “ “ + esMap);</p>
<p>​              }</p>
<p>​            }</p>
<p>​            reader.close();</p>
<p>​          }</p>
<p>​          &#x2F;&#x2F;关卡登记信息</p>
<p>​          else if (file.getName().contains(“bayonet”)) {</p>
<p>​            BufferedReader reader &#x3D; null;</p>
<p>​            reader &#x3D; new BufferedReader(new FileReader(filePath + file.getName()));</p>
<p>​            String tempString &#x3D; null;</p>
<p>​            while ((tempString &#x3D; reader.readLine()) !&#x3D; null) {</p>
<p>​              &#x2F;&#x2F;Blank line judgment</p>
<p>​               if (!tempString.isEmpty()) {</p>
<p>​                List<Put> putList &#x3D; new ArrayList<Put>();</p>
<p>​                String[] elements &#x3D; tempString.split(“,”);</p>
<p>​                &#x2F;&#x2F;生成不重复用户ID，</p>
<p>​                String id &#x3D; UUID.randomUUID().toString();</p>
<p>​                Put put &#x3D; new Put(Bytes.toBytes(id));</p>
<p>​                &#x2F;&#x2F;将数据添加至hbase库</p>
<p>​                put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“name”), Bytes.toBytes(elements[0]));</p>
<p>​                 put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“uid”), Bytes.toBytes(elements[1]));</p>
<p>​                put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“age”), Bytes.toBytes(elements[2]));</p>
<p>​                 put.addColumn(Bytes.toBytes(“Basic”), Bytes.toBytes(“gender”), Bytes.toBytes(elements[3]));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“event”), Bytes.toBytes(“bayonet”));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“address”), Bytes.toBytes(elements[4]));</p>
<p>​                put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“happenedDate”), Bytes.toBytes(elements[5]));</p>
<p>​                 put.addColumn(Bytes.toBytes(“OtherInfo”), Bytes.toBytes(“tripType”), Bytes.toBytes(elements[6]));</p>
<p>​                putList.add(put);</p>
<p>​                hBaseUtil.put(ConstantUtil.TABLE_NAME, putList);</p>
<p>​                ConstantUtil.LOG.info(“bayonet_info start putting to HBase….:” + id + “ “ + tempString);</p>
<p>​                &#x2F;&#x2F;将数据添加至ES库</p>
<p>​                Map&lt;String, Object&gt; esMap &#x3D; new HashMap&lt;String, Object&gt;();</p>
<p>​                esMap.put(“id”, id);</p>
<p>​                esMap.put(“name”, elements[0]);</p>
<p>​                esMap.put(“uid”, elements[1]);</p>
<p>​                esMap.put(“address”, elements[4]);</p>
<p>​                 esMap.put(“happenedDate”, elements[5]);</p>
<p>​                elasticSearchUtil.addDocument(ConstantUtil.INDEX_NAME, ConstantUtil.TYPE_NAME, id, esMap);</p>
<p>​                ConstantUtil.LOG.info(“start add document to ES…” + ConstantUtil.INDEX_NAME + “ “ + ConstantUtil.TYPE_NAME + “ “ + id + “ “ + esMap);</p>
<p>​              }</p>
<p>​            }</p>
<p>​            reader.close();</p>
<p>​          }</p>
<p>​          &#x2F;&#x2F;数据描述文件跳过</p>
<p>​           else {</p>
<p>​            continue;</p>
<p>​          }</p>
<p>​        }</p>
<p>​      }</p>
<p>​      ConstantUtil.LOG.info(“load and insert done !!!!!!!!!!!!!!!!!!”);</p>
<p>​    }</p>
<p>  }</p>
<p>  public static void start() throws Exception {</p>
<p>​    LoadData2HBaseAndElasticSearch load2DB &#x3D; new LoadData2HBaseAndElasticSearch();</p>
<p>​    load2DB.insert();</p>
<p>  }</p>
<p>  public static void main(String[] args) throws Exception {</p>
<p>​    start();</p>
<p>  }</p>
<p>}</p>
<p>运行导入</p>
<p>运行主方法开始导入</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image253.jpg" alt="img"></p>
<p>右键LoadData2HbaseAndElasticSearch -&gt; Run As -&gt; Java Application。</p>
<p>运行后需要一段时间数据才能执行完毕，运行完毕后可以看到</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image255.png" alt="img"></p>
<h3 id="3-2-9．步骤9-编写ElasticSearch工具类"><a href="#3-2-9．步骤9-编写ElasticSearch工具类" class="headerlink" title="3.2.9．步骤9 编写ElasticSearch工具类"></a>3.2.9．步骤9 编写ElasticSearch工具类</h3><p>新建包</p>
<p>右键src&#x2F;main&#x2F;java -&gt; New -&gt; Package -&gt; 新建com.huawei.bigdata.query包</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image256.png" alt="img"></p>
<p>新建类</p>
<p>右键com.huawei.bigdata.query -&gt; New -&gt; Class -&gt; 新建Query类</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image257.png" alt="img"></p>
<p>编辑类内容为：</p>
<p>package com.huawei.bigdata.query;</p>
<p>import com.alibaba.fastjson.JSONObject;</p>
<p>import com.huawei.bigdata.utils.ConstantUtil;</p>
<p>import com.huawei.bigdata.utils.ElasticSearchUtil;</p>
<p>import com.huawei.bigdata.utils.HBaseUtil;</p>
<p>import org.apache.hadoop.hbase.Cell;</p>
<p>import org.apache.hadoop.hbase.CellUtil;</p>
<p>import org.apache.hadoop.hbase.client.Result;</p>
<p>import org.apache.hadoop.hbase.util.Bytes;</p>
<p>import java.io.IOException;</p>
<p>import java.util.List;</p>
<p>import java.util.Map;</p>
<p>&#x2F;**</p>
<p> * Created by ThisPC on 2020&#x2F;8&#x2F;6.</p>
<p> * 搜索逻辑是先搜索ElasticSearch，再查HBase</p>
<p> *&#x2F;</p>
<p>public class Query {</p>
<p>  private HBaseUtil hBaseUtil &#x3D; new HBaseUtil();</p>
<p>  private ElasticSearchUtil elasticSearchUtil &#x3D; new ElasticSearchUtil();</p>
<p>  private JSONObject result &#x3D; new JSONObject();</p>
<p>  private JSONObject tmpJS &#x3D; new JSONObject();</p>
<p>  public String query(String target) {</p>
<p>​    result.clear();</p>
<p>​    tmpJS.clear();</p>
<p>​    long startTime &#x3D; System.currentTimeMillis();</p>
<p>​    List&lt;Map&lt;String, Object&gt;&gt; listMap &#x3D; elasticSearchUtil.queryStringQuery(target);</p>
<p>​    long endTime &#x3D; System.currentTimeMillis();</p>
<p>​    float seconds &#x3D; (endTime - startTime) &#x2F; 1000F;</p>
<p>​    ConstantUtil.LOG.info(“ElasticSearch查询耗时” + Float.toString(seconds) + “ seconds.”);</p>
<p>​    for (Map&lt;String, Object&gt; m : listMap) {</p>
<p>​      String id &#x3D; m.get(“id”).toString();</p>
<p>​      JSONObject tmpJS &#x3D; new JSONObject();</p>
<p>​      tmpJS.put(“id”, id);</p>
<p>​      Result res &#x3D; null;</p>
<p>​      try {</p>
<p>​        long s1 &#x3D; System.currentTimeMillis();</p>
<p>​        res &#x3D; hBaseUtil.get(ConstantUtil.TABLE_NAME, id);</p>
<p>​        long e1 &#x3D; System.currentTimeMillis();</p>
<p>​        float se1 &#x3D; (e1 - s1) &#x2F; 1000F;</p>
<p>​        ConstantUtil.LOG.info(“HBase查询耗时” + Float.toString(se1) + “ seconds.”);</p>
<p>​        Cell[] cells &#x3D; res.rawCells();</p>
<p>​        for (Cell cell : cells) {</p>
<p>​          String col &#x3D; Bytes.toString(CellUtil.cloneQualifier(cell));</p>
<p>​          System.out.println(col);</p>
<p>​          String value &#x3D; Bytes.toString(CellUtil.cloneValue(cell));</p>
<p>​          System.out.println(value);</p>
<p>​          tmpJS.put(col, value);</p>
<p>​        }</p>
<p>​        result.put(id, tmpJS);</p>
<p>​      } catch (IOException e) {</p>
<p>​        e.printStackTrace();</p>
<p>​        result.put(id, “查询失败!”);</p>
<p>​      }</p>
<p>​    }</p>
<p>​    return result.toString();</p>
<p>  }</p>
<p>  public static void main(String[] args) throws Exception {</p>
<p>​    Query query &#x3D; new Query();</p>
<p>​    long startTime &#x3D; System.currentTimeMillis();</p>
<p>​    System.out.println(query.query(“100004”));</p>
<p>​    long endTime &#x3D; System.currentTimeMillis();</p>
<p>​    float seconds &#x3D; (endTime - startTime) &#x2F; 1000F;</p>
<p>​    ConstantUtil.LOG.info(“ 耗时” + Float.toString(seconds) + “ seconds.”);</p>
<p>  }</p>
<p>}</p>
<p>运行测试</p>
<p>运行查询测试代码</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image259.jpg" alt="img"></p>
<p>右键Query -&gt; Run As -&gt; Java Application，运行测试代码。</p>
<p>运行后控制台输出如下</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image261.png" alt="img"></p>
<h3 id="3-2-10．步骤10编写页面模块"><a href="#3-2-10．步骤10编写页面模块" class="headerlink" title="3.2.10．步骤10编写页面模块"></a>3.2.10．步骤10编写页面模块</h3><p>导入插件</p>
<p>在src&#x2F;main&#x2F;resources下新建文件夹名为static</p>
<p>右键src&#x2F;main&#x2F;resources -&gt; New -&gt; Other -&gt; General -&gt; Folder -&gt; 新建static文件夹.</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image262.png" alt="img"></p>
<p>在static下新建文件夹名为plugins</p>
<p>右键static -&gt; New -&gt; Folder -&gt; 新建plugins文件夹.</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image263.png" alt="img"></p>
<p>将两个插件复制进static.plugins文件夹下</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image265.jpg" alt="img"></p>
<p>导入HTML页面</p>
<p>src&#x2F;main&#x2F;resources下新建文件夹名为templates</p>
<p>右键src&#x2F;main&#x2F;resources -&gt; New -&gt; Folder -&gt; 新建templates文件夹.</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image266.png" alt="img"></p>
<p>在templates文件夹下导入（复制）info_target_search.html文件</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image268.jpg" alt="img"></p>
<p>info_target_search.html的内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;plugins/bootstrap-3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;plugins/bootstrap-table/bootstrap-table.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- WARNING: Respond.js doesn&#x27;t work if you view the page via file:// --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js&quot;&gt;&lt;/script&gt;;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">&lt;!-- onsubmit设置成return false,不再显式提交form --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2 text-center&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">​       <span class="attr">onsubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;target&quot;</span>&gt;</span>请输入条件<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">​                               <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入条件&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>搜一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 在下一行中，添加一个bs系统自带的表格 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery (necessary for Bootstrap&#x27;s JavaScript plugins) --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://code.jquery.com/jquery-1.12.1.min.js&quot;</span> ;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;plugins/bootstrap-3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 加入bootstrap table依赖 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;plugins/bootstrap-table/bootstrap-table.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;plugins/bootstrap-table/bootstrap-table-locale-all.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​    &lt;!--初始化表格的样式 --&gt;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​    $(<span class="string">&#x27;#table&#x27;</span>).<span class="title function_">bootstrapTable</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      <span class="attr">columns</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">field</span>: <span class="string">&#x27;id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">title</span>: <span class="string">&#x27;记录id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">value, row, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">if</span> (value == $(<span class="string">&quot;#target&quot;</span>).<span class="title function_">val</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color:#5858FA&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color#190707&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">return</span> a;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">field</span>: <span class="string">&#x27;name&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">title</span>: <span class="string">&#x27;姓名&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">value, row, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​           <span class="keyword">if</span> (value == $(<span class="string">&quot;#target&quot;</span>).<span class="title function_">val</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color:#5858FA&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color#190707&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">return</span> a;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">field</span>: <span class="string">&#x27;uid&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">title</span>: <span class="string">&#x27;用户id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">value, row, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">if</span> (value == $(<span class="string">&quot;#target&quot;</span>).<span class="title function_">val</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color:#5858FA&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color#190707&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">return</span> a;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">field</span>: <span class="string">&#x27;age&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">title</span>: <span class="string">&#x27;年龄&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">value, row, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">if</span> (value == $(<span class="string">&quot;#target&quot;</span>).<span class="title function_">val</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color:#5858FA&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color#190707&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">return</span> a;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">field</span>: <span class="string">&#x27;gender&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">title</span>: <span class="string">&#x27;性别&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">value, row, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">if</span> (value == $(<span class="string">&quot;#target&quot;</span>).<span class="title function_">val</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color:#5858FA&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color#190707&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">return</span> a;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">field</span>: <span class="string">&#x27;event&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">title</span>: <span class="string">&#x27;事件&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">value, row, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">if</span> (value == $(<span class="string">&quot;#target&quot;</span>).<span class="title function_">val</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color:#5858FA&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color#190707&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​           &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">return</span> a;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">field</span>: <span class="string">&#x27;address&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">title</span>: <span class="string">&#x27;地址&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">value, row, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">if</span> (value == $(<span class="string">&quot;#target&quot;</span>).<span class="title function_">val</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color:#5858FA&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color#190707&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">return</span> a;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">field</span>: <span class="string">&#x27;happenedDate&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">title</span>: <span class="string">&#x27;发生时间&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">value, row, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">if</span> (value == $(<span class="string">&quot;#target&quot;</span>).<span class="title function_">val</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​             a = <span class="string">&#x27;&lt;span style=&quot;color:#5858FA&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color#190707&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">return</span> a;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">field</span>: <span class="string">&#x27;acquaintancer&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">title</span>: <span class="string">&#x27;同行人&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">value, row, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">if</span> (value == $(<span class="string">&quot;#target&quot;</span>).<span class="title function_">val</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color:#5858FA&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color#190707&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">return</span> a;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">field</span>: <span class="string">&#x27;endDate&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">title</span>: <span class="string">&#x27;结束时间&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">value, row, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">if</span> (value == $(<span class="string">&quot;#target&quot;</span>).<span class="title function_">val</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color:#5858FA&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            a = <span class="string">&#x27;&lt;span style=&quot;color#190707&quot;&gt;&#x27;</span> + value + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​           &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">return</span> a;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      &#125;]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​    <span class="comment">//为submit按钮绑定click事件,填充点击查询后的数据查询</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​    $(<span class="string">&quot;#submit&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">url</span>: <span class="string">&#x27;/hw_bigdata/search&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​         <span class="attr">data</span>: <span class="string">&quot;target=&quot;</span> + $(<span class="string">&quot;#target&quot;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">cache</span>: <span class="literal">false</span>,<span class="comment">//false是不缓存，true为缓存</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">async</span>: <span class="literal">true</span>,<span class="comment">//true为异步，false为同步</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="comment">//请求前</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            <span class="keyword">var</span> resultArray = <span class="keyword">new</span> <span class="title class_">Array</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            js = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> js) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​              resultArray.<span class="title function_">push</span>(js[p])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​               <span class="variable language_">console</span>.<span class="title function_">log</span>(js[p]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            <span class="variable language_">console</span>.<span class="title function_">log</span>(resultArray);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​             $(<span class="string">&quot;#table&quot;</span>).<span class="title function_">bootstrapTable</span>(<span class="string">&#x27;load&#x27;</span>, resultArray);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            <span class="variable language_">window</span>.<span class="title function_">alert</span>(result);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            $(<span class="string">&quot;#table&quot;</span>).<span class="title function_">bootstrapTable</span>(<span class="string">&#x27;load&#x27;</span>, [&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​              <span class="string">&quot;result&quot;</span>: <span class="string">&quot;什么也没有找到&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​            &#125;]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">complete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="comment">//请求结束时</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​          <span class="comment">//请求失败时</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">​    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<h3 id="3-2-11．步骤11部署搜索服务"><a href="#3-2-11．步骤11部署搜索服务" class="headerlink" title="3.2.11．步骤11部署搜索服务"></a>3.2.11．步骤11部署搜索服务</h3><p>新建manager包</p>
<p>在com.huawei.bigdata包下新建manager包</p>
<p>右键src&#x2F;main&#x2F;java -&gt; New -&gt; Package -&gt; 新建com.huawei.bigdata.manager包</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image269.png" alt="img"></p>
<p>在manager包新建Manager类</p>
<p>右键com.huawei.bigdata.manager-&gt; New -&gt; Class -&gt; 新建Manager类</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image270.png" alt="img"></p>
<p>编辑Manager类内容：</p>
<p>package com.huawei.bigdata.manager;</p>
<p>import com.huawei.bigdata.query.Query;</p>
<p>import org.springframework.stereotype.Component;</p>
<p>@Component</p>
<p>public class Manager {</p>
<p>  private static Query query &#x3D; new Query();</p>
<p>  public static String getQueryResult(String target) {</p>
<p>​    try {</p>
<p>​      String result &#x3D; query.query(target);</p>
<p>​      System.out.println(result);</p>
<p>​      return result;</p>
<p>​    } catch (Exception e) {</p>
<p>​      e.printStackTrace();</p>
<p>​      return “查询出现异常，请通知研发人员!”;</p>
<p>​    }</p>
<p>  }</p>
<p>   public static void main(String[] args) {</p>
<p>​    String target &#x3D; “牧之桃”;</p>
<p>​    String result &#x3D; Manager.getQueryResult(target);</p>
<p>​    System.out.println(result);</p>
<p>  }</p>
<p>}</p>
<p>右键Manager-&gt; Run As -&gt; Java Application，运行测试。</p>
<p>运行控制台输出如下</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image272.png" alt="img"></p>
<p>新建controller包</p>
<p>在com.huawei.bigdata包下新建controller包</p>
<p>右键src&#x2F;main&#x2F;java -&gt; New -&gt; Package -&gt; 新建com.huawei.bigdata.controller包</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image273.png" alt="img"></p>
<p>在com.huawei.bigdata包下新建SearchController类</p>
<p>右键com.huawei.bigdata.bigdata -&gt; New -&gt; Class -&gt; 新建SearchController类</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image274.png" alt="img"></p>
<p>编辑SearchController类内容如下：</p>
<p>package com.huawei.bigdata.controller;</p>
<p>import org.springframework.boot.SpringApplication;</p>
<p>import org.springframework.stereotype.Controller;</p>
<p>import org.springframework.ui.ModelMap;</p>
<p>import org.springframework.web.bind.annotation.RequestMapping;</p>
<p>&#x2F;**</p>
<p> * Created by ThisPC on 2020&#x2F;8&#x2F;6.</p>
<p> * <p></p>
<p> * 注解声明，该类为Controller类 并自动加载所需要的其它类</p>
<p> *&#x2F;</p>
<p>@Controller</p>
<p>public class SearchController {</p>
<p>  @RequestMapping(“&#x2F;search_target”)</p>
<p>String testdo(ModelMap map) {</p>
<p>&#x2F;&#x2F;这里返回HTML页面</p>
<p>​    return “info_target_search”;</p>
<p>  }</p>
<p>  &#x2F;&#x2F; 主方法，像一般的Java类一般去右击run as application时候，执行该方法</p>
<p>  public static void main(String[] args) {</p>
<p>​    SpringApplication.run(SearchController.class, args);</p>
<p>  }</p>
<p>}</p>
<p>新建rest包</p>
<p>在controller包下新建rest包</p>
<p>右键com.huawei.bigdata.controller-&gt; New -&gt; Package -&gt; 新建rest包</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image275.png" alt="img"></p>
<p>在rest包下新建SearchService类</p>
<p>右键com.huawei.bigdata.controller.rest -&gt; New -&gt; Class -&gt; 新建SearchService类</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image276.png" alt="img"></p>
<p>编辑SearchService类内容</p>
<p>package com.huawei.bigdata.controller.rest;</p>
<p>import com.huawei.bigdata.manager.Manager;</p>
<p>import org.springframework.boot.SpringApplication;</p>
<p>import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</p>
<p>import org.springframework.context.annotation.ComponentScan;</p>
<p>import org.springframework.web.bind.annotation.RequestMapping;</p>
<p>import org.springframework.web.bind.annotation.RestController;</p>
<p>&#x2F;**</p>
<p> * Created by ThisPC on 2020&#x2F;8&#x2F;6.</p>
<p> *&#x2F;</p>
<p>@RestController</p>
<p>@EnableAutoConfiguration</p>
<p>@ComponentScan(basePackages &#x3D; {“com.huawei.bigdata”})</p>
<p>public class SearchService {</p>
<p>  @RequestMapping(“&#x2F;search”)</p>
<p>  public String search(String target) {</p>
<p>​    try {</p>
<p>​      return Manager.getQueryResult(target);</p>
<p>​    } catch (Exception e) {</p>
<p>​      e.printStackTrace();</p>
<p>​    }</p>
<p>​    return “不小心出错了!”;</p>
<p>  }</p>
<p>  &#x2F;&#x2F; 主方法，像一般的Java类一般去右击run as application时候，执行该方法</p>
<p>  public static void main(String[] args) throws Exception {</p>
<p>​    SpringApplication.run(SearchService.class, args);</p>
<p>  }</p>
<p>}</p>
<p>新建boot包</p>
<p>在controller包下新建boot包</p>
<p>右键com.huawei.bigdata.controller-&gt; New -&gt; Package -&gt; 新建boot包</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image277.png" alt="img"></p>
<p>在boot包下新建ApplicationBootController类</p>
<p>右键com.huawei.bigdata.controller.boot -&gt; New -&gt; Class -&gt; 新建ApplicationBootController类</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image278.png" alt="img"></p>
<p>编辑ApplicationBootController类内容：</p>
<p>package com.huawei.bigdata.controller.boot;</p>
<p>import org.springframework.boot.SpringApplication;</p>
<p>import org.springframework.boot.autoconfigure.SpringBootApplication;</p>
<p>import org.springframework.context.annotation.ComponentScan;</p>
<p>&#x2F;**</p>
<p> * 根启动类</p>
<p> * Created by ThisPC on 2020&#x2F;8&#x2F;6.</p>
<p> *&#x2F;</p>
<p>@SpringBootApplication</p>
<p>@ComponentScan(basePackages &#x3D; “com.huawei.bigdata”)</p>
<p>public class ApplicationBootController {</p>
<p>  public static void main(String[] args) {</p>
<p>​    SpringApplication.run(ApplicationBootController.class, args);</p>
<p>  }</p>
<p>}</p>
<p>此时项目完整结构为：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image279.png" alt="img"></p>
<h3 id="3-2-12．步骤12效果演示"><a href="#3-2-12．步骤12效果演示" class="headerlink" title="3.2.12．步骤12效果演示"></a>3.2.12．步骤12效果演示</h3><p>启动服务</p>
<p>右键ApplicationBootController-&gt; Run As -&gt; Java Application，运行ApplicationBootController</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image281.jpg" alt="img"></p>
<p>启动成功后控制台输出如下：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image283.png" alt="img"></p>
<p>在浏览器查看Web页面</p>
<p>打开ECS服务器的chrome浏览器，输入<a href="http://localhost:8084/hw_bigdata/search_target">http://localhost:8084/hw_bigdata/search_target</a></p>
<p>搜索演示</p>
<p>ID查询</p>
<p>输入100006</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image285.png" alt="img"></p>
<p>输入100007</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image287.png" alt="img"></p>
<p>姓名查询</p>
<p>输入孙寻真</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image289.png" alt="img"></p>
<p>输入陈友儿</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image291.png" alt="img"></p>
<p>地址查询</p>
<p>输入汉庭</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image293.png" alt="img"></p>
<p>输入心悦</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image295.png" alt="img"></p>
<p>输入时间2017-09-03</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image297.png" alt="img"></p>
<p>实验完成。</p>
<h3 id="3-2-13．步骤13释放资源"><a href="#3-2-13．步骤13释放资源" class="headerlink" title="3.2.13．步骤13释放资源"></a>3.2.13．步骤13释放资源</h3><p>删除云搜索服务</p>
<p>进入云搜索服务管理页面删除云搜索服务CSS</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image299.png" alt="img"></p>
<p>删除MapReduce服务</p>
<p>进入MapReduce服务控制台页面删除MapReduce服务MRS</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image301.jpg" alt="img"></p>
<p>删除弹性云服务器</p>
<p>进入弹性云服务管理页面，删除弹性云服务服务器ECS和弹性公网IP</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image303.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image305.png" alt="img"></p>
<h1 id="4-实验总结"><a href="#4-实验总结" class="headerlink" title="4.实验总结"></a>4.实验总结</h1><p><strong>（<strong><strong>1</strong></strong>）实验完成情况</strong></p>
<p>实验完成率：100%。</p>
<p><strong>（<strong><strong>2</strong></strong>）出现的问题与解决方案</strong></p>
<p>问题1：ElasticSearch工具类的DeleteIndexResponse类无法正常导入</p>
<p>org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse包。</p>
<p>解决方法：ElasticSearch7.x版本更新所致。只要删除对应导入、将代码修改为直接返回结果。</p>
<p>问题2：运行ElasticSearch.java失败，没能成功。</p>
<p>解决方法：实验手册中给出的pom.xml是6.x版本，我的CSS使用的集群版本为7.10.2，这就造成了不匹配。因此，将pom.xml中Elasticsearch的版本信息都改为7.10.2即可，再次运行就会成功运行。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image307.png" alt="img"></p>
<p>问题3：远程桌面连接弹性云服务器时出现错误</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperimentEX2RealTimeRetrieval/clip_image309.jpg" alt="img"></p>
<p>解决方法：切换校园网为手机热点即可。</p>
<h1 id="5-课程总结"><a href="#5-课程总结" class="headerlink" title="5.课程总结"></a>5.课程总结</h1><p>短短两个月的大数据技术原理与应用课程和对应的实验课程让我提升了很多。张老师大力发动学生们的积极性，让我们自己在QQ群里面自主提问，自主解答，营造了良好的互帮互助的学习氛围。我是第一次见到原来可以这样学习，通过课程群的积极交流和讨论，不知不觉就解决了自己的问题。同时允许提前完成实验的同学当助教，教学相长也。当过助教的同学也对实验可能出现的问题有了更广更深的理解。</p>
<p>在张天成老师循循善诱又充满幽默和笑声的课堂上，我对分布式有了初步理解。可以讲Hadoop的核心内容看作是两个部分，一个是分布式存储，一个是分布式计算。</p>
<p>对于分布式存储，Hadoop有自己的一套系统来处理叫Hadoop distribution file system。为什么分布式存储需要一个额外的系统来处理呢，而不是就把1TB以上的文件分开存放就好了呢。如果不采用新的系统，我们存放的东西没办进行一个统一的管理。存放在A电脑的东西只能在连接到A去找，存在B的又得单独去B找。繁琐且不便于管理。而这个分布式存储文件系统能把这些文件分开存储的过程透明化，用户看不到文件是怎么存储在不同电脑上，看到的只是一个统一的管理界面。现在的云盘就是很好的给用户这种体验。</p>
<p>对于分布式计算。在对海量数据进行处理的时候，一台机器肯定也是不够用的。所以也需要考虑将将数据分在不同的机器上并行的进行计算，这样不经可以节省大量的硬件的I&#x2F;O开销。也能够将加快计算的速度。Hadoop对分布式计算的系统为MapReduce。Map即将数据分开存放进行计算，Reduce将分布计算的得到的结果进行整合，最后汇总得到一个最终的结果。这样对Hadoop的技术有一个清晰框架思路。</p>
<p>张老师的引导让我对分布式系统架构Hadoop有了较为扎实的理论基础，我与同学多次花费大量课外时间自学java，最终掌握了JAVA这门语言，它具有良好的可移植性和跨平台性，与C++一样都是面对对象的。学习Java的过程中，我对类、接口、包有了自己的理解。凭借着C和C++的基础，我们借助java实践切身感受了Hadoop的强大功能。不仅如此，我们通过大数据技术原理与应用的实验1、实验2、实验3、实验4、实验5分别了解并照着实验手册实践感受了Hbase、Redis、MongoDB以及NoSQL数据库、MapReduce的使用。</p>
<p>张天成老师给我们布置了更加具有挑战性和实践意义的华为云实验来代替大数据技术原理与应用的实验6和实验7。同时充分考虑了班级同学的需求和经济水平，给我们每位同学申请了代金券，这才让每位同学都能够获得这个来之不易的实验机会。虽然没有在课堂上学到Flink和Spark，我课余时间自己进行了摸索。</p>
<p>感谢张老师的悉心教导和助教学长们的热情帮助，两个月的时间收获颇丰，也给了我的未来一种新的可能性。总而言之，选了大数据方向我很庆幸。我真心感激自己有机会上这门课程，我原本对未来的方向没有确定，但学习这门课程之后，我深深地爱上了大数据这一领域，并且想要继续探索。我对分布式数据库还有想了解的东西，对并行处理还想深入学习。作为知行合一的东大人，站在东大百年校庆的风口上，虽然这门课的学习告一段落，但是大数据的学习远远没有终点。</p>
]]></content>
      <categories>
        <category>大数据技术原理与应用</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据技术原理与应用实验5MapReduce初级编程实践</title>
    <url>/2023/04/20/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C5MapReduce%E5%88%9D%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="实验5-MapReduce初级编程实践"><a href="#实验5-MapReduce初级编程实践" class="headerlink" title="实验5 MapReduce初级编程实践"></a>实验5 MapReduce初级编程实践</h1><h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1.  实验目的"></a>1.  实验目的</h1><p>（1） 通过实验掌握基本的 MapReduce 编程方法；</p>
<p>（2） 掌握用 MapReduce 解决一些常见的数据处理问题，包括数据去重、数据排序和数据挖掘等。</p>
<h1 id="2-实验平台"><a href="#2-实验平台" class="headerlink" title="2.实验平台"></a>2.实验平台</h1><p>（1） 操作系统： Linux（Ubuntu22.04）；</p>
<p>（2） Hadoop 版本： 3.1.3； </p>
<h1 id="3-实验步骤与结果"><a href="#3-实验步骤与结果" class="headerlink" title="3.实验步骤与结果"></a>3.实验步骤与结果</h1><p><strong>（一）编程实现文件合并和去重操作</strong></p>
<p>对于两个输入文件，即文件 A 和文件 B，请编写 MapReduce 程序，对两个文件进行合并，并剔除其中重复的内容，得到一个新的输出文件 C。下面是输入文件和输出文件的一个样例供参考。</p>
<p>输入文件 A 的样例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20170101 x   </span><br><span class="line"></span><br><span class="line">20170102 y  </span><br><span class="line"></span><br><span class="line">20170103 x </span><br><span class="line"></span><br><span class="line">20170104 y </span><br><span class="line"></span><br><span class="line">20170105 z </span><br><span class="line"></span><br><span class="line">20170106 x  </span><br></pre></td></tr></table></figure>

<p>输入文件 B 的样例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20170101 y </span><br><span class="line"></span><br><span class="line">20170102 y </span><br><span class="line"></span><br><span class="line">20170103 x </span><br><span class="line"></span><br><span class="line">20170104 z </span><br><span class="line"></span><br><span class="line">20170105 y  </span><br></pre></td></tr></table></figure>

<p>根据输入文件 A 和 B 合并得到的输出文件 C 的样例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20170101 x  </span><br><span class="line"></span><br><span class="line">20170101 y </span><br><span class="line"></span><br><span class="line">20170102 y </span><br><span class="line"></span><br><span class="line">20170103 x </span><br><span class="line"></span><br><span class="line">20170104 y </span><br><span class="line"></span><br><span class="line">20170104 z </span><br><span class="line"></span><br><span class="line">20170105 y </span><br><span class="line"></span><br><span class="line">20170105 z </span><br><span class="line"></span><br><span class="line">20170106 x  </span><br></pre></td></tr></table></figure>

<p><strong>A.操作过程</strong></p>
<p><strong>1.启动 hadoop</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image002.png" alt="img"></p>
<p><strong>2.需要首先删除HDFS中与当前Linux用户hadoop对应的input和output目录，这样确保后面程序运行不会出现问题。</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image004.png" alt="img"></p>
<p><strong>3.再在HDFS中新建与当前Linux用户hadoop对应的input目录。</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image006.png" alt="img"></p>
<p><strong>4.创建A.txt,B.txt，输入上述内容</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image007.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image008.png" alt="img"></p>
<p><strong>5.将A，B上传到HDFS中</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image010.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image012.png" alt="img"></p>
<p><strong>B.实验代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Merge</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">* 对A,B两个文件进行合并，并剔除其中重复的内容，得到一个新的输出文件C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//重载map函数，直接将输入中的value复制到输出数据的key上</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Map</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, Text&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Text</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException,InterruptedException&#123;</span><br><span class="line">text = value;</span><br><span class="line">context.write(text, <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载reduce函数，直接将输入中的key复制到输出数据的key上</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, Text, Text, Text&gt;&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context )</span> <span class="keyword">throws</span> IOException,InterruptedException&#123;</span><br><span class="line">context.write(key, <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">String[] otherArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;input&quot;</span>,<span class="string">&quot;output&quot;</span>&#125;; <span class="comment">/* 直接设置输入参数 */</span></span><br><span class="line"><span class="keyword">if</span> (otherArgs.length != <span class="number">2</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;Usage: wordcount &lt;in&gt;&lt;out&gt;&quot;</span>);</span><br><span class="line">System.exit(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf,<span class="string">&quot;Merge and duplicate removal&quot;</span>);</span><br><span class="line">job.setJarByClass(Merge.class);</span><br><span class="line">job.setMapperClass(Map.class);</span><br><span class="line">job.setCombinerClass(Reduce.class);</span><br><span class="line">job.setReducerClass(Reduce.class);</span><br><span class="line">job.setOutputKeyClass(Text.class);</span><br><span class="line">job.setOutputValueClass(Text.class);</span><br><span class="line">FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[<span class="number">1</span>]));</span><br><span class="line">System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>C.运行结果</strong></p>
<p><strong><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image018.png" alt="img"></strong></p>
<p><strong>（二）编写程序实现对输入文件的排序</strong></p>
<p>现在有多个输入文件，每个文件中的每行内容均为一个整数。要求读取所有文件中的整数，进行升序排序后，输出到一个新的文件中，输出的数据格式为每行两个整数，第一个数字为第二个整数的排序位次，第二个整数为原待排列的整数。下面是输入文件和输出文件的一个样例供参考。</p>
<p>输入文件 1 的样例如下：</p>
<p>  33   37   12   40  </p>
<p>输入文件 2 的样例如下：</p>
<p>  4   16   39   5  </p>
<p>输入文件 3 的样例如下：</p>
<p>  1   45   25  </p>
<p>根据输入文件 1、 2 和 3 得到的输出文件如下：</p>
<p>  1 1   2 4   3 5   4 12   5 16   6 25   7 33   8 37   9 39   10 40   11 45  </p>
<p><strong>A.操作过程</strong></p>
<p><strong>1.启动 hadoop</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image020.png" alt="img"></p>
<p><strong>2.需要首先删除HDFS中与当前Linux用户hadoop对应的input和output目录，这样确保后面程序运行不会出现问题。</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image022.png" alt="img"></p>
<p><strong>3.再在HDFS中新建与当前Linux用户hadoop对应的input目录。</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image024.png" alt="img"></p>
<p><strong>4.创建FileOne.txt,FileTwo.txt,FileThree.txt输入上述内容</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image026.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image028.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image030.png" alt="img"></p>
<p><strong>5.将FileOne.txt,FileTwo.txt,FileThree.txt上传到HDFS中</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image032.png" alt="img"></p>
<p><strong>B.实验代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">simple_data_mining</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">* 输入一个child-parent的表格</span></span><br><span class="line"><span class="comment">* 输出一个体现grandchild-grandparent关系的表格</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//Map将输入文件按照空格分割成child和parent，然后正序输出一次作为右表，反序输出一次作为左表，需要注意的是在输出的value中必须加上左右表区别标志</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Map</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, Text&gt;&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException,InterruptedException&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">child_name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">parent_name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">relation_type</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> value.toString();</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(line.charAt(i) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">String[] values = &#123;line.substring(<span class="number">0</span>,i),line.substring(i+<span class="number">1</span>)&#125;;</span><br><span class="line"><span class="keyword">if</span>(values[<span class="number">0</span>].compareTo(<span class="string">&quot;child&quot;</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">child_name = values[<span class="number">0</span>];</span><br><span class="line">parent_name = values[<span class="number">1</span>];</span><br><span class="line">relation_type = <span class="string">&quot;1&quot;</span>;<span class="comment">//左右表区分标志</span></span><br><span class="line">context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(values[<span class="number">1</span>]), <span class="keyword">new</span> <span class="title class_">Text</span>(relation_type+<span class="string">&quot;+&quot;</span>+child_name+<span class="string">&quot;+&quot;</span>+parent_name));</span><br><span class="line"><span class="comment">//左表</span></span><br><span class="line">relation_type = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(values[<span class="number">0</span>]), <span class="keyword">new</span> <span class="title class_">Text</span>(relation_type+<span class="string">&quot;+&quot;</span>+child_name+<span class="string">&quot;+&quot;</span>+parent_name));</span><br><span class="line"><span class="comment">//右表</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, Text, Text, Text&gt;&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values,Context context)</span> <span class="keyword">throws</span> IOException,InterruptedException&#123;</span><br><span class="line"><span class="keyword">if</span>(time == <span class="number">0</span>)&#123;   <span class="comment">//输出表头</span></span><br><span class="line">context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;grand_child&quot;</span>), <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;grand_parent&quot;</span>));</span><br><span class="line">time++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">grand_child_num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">String grand_child[] = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">grand_parent_num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">String grand_parent[]= <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">ite</span> <span class="operator">=</span> values.iterator();</span><br><span class="line"><span class="keyword">while</span>(ite.hasNext())&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">record</span> <span class="operator">=</span> ite.next().toString();</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> record.length();</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">relation_type</span> <span class="operator">=</span> record.charAt(<span class="number">0</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">child_name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">parent_name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="comment">//获取value-list中value的child</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(record.charAt(i) != <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">child_name = child_name + record.charAt(i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">i=i+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//获取value-list中value的parent</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;len)&#123;</span><br><span class="line">parent_name = parent_name+record.charAt(i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左表，取出child放入grand_child</span></span><br><span class="line"><span class="keyword">if</span>(relation_type == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">grand_child[grand_child_num] = child_name;</span><br><span class="line">grand_child_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//右表，取出parent放入grand_parent</span></span><br><span class="line">grand_parent[grand_parent_num] = parent_name;</span><br><span class="line">grand_parent_num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(grand_parent_num != <span class="number">0</span> &amp;&amp; grand_child_num != <span class="number">0</span> )&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;m&lt;grand_child_num;m++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> n=<span class="number">0</span>;n&lt;grand_parent_num;n++)&#123;</span><br><span class="line">context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(grand_child[m]), <span class="keyword">new</span> <span class="title class_">Text</span>(grand_parent[n]));</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">String[] otherArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;input&quot;</span>,<span class="string">&quot;output&quot;</span>&#125;; <span class="comment">/* 直接设置输入参数 */</span></span><br><span class="line"><span class="keyword">if</span> (otherArgs.length != <span class="number">2</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;Usage: wordcount &lt;in&gt;&lt;out&gt;&quot;</span>);</span><br><span class="line">System.exit(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf,<span class="string">&quot;Single table join&quot;</span>);</span><br><span class="line">job.setJarByClass(simple_data_mining.class);</span><br><span class="line">job.setMapperClass(Map.class);</span><br><span class="line">job.setReducerClass(Reduce.class);</span><br><span class="line">job.setOutputKeyClass(Text.class);</span><br><span class="line">job.setOutputValueClass(Text.class);</span><br><span class="line">FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[<span class="number">1</span>]));</span><br><span class="line">System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p><strong>C.运行结果</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image040.png" alt="img"></p>
<p><strong>（三）对给定的表格进行信息挖掘</strong></p>
<p>下面给出一个 child-parent 的表格，要求挖掘其中的父子辈关系，给出祖孙辈关系的表<br> 格。</p>
<p>输入文件内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">child parent </span><br><span class="line"></span><br><span class="line"> Steven Lucy </span><br><span class="line"></span><br><span class="line"> Steven Jack </span><br><span class="line"></span><br><span class="line"> Jone Lucy </span><br><span class="line"></span><br><span class="line"> Jone Jack </span><br><span class="line"></span><br><span class="line"> Lucy Mary </span><br><span class="line"></span><br><span class="line"> Lucy Frank </span><br><span class="line"></span><br><span class="line"> Jack Alice </span><br><span class="line"></span><br><span class="line"> Jack Jesse </span><br><span class="line"></span><br><span class="line"> David Alice </span><br><span class="line"></span><br><span class="line"> David Jesse </span><br><span class="line"></span><br><span class="line"> Philip David </span><br><span class="line"></span><br><span class="line"> Philip Alma </span><br><span class="line"></span><br><span class="line"> Mark David </span><br><span class="line"></span><br><span class="line"> Mark Alma  </span><br></pre></td></tr></table></figure>

<p>输出文件内容如下：</p>
<p>  grandchild  grandparent </p>
<p>  Steven Alice   Steven Jesse </p>
<p>  Jone Alice   Jone Jesse </p>
<p>  Steven Mary   Steven Frank </p>
<p>  Jone Mary   Jone Frank </p>
<p>  Philip Alice   Philip Jesse </p>
<p>  Mark Alice   Mark Jesse  </p>
<p><strong>A.操作过程</strong></p>
<p><strong>1.启动 hadoop</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image041.png" alt="img"></p>
<p><strong>2.需要首先删除HDFS中与当前Linux用户hadoop对应的input和output目录，这样确保后面程序运行不会出现问题。</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image042.png" alt="img"></p>
<p><strong>3.再在HDFS中新建与当前Linux用户hadoop对应的input目录。</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image044.png" alt="img"></p>
<p><strong>4.创建childparent.txt输入上述内容</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image046.png" alt="img"></p>
<p><strong>5.将childparent.txt上传到HDFS中</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image048.png" alt="img"></p>
<p><strong>B.实验代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">* 输入多个文件，每个文件中的每行内容均为一个整数</span></span><br><span class="line"><span class="comment">* 输出到一个新的文件中，输出的数据格式为每行两个整数，第一个数字为第二个整数的排序位次，第二个整数为原待排列的整数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//map函数读取输入中的value，将其转化成IntWritable类型，最后作为输出key</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Map</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, IntWritable, IntWritable&gt;&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">IntWritable</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException,InterruptedException&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> value.toString();</span><br><span class="line">data.set(Integer.parseInt(text));</span><br><span class="line">context.write(data, <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reduce函数将map输入的key复制到输出的value上，然后根据输入的value-list中元素的个数决定key的输出次数,定义一个全局变量line_num来代表key的位次</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;IntWritable, IntWritable, IntWritable, IntWritable&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">IntWritable</span> <span class="variable">line_num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(IntWritable key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException,InterruptedException&#123;</span><br><span class="line"><span class="keyword">for</span>(IntWritable val : values)&#123;</span><br><span class="line">context.write(line_num, key);</span><br><span class="line">line_num = <span class="keyword">new</span> <span class="title class_">IntWritable</span>(line_num.get() + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义Partition函数，此函数根据输入数据的最大值和MapReduce框架中Partition的数量获取将输入数据按照大小分块的边界，然后根据输入数值和边界的关系返回对应的Partiton ID</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Partition</span> <span class="keyword">extends</span> <span class="title class_">Partitioner</span>&lt;IntWritable, IntWritable&gt;&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPartition</span><span class="params">(IntWritable key, IntWritable value, <span class="type">int</span> num_Partition)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">Maxnumber</span> <span class="operator">=</span> <span class="number">65223</span>;<span class="comment">//int型的最大数值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">bound</span> <span class="operator">=</span> Maxnumber/num_Partition+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">keynumber</span> <span class="operator">=</span> key.get();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;num_Partition; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(keynumber&lt;bound * (i+<span class="number">1</span>) &amp;&amp; keynumber&gt;=bound * i)&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">String[] otherArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;input&quot;</span>,<span class="string">&quot;output&quot;</span>&#125;; <span class="comment">/* 直接设置输入参数 */</span></span><br><span class="line"><span class="keyword">if</span> (otherArgs.length != <span class="number">2</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;Usage: wordcount &lt;in&gt;&lt;out&gt;&quot;</span>);</span><br><span class="line">System.exit(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf,<span class="string">&quot;Merge and sort&quot;</span>);</span><br><span class="line">job.setJarByClass(MergeSort.class);</span><br><span class="line">job.setMapperClass(Map.class);</span><br><span class="line">job.setReducerClass(Reduce.class);</span><br><span class="line">job.setPartitionerClass(Partition.class);</span><br><span class="line">job.setOutputKeyClass(IntWritable.class);</span><br><span class="line">job.setOutputValueClass(IntWritable.class);</span><br><span class="line">FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[<span class="number">1</span>]));</span><br><span class="line">System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>C.运行结果</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment5/clip_image058.png" alt="img"></p>
<h1 id="4-实验总结"><a href="#4-实验总结" class="headerlink" title="4.实验总结"></a>4.实验总结</h1><p><strong>（1）实验完成情况</strong></p>
<p>实验完成率：100%</p>
<p><strong>（2）出现的问题与解决方案</strong></p>
<p>问题1： 对MapReduce程序不熟悉</p>
<p>解决：参考<a href="http://dblab.xmu.edu.cn/blog/2481-2/">http://dblab.xmu.edu.cn/blog/2481-2/</a> 的MapReduce编程实践教程</p>
<p>问题2： 启动hadoop时报错：util.NativeCodeLoader: Unable to load native-hadoop library for your platform</p>
<p>解决： 这个消息是一个警告，出现在Hadoop应用程序或服务的日志中，表示当前平台无法加载本机Hadoop库。Hadoop是使用Java语言开发的,但是有一些需求和操作并不适合使用java所以会引入了本地库（Native Libraries）的概念，通过本地库，Hadoop可以更加高效地执行某一些操作.</p>
<p><strong>方法一：</strong></p>
<p>在Hadoop的配置文件core-site.xml中可以设置是否使用本地库：（Hadoop默认的配置为启用本地库）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line"></span><br><span class="line"> &lt;name&gt;hadoop.<span class="keyword">native</span>.lib&lt;/name&gt;</span><br><span class="line"></span><br><span class="line"> &lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</span><br><span class="line"></span><br><span class="line"> &lt;description&gt;Should <span class="keyword">native</span> hadoop libraries, <span class="keyword">if</span> present, be used.&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong></p>
<p>直接下载编译好的2.6.x-native-64位包，替换原来的native包</p>
<p>下载地址：<a href="http://download.csdn.net/detail/u013310025/9657359">http://download.csdn.net/detail/u013310025/9657359</a></p>
<p>下载完后传到namenode 和datanode服务器上</p>
<p>删除native 下的所有包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /[hadoopHome的目录]/lib/native/*</span><br></pre></td></tr></table></figure>

<p>解压文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf hadoop-native-64-2.6.0.tar /[hadoopHome的目录]/lib/native</span><br></pre></td></tr></table></figure>

<p>再试着执行查看文件命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdoop fs -ls /</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据技术原理与应用</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客添加Live2D小人</title>
    <url>/2023/04/18/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E5%B0%8F%E4%BA%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>通过<code>hexo-helper-live2d</code>插件给自己的博客添加一个小人。</p>
<p>小白入门：hexo 的官方是支持看板娘的，已经封装好了插件，但只是模型，不能说话、不能换装、功能较少。</p>
<p>大神水平：功能齐全。能说话、能换装、能玩游戏、能拍照、还能自定义。</p>
<span id="more"></span>

<h1 id="Hexo博客添加Live2D小人"><a href="#Hexo博客添加Live2D小人" class="headerlink" title="Hexo博客添加Live2D小人"></a>Hexo博客添加Live2D小人</h1><p>通过<code>hexo-helper-live2d</code>插件给自己的博客添加一个小人，最后的成果图如下</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image002.png"></p>
<h2 id="小白入门"><a href="#小白入门" class="headerlink" title="小白入门"></a>小白入门</h2><h3 id="首先安装插件"><a href="#首先安装插件" class="headerlink" title="首先安装插件"></a>首先安装插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<p>如果你的npm出现依赖问题 vulnerabilities 错误，那么可以通过降低npm版本，但是如果你不想降低又无法解决依赖问题，那么建议你关闭audit报错，当个鸵鸟，眼不见心不烦。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image004.png"></p>
<p>（本人就选择了鸵鸟对策，把头埋进沙地里面，什么也看不见😂）</p>
<p>选择你喜欢的模型。这里是<a href="https://github.com/xiazeyu/live2d-widget-models">模型仓库</a>，这里是各个<a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">模型的展示</a></p>
<p>我选择的是白猫模型，也就是<code>live2d-widget-model-tororo</code></p>
<h3 id="可供选择模型"><a href="#可供选择模型" class="headerlink" title="可供选择模型"></a>可供选择模型</h3><p>live2d-widget-model-chitose</p>
<p>live2d-widget-model-epsilon2_1</p>
<p>live2d-widget-model-gf</p>
<p>live2d-widget-model-haru&#x2F;01 (use npm install –save live2d-widget-model-haru)</p>
<p>live2d-widget-model-haru&#x2F;02 (use npm install –save live2d-widget-model-haru)</p>
<p>live2d-widget-model-haruto</p>
<p>live2d-widget-model-hibiki</p>
<p>live2d-widget-model-hijiki</p>
<p>live2d-widget-model-izumi</p>
<p>live2d-widget-model-koharu</p>
<p>live2d-widget-model-miku</p>
<p>live2d-widget-model-ni-j</p>
<p>live2d-widget-model-nico</p>
<p>live2d-widget-model-nietzsche</p>
<p>live2d-widget-model-nipsilon</p>
<p>live2d-widget-model-nito</p>
<p>live2d-widget-model-shizuku</p>
<p>live2d-widget-model-tororo</p>
<p>live2d-widget-model-tsumiki</p>
<p>live2d-widget-model-unitychan</p>
<p>live2d-widget-model-wanko</p>
<p>live2d-widget-model-z16</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-&lt;你喜欢的模型名字&gt;</span><br></pre></td></tr></table></figure>

<p>复制你喜欢的模型名字：</p>
<p>Epsilon2.1</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image005.gif"></p>
<p>Gantzert_Felixander</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image006.gif"></p>
<p>haru</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image007.gif"></p>
<p>miku</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image008.gif"></p>
<p>ni-j</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image009.gif"></p>
<p>nico</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image010.gif"></p>
<p>nietzche</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image011.gif"></p>
<p>nipsilon</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image012.gif"></p>
<p>nito</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image013.gif"></p>
<p>shizuku</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image014.gif"></p>
<p>tsumiki</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image015.gif"></p>
<p>wanko</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image016.gif"></p>
<p>z16</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image017.gif"></p>
<p>hibiki</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image018.gif"></p>
<p>koharu</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image019.gif"></p>
<p>haruto</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image020.gif"></p>
<p>Unitychan</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image021.gif"></p>
<p>tororo</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image022.gif"></p>
<p>hijiki</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image023.gif"></p>
<p>安装好模型后，在 hexo 的配置文件<code>_config.yml</code>中添加如下配置，详细配置可以参考<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">文档</a>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d</span>:</span><br><span class="line"> <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line"> <span class="attr">pluginRootPath</span>: live2dw/ # <span class="title class_">Root</span> path <span class="keyword">of</span> plugin to be on the site (<span class="title class_">Relative</span>)</span><br><span class="line"> <span class="attr">pluginJsPath</span>: lib/ # <span class="title class_">JavaScript</span> path related to plugin<span class="string">&#x27;s root (Relative)</span></span><br><span class="line"><span class="string"> pluginModelPath: assets/ # Relative model path related to plugin&#x27;</span>s root (<span class="title class_">Relative</span>)</span><br><span class="line"> <span class="attr">scriptFrom</span>: local # <span class="title class_">Default</span></span><br><span class="line"> <span class="attr">tagMode</span>: <span class="literal">false</span> # <span class="title class_">Whether</span> only to replace live2d tag instead <span class="keyword">of</span> inject to all pages</span><br><span class="line"> <span class="attr">log</span>: <span class="literal">false</span> # <span class="title class_">Whether</span> to show logs <span class="keyword">in</span> <span class="variable language_">console</span></span><br><span class="line"> <span class="attr">model</span>:</span><br><span class="line">  <span class="attr">use</span>: live2d-widget-model-tororo # npm-<span class="variable language_">module</span> package name</span><br><span class="line">  <span class="attr">scale</span>: <span class="number">1</span></span><br><span class="line">  <span class="attr">hHeadPos</span>: <span class="number">0.5</span></span><br><span class="line">  <span class="attr">vHeadPos</span>: <span class="number">0.618</span></span><br><span class="line"> <span class="attr">display</span>:</span><br><span class="line">  <span class="attr">superSample</span>: <span class="number">2</span></span><br><span class="line">  <span class="attr">width</span>: <span class="number">150</span></span><br><span class="line">  <span class="attr">height</span>: <span class="number">300</span></span><br><span class="line">  <span class="attr">position</span>: left</span><br><span class="line">  <span class="attr">hOffset</span>: <span class="number">150</span></span><br><span class="line">  <span class="attr">vOffset</span>: -<span class="number">10</span></span><br><span class="line"> <span class="attr">mobile</span>:</span><br><span class="line">  <span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">scale</span>: <span class="number">0.05</span></span><br><span class="line"> <span class="attr">react</span>:</span><br><span class="line">  <span class="attr">opacityDefault</span>: <span class="number">0.7</span></span><br><span class="line">  <span class="attr">opacityOnHover</span>: <span class="number">0.2</span></span><br></pre></td></tr></table></figure>

<p>配置完成后<code>hexo clean &amp; hexo g &amp;hexo s -p 5555</code>然后<code>hexo d</code>就可以在网站上看到你的看板娘了</p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="position-left-不生效"><a href="#position-left-不生效" class="headerlink" title="position: left 不生效"></a>position: left 不生效</h4><p><a href="https://github.com/EYHN/hexo-helper-live2d/issues/100">https://github.com/EYHN/hexo-helper-live2d/issues/100</a></p>
<h2 id="大神水平"><a href="#大神水平" class="headerlink" title="大神水平"></a>大神水平</h2><p>大神作品，功能齐全。能说话、能换装、能玩游戏、能拍照、还能自定义。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>下载 <a href="https://github.com/stevenjoezhang/live2d-widget">张书樵大神的项目</a>，解压到本地博客目录的 <code>themes/next/source</code> 下，修改文件夹名为 <code>live2d-widget</code>，修改项目中的 <code>autoload.js</code> 文件，如下：将</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>  live2d_path = <span class="string">&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;</span></span><br></pre></td></tr></table></figure>

<p>注释掉，将下面的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;/live2d-widget/&quot;</span></span><br></pre></td></tr></table></figure>

<p>解除注释</p>
<p> 在<code>/themes/next/layout/_layout.swig</code>中,新增如下内容  </p>
<p>在文件位置：~&#x2F;theme&#x2F;next&#x2F;layout&#x2F;_layout.swig 的<code>&lt;/body&gt;</code>标签之前</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>  在<code>/themes/next/layout/_layout.swig</code>中,在 <code>&lt;head&gt;</code> 之后中加入 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 主题配置文件 中,新增如下内容：</p>
<p><code>live2d: enable: true;</code></p>
<h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 <code>waifu-tips.js</code> 、 <code>waifu-tips.json</code> 和 <code>waifu.css</code></p>
<p>效果如下</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Live2DBlog/clip_image024.png"></p>
<h2 id="资料汇总"><a href="#资料汇总" class="headerlink" title="资料汇总"></a>资料汇总</h2><ul>
<li>GitHub：<a href="https://github.com/EYHN/hexo-helper-live2d">https://github.com/EYHN/hexo-helper-live2d</a></li>
<li>配置说明：<a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html">https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html</a></li>
<li>模型仓库：<a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[<a href="http://blog.itchenliang.club/posts/22350780-f32d-11ea-bb4a-d3e1cbe3d592/#%E9%85%8D%E7%BD%AE">1] Hexo博客添加看板娘</a></p>
<p>[<a href="https://qmike.top/posts/6cf9df4b">2] 看板娘位置调整</a></p>
<p>[<a href="https://qiaogaojian.github.io/71f6d9657f3765736920778e47beb31bca7b24ee/?highlight=2d">3] live2D与不蒜子冲突解决</a></p>
<p>[<a href="https://lantary.cn/Blog_optimization/add_netcat.html">4] 为博客添加看板娘</a></p>
<p>[<a href="https://blog.csdn.net/as480133937/article/details/100138838">5] Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></p>
<p>[<a href="https://blog.csdn.net/qq_39610915/article/details/90679768">6] Hexo博客优化：在Next主题中设置进阶版Live2D看板娘————拒绝踩坑！！！！</a></p>
<p>[<a href="https://blog.pangao.vip/Hexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E6%96%B0%E5%A2%9E%E7%9C%8B%E6%9D%BF%E5%A8%98(%E8%83%BD%E8%AF%B4%E8%AF%9D%E3%80%81%E8%83%BD%E6%8D%A2%E8%A3%85)/">7] Hexo博客NexT主题美化之新增看板娘(能说话、能换装)_</a></p>
<h1 id="折腾后的碎碎念"><a href="#折腾后的碎碎念" class="headerlink" title="折腾后的碎碎念"></a>折腾后的碎碎念</h1><p> 01 这个大神魔改的插件有一些很奇怪的话，有些太花里胡哨，喧宾夺主了。所以我修改了小人说的话。修改成了名言警句。</p>
<p>02 使用科学上网的方法能够更快的加载出来左下角的小人</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo个人博客添加APlayer音乐播放器功能</title>
    <url>/2023/04/12/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0APlayer%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image002.jpg"></strong></p>
<p><strong>还来不及，仔仔细细写下你的关于，描述我如何爱你，你却微笑的离我而去。</strong></p>
<p>​                                                                                                                             <strong>———-《我不配》</strong></p>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>因为我并不了解前端HTML5或者是JavaScript等等，Hexo个人博客添加APlayer音乐播放器这个功能我前前后后Google了很多博客，完成了大部分博客介绍的内容。完整的GitHub上面开源的部分的演示内容是能够<strong>显示封面，显示歌手名，显示歌词，曲目列表，进度于音量调节，启、停播放控制。</strong>我一会就成功添加了除显示歌词以外的其余全部功能，后续大概花了6个小时在研究如何<strong>显示歌词</strong>上面，最后还是没有成功。</p>
<p>期间也尝试过联系GitHub开源APlayer项目的作者，qq和telegram都尝试了，都没有收到回信。（可能是APlayer是2018年开源的项目，现在不再维护，qq群也设置成禁止任何人加入。）啊啊啊我为什么要这么执着了，现在看来感觉真浪费时间🤡。</p>
<p>我在此分享我的全程思路和尝试，希望我的前车之鉴，我踩过的坑，后人不要再经历我的痛苦呜呜呜呜呜😭😭😭😭😭</p>
<p>如果有人知道了如何显示歌词，可以在评论区留言。</p>
<span id="more"></span>

<h1 id="Hexo个人博客添加APlayer音乐播放器功能"><a href="#Hexo个人博客添加APlayer音乐播放器功能" class="headerlink" title="Hexo个人博客添加APlayer音乐播放器功能"></a>Hexo个人博客添加APlayer音乐播放器功能</h1><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a><strong>效果图</strong></h2><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image004.png" alt="img"></p>
<h2 id="引入APlayer音乐播放器"><a href="#引入APlayer音乐播放器" class="headerlink" title="引入APlayer音乐播放器"></a><strong>引入APlayer音乐播放器</strong></h2><h3 id="下载APlayer源码"><a href="#下载APlayer源码" class="headerlink" title="下载APlayer源码"></a>下载APlayer源码</h3><p><a href="https://github.com/MoePlayer/APlayer">APlayer源码下载地址：</a><a href="https://github.com/MoePlayer/APlayer">https://github.com/MoePlayer/APlayer</a></p>
<h3 id="将源码放到next主题的source文件夹中"><a href="#将源码放到next主题的source文件夹中" class="headerlink" title="将源码放到next主题的source文件夹中"></a><strong>将源码放到next主题的source文件夹中</strong></h3><p>下载到APlayer源码压缩包，解压后把dist文件夹复制到\themes\next\source目录中。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image006.jpg" alt="img"></p>
<h3 id="放入自己喜欢的音乐"><a href="#放入自己喜欢的音乐" class="headerlink" title="放入自己喜欢的音乐"></a>放入自己喜欢的音乐</h3><p>在dist目录里，新建music.js文件，并把如下代码粘贴进去。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image008.png" alt="img"></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> <span class="title class_">APlayer</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;aplayer&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="attr">fixed</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">autoplay</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">lrcType</span>: <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">loop</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">order</span>: <span class="string">&#x27;random&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">preload</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">volume</span>: <span class="number">0.7</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">mutex</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">listFolded</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">listMaxHeight</span>: <span class="number">120</span>,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="attr">audio</span>: [</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="attr">name</span>: <span class="string">&quot;Round &amp; Laundry&quot;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">artist</span>: <span class="string">&#x27;Nai Br.XX、Celeina Ann&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">url</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/MusicURL0412/Nai%20Br.XX%E3%80%81Celeina%20Ann%20-%20Round%20%26%20Laundry.flac&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">cover</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/Cover0412/The_Loneliest_Girl.png&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">lrc</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/LRC0412/Shake%20It%20Off-Taylor%20Swift_revise.lrc&#x27;</span>,</span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">​     &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="attr">name</span>: <span class="string">&#x27;Shake It Off (Live)&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">artist</span>: <span class="string">&#x27;Taylor Swift&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">url</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/MusicURL0412/Taylor%20Swift%20-%20Shake%20It%20Off.flac&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">cover</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/Cover0412/Shake%20it%20off.jpg&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">lrc</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/LRC0412/Shake%20It%20Off-Taylor%20Swift_revise.lrc&#x27;</span>,</span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="attr">name</span>: <span class="string">&#x27;Welcome To New York (The 1989 World Tour Live)&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">artist</span>: <span class="string">&#x27;Taylor Swift&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">url</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/MusicURL0412/Taylor%20Swift%20-%20Welcome%20To%20New%20York%20%28The%201989%20World%20Tour%20Live%29.mp3&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">cover</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/Cover0412/Welcome%20To%20New%20York.jpg&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">lrc</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/LRC0412/Shake%20It%20Off-Taylor%20Swift_revise.lrc&#x27;</span>,</span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">​     &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="attr">name</span>: <span class="string">&#x27;Kiss Me&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">artist</span>: <span class="string">&#x27;Nai Br.XX、Celeina Ann&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">url</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/MusicURL0412/Nai%20Br.XX%E3%80%81Celeina%20Ann%20-%20Kiss%20Me.flac&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">cover</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/Cover0412/The_Loneliest_Girl.png&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">lrc</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/LRC0412/Shake%20It%20Off-Taylor%20Swift_revise.lrc&#x27;</span>,</span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="attr">name</span>: <span class="string">&#x27;Bloom of Youth (风华正茂)&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">artist</span>: <span class="string">&#x27;清水準一&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">url</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/MusicURL0412/%E6%B8%85%E6%B0%B4%E6%BA%96%E4%B8%80%20-%20Bloom%20of%20Youth%20%28%E9%A3%8E%E5%8D%8E%E6%AD%A3%E8%8C%82%29.flac&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">cover</span>: <span class="string">&#x27;http://p1.music.126.net/c5NVKUIAUcyN4BQUDbGnEg==/109951163221157827.jpg?param=130y130&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​    <span class="attr">lrc</span>: <span class="string">&#x27;https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Music/LRC0412/Shake%20It%20Off-Taylor%20Swift_revise.lrc&#x27;</span>,</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>Aplayer主要参数说明：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>默认值</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>container</td>
<td>document.querySelector(‘.aplayer’)</td>
<td>播放器容器元素</td>
</tr>
<tr>
<td>fixed</td>
<td>false</td>
<td>开启吸底模式, <a href="https://aplayer.js.org/#/home?id=fixed-mode">详情</a></td>
</tr>
<tr>
<td>mini</td>
<td>false</td>
<td>开启迷你模式, <a href="https://aplayer.js.org/#/home?id=mini-mode">详情</a></td>
</tr>
<tr>
<td>autoplay</td>
<td>false</td>
<td>音频自动播放</td>
</tr>
<tr>
<td>theme</td>
<td>‘#b7daff’</td>
<td>主题色</td>
</tr>
<tr>
<td>loop</td>
<td>‘all’</td>
<td>音频循环播放, 可选值: ‘all’,  ‘one’, ‘none’</td>
</tr>
<tr>
<td>order</td>
<td>‘list’</td>
<td>音频循环顺序, 可选值: ‘list’,  ‘random’</td>
</tr>
<tr>
<td>preload</td>
<td>‘auto’</td>
<td>预加载，可选值: ‘none’, ‘metadata’, ‘auto’</td>
</tr>
<tr>
<td>volume</td>
<td>0.7</td>
<td>默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</td>
</tr>
<tr>
<td>audio</td>
<td>-</td>
<td>音频信息, 应该是一个对象或对象数组</td>
</tr>
<tr>
<td>audio.name</td>
<td>-</td>
<td>音频名称</td>
</tr>
<tr>
<td>audio.artist</td>
<td>-</td>
<td>音频艺术家</td>
</tr>
<tr>
<td>audio.url</td>
<td>-</td>
<td>音频链接</td>
</tr>
<tr>
<td>audio.cover</td>
<td>-</td>
<td>音频封面</td>
</tr>
<tr>
<td>audio.lrc</td>
<td>-</td>
<td><a href="https://aplayer.js.org/#/home?id=lrc">详情</a></td>
</tr>
<tr>
<td>audio.theme</td>
<td>-</td>
<td>切换到此音频时的主题色，比上面的 theme 优先级高</td>
</tr>
<tr>
<td>audio.type</td>
<td>‘auto’</td>
<td>可选值: ‘auto’, ‘hls’, ‘normal’ 或其他自定义类型, <a href="https://aplayer.js.org/#/home?id=mse-support">详情</a></td>
</tr>
<tr>
<td>customAudioType</td>
<td>-</td>
<td>自定义类型，<a href="https://aplayer.js.org/#/home?id=mse-support">详情</a></td>
</tr>
<tr>
<td>mutex</td>
<td>true</td>
<td>互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</td>
</tr>
<tr>
<td>lrcType</td>
<td>0</td>
<td><a href="https://aplayer.js.org/#/home?id=lrc">详情</a></td>
</tr>
<tr>
<td>listFolded</td>
<td>false</td>
<td>列表默认折叠</td>
</tr>
<tr>
<td>listMaxHeight</td>
<td>-</td>
<td>列表最大高度</td>
</tr>
<tr>
<td>storageName</td>
<td>‘aplayer-setting’</td>
<td>存储播放器设置的 localStorage key</td>
</tr>
</tbody></table>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><h5 id="页面效果可看开源作者的GitHub上APlayer播放器的展示网页"><a href="#页面效果可看开源作者的GitHub上APlayer播放器的展示网页" class="headerlink" title="页面效果可看开源作者的GitHub上APlayer播放器的展示网页"></a>页面效果可看开源作者的GitHub上APlayer播放器的展示网页</h5><p><a href="https://aplayer.js.org/#/">https://aplayer.js.org/#/</a></p>
<h5 id="详细使用方法参见开源作者的GitHub上APlayer播放器的使用说明文档"><a href="#详细使用方法参见开源作者的GitHub上APlayer播放器的使用说明文档" class="headerlink" title="详细使用方法参见开源作者的GitHub上APlayer播放器的使用说明文档"></a>详细使用方法参见开源作者的GitHub上APlayer播放器的使用说明文档</h5><p><a href="https://aplayer.js.org/#/zh-Hans/">https://aplayer.js.org/#/zh-Hans/</a></p>
<h5 id="开源作者的GitHub上APlayer播放器项目链接"><a href="#开源作者的GitHub上APlayer播放器项目链接" class="headerlink" title="开源作者的GitHub上APlayer播放器项目链接"></a>开源作者的GitHub上APlayer播放器项目链接</h5><p><a href="https://github.com/DIYgod/APlayer">https://github.com/DIYgod/APlayer</a></p>
<h5 id="想详细了解原理的可以看这个视频"><a href="#想详细了解原理的可以看这个视频" class="headerlink" title="想详细了解原理的可以看这个视频"></a>想详细了解原理的可以看这个视频</h5><p>【预科-APlayer网页音乐播放器+HTML块级元素讲解】 <a href="https://www.bilibili.com/video/BV1PZ4y1P7J5/?share_source=copy_web&vd_source=12b49fdcdd0ffebaac761ae3ad9f8764">https://www.bilibili.com/video/BV1PZ4y1P7J5/?share_source=copy_web&amp;vd_source=12b49fdcdd0ffebaac761ae3ad9f8764</a></p>
<h4 id="如何获得歌曲URL"><a href="#如何获得歌曲URL" class="headerlink" title="如何获得歌曲URL"></a>如何获得歌曲URL</h4><h5 id="方法一：Hexo-Next添加网易云音乐"><a href="#方法一：Hexo-Next添加网易云音乐" class="headerlink" title="方法一：Hexo+Next添加网易云音乐"></a>方法一：<strong>Hexo+Next添加网易云音乐</strong></h5><p>详情可以借鉴大佬的这篇博客</p>
<p><a href="https://blog.csdn.net/Mculover666/article/details/90700059">https://blog.csdn.net/Mculover666/article/details/90700059</a></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image010.png" alt="img"></p>
<p>歌曲的链接可以从这里免费生成。</p>
<p>[<a href="http://www.xmsj.org/?name=Shake%20it%20off&type=netease%5D">http://www.xmsj.org/?name=Shake%20it%20off&amp;type=netease]</a>(<a href="http://www.xmsj.org/?name=Shake">http://www.xmsj.org/?name=Shake</a> it off&amp;type&#x3D;netease)</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image012.png" alt="img"></p>
<p>本人感觉网易云的歌质量层次不齐，扒下来的链接url常常失效不稳定，导致歌曲无法播放。</p>
<p>网页会出现下面的报错</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image014.jpg" alt="img"></p>
<p>因此我采用的是第二种方法。</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h5><p>一开始是想仅仅拿阿里云OSS作为图床的，详情配置见这个大佬的视频。</p>
<p>【Typora+PicGo+阿里云OSS实现云笔记|Typora上传图片】 <a href="https://www.bilibili.com/video/BV1ci4y1L7j8/?share_source=copy_web&vd_source=12b49fdcdd0ffebaac761ae3ad9f8764">https://www.bilibili.com/video/BV1ci4y1L7j8/?share_source=copy_web&amp;vd_source=12b49fdcdd0ffebaac761ae3ad9f8764</a></p>
<p>图文教程见</p>
<p><strong>Typora+PicGo+阿里云OSS搭建博客图床（超详细）</strong></p>
<p><a href="http://t.csdn.cn/frnT8">http://t.csdn.cn/frnT8</a></p>
<p><strong>手把手教你Typora图床配置(PicGo+阿里云OSS&#x2F;腾讯云COS)</strong></p>
<p><a href="http://t.csdn.cn/BuBaQ">http://t.csdn.cn/BuBaQ</a></p>
<p>后来为了解决歌曲的URL总是失效的问题，我就从趁着最后一天的酷狗音乐会员，下载了自己喜欢的歌曲到本地。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image016.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image018.png" alt="img"></p>
<p>（用酷狗下载歌曲要注意下载的音质。如果是无损音质，得到的是后缀是KMGA的文件，无法在酷狗音乐里面播放，上传到阿里OSS后生成的URL链接无效。在网页里面会出现下面的报错。</p>
<h5 id="6月一号补充："><a href="#6月一号补充：" class="headerlink" title="6月一号补充："></a>6月一号补充：</h5><p>下载得到kmg后缀的歌曲，上传到阿里OSS后生成的URL链接无效（就算你改后缀为MP3</p>
<p>也没有用，一样无效</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image019.jpg" alt="img"></p>
<p>亲测KMGA后缀的不行，就算将kmga后缀文件改后缀为flac也不行。经测试flac和mp3后缀的文件都可以</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image021.jpg" alt="img"></p>
<p> ）</p>
<p>然后再将本地的歌曲上传到阿里云OSS。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image023.png" alt="img"></p>
<p>直接拖拽即可</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image025.jpg" alt="img"></p>
<p>上传成功后在对应目录下查看</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image027.png" alt="img"></p>
<p>最后复制歌曲的URL到对应的参数url: ‘’就行了。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image029.jpg" alt="img"></p>
<p>这里涉及到一个小问题，为什么不用QQ音乐。（<del>酷狗音乐打钱</del>）</p>
<p>简而言之就是为了方便后面获取歌曲的歌词文件LRC。</p>
<h4 id="LRC，KRC，QRC文件的介绍"><a href="#LRC，KRC，QRC文件的介绍" class="headerlink" title="LRC，KRC，QRC文件的介绍"></a>LRC，KRC，QRC文件的介绍</h4><h5 id="LRC-LRC是目前运用最广的歌词文件"><a href="#LRC-LRC是目前运用最广的歌词文件" class="headerlink" title="LRC(LRC是目前运用最广的歌词文件)"></a>LRC(LRC是目前运用最广的歌词文件)</h5><p>千千静听、酷我音乐都是用LRC做歌词解析的。歌词格式:</p>
<p>[00:02.37]三十而立</p>
<p>[00:03.12]</p>
<p>[00:03.80]作词：唐孝凡</p>
<p>[00:04.55]作曲：唐孝凡</p>
<p>[00:05.18]演唱：唐孝凡</p>
<p>[00:06.43]出品：深圳小龙文化</p>
<p>这种格式文件小，容易解析。但是，歌词的精度只能控制到一行</p>
<h5 id="KRC-酷狗播放器专用的歌词文件"><a href="#KRC-酷狗播放器专用的歌词文件" class="headerlink" title="KRC(酷狗播放器专用的歌词文件)"></a>KRC(酷狗播放器专用的歌词文件)</h5><p>KRC 是酷狗公司推出的专利歌词格式，主要是支持了逐字精准，解决了所谓“歌词显示不准确”的问题。让我们先浏览一下一个 .KRC 文件用记事本打开的前面一部分——</p>
<p>krc18F4飼!怢鹬???H椡盻Y継?螂MKB山?鱵z<br> 7”_q鍽? 舝?煴渡貛韮枔to?龅?ㄩ乃8圛邬GG睙?垽eZ鸄1,倢诞?? -4孧Jx)?’*画姯汓袗塧9部潧恾蠒翰)彃湢炰X睱比柡犌栅],朢g  |?塜蚳 衖〇猤潚壚鲨蔒?Q}害</p>
<hr>
<p>牨軖K悪w徊w&gt;7? 藲?媺?攢A瓾湟泀闆坊囝”Io?€&#x3D;?畨枞<br> 6乺滼脥％踯每宪?T憐 柩鳴-狞?x0O%€摨掋R?2胣＠?楸斕茺?7榥黖‑v洰窩?爻顄腛u陭’樺?_迿昔幾  6櫹w搷$幑^n@纄? 啅鸪 嶬?涣 樋  话怾 ?l!?a秎婓sD?虥??澶?貮怿涧Jc? 鹣,贘F埡KQA雕淌邼魹?~k?娕芅T?︰闂眂匁1?擒{x駩癵{A莍燧</p>
<p>呃，等等。不是你电脑的问题——上面确实是一堆乱码！唉，酷狗歌词真不开放。除了在前面有“krc”供识别格式外，别的东西我们根本看不懂好吧！还好，根据《<a href="http://www.jb51.net/article/51305.htm">将酷狗krc歌词解析并转换为lrc歌词php源码</a>》这篇高人写的文章，我们可以将后面的乱码解密解压后，得到正常的文本</p>
<h5 id="QRC-QQ音乐播放器的歌词文件"><a href="#QRC-QQ音乐播放器的歌词文件" class="headerlink" title="QRC(QQ音乐播放器的歌词文件)"></a>QRC(QQ音乐播放器的歌词文件)</h5><p>先前 QRC 格式是一种比较友好和开放的格式，但是现在……请看——</p>
<p>[offset:0]捬-偔!跖?J脚?唊?輣.[1]3蟐陕:v黣?nRvX+霟&gt;?O??冰垙1U筘摉F屘?y芊凋FU蠱k?诘鄑?賓{麵J搈rZ滿?s抆M?Z讼烚?鋷粒Q@?e艩(?k硟廪Je撤?徇­V&#x3D;D葘”?嬝S</p>
<hr>
<p>?稌oX?潥YpA翯?舼tfy?v黝?d.?叶滹な&amp;&#96;??蜫籛^媣(躯[1]闟愌?_?鵼;W[.癔锝眦6栭獔??瑆Sip+_wz€寕椨?騝痢碉鋭~?(蟒K?[1]???</p>
<p>嗯，它现在变成了一种，可以说比 KRC 还封闭的格式。现在我们既不能查看到其源码，也无法制作这种格式的歌词。<a href="http://kf.qq.com/faq/120227I3aeqm140806UNV77f.html">腾讯客服网页</a>火上浇油道，下载到的“QRC 类型”“不支持转换成 LRC 等其他类型”。我们现在只能粗略观察到 QRC 格式的一些特点，如支持逐字精准。</p>
<h4 id="更多有关LRC，KRC，QRC知识"><a href="#更多有关LRC，KRC，QRC知识" class="headerlink" title="更多有关LRC，KRC，QRC知识"></a>更多有关LRC，KRC，QRC知识</h4><p>详情参加大佬的博客</p>
<h5 id="初步分析-LRC、TRC、KRC、QRC、KSC-和-KAJ-歌词格式"><a href="#初步分析-LRC、TRC、KRC、QRC、KSC-和-KAJ-歌词格式" class="headerlink" title="初步分析 LRC、TRC、KRC、QRC、KSC 和 KAJ 歌词格式"></a>初步分析 LRC、TRC、KRC、QRC、KSC 和 KAJ 歌词格式</h5><p><a href="https://shansing.com/read/392/">https://shansing.com/read/392/</a></p>
<h5 id="浅谈歌词文件（LRC、QRC、KRC）"><a href="#浅谈歌词文件（LRC、QRC、KRC）" class="headerlink" title="浅谈歌词文件（LRC、QRC、KRC）"></a><strong>浅谈歌词文件（LRC、QRC、KRC）</strong></h5><p><a href="http://t.csdn.cn/wpkUW">http://t.csdn.cn/wpkUW</a></p>
<h5 id="krc转lrc两种方法"><a href="#krc转lrc两种方法" class="headerlink" title="krc转lrc两种方法"></a>krc转lrc两种方法</h5><p><a href="https://www.pc6.com/infoview/Article_62824.html">https://www.pc6.com/infoview/Article_62824.html</a></p>
<h5 id="将KRC文件转换成LRC文件参考下面的视频教程。"><a href="#将KRC文件转换成LRC文件参考下面的视频教程。" class="headerlink" title="将KRC文件转换成LRC文件参考下面的视频教程。"></a>将KRC文件转换成LRC文件参考下面的视频教程。</h5><p>【获取酷狗歌曲的歌词，krc文件转换lrc文件】 <a href="https://www.bilibili.com/video/BV1qD4y1Y711/?share_source=copy_web&vd_source=12b49fdcdd0ffebaac761ae3ad9f8764">https://www.bilibili.com/video/BV1qD4y1Y711/?share_source=copy_web&amp;vd_source=12b49fdcdd0ffebaac761ae3ad9f8764</a></p>
<h5 id="我的krc转lrc图文演示"><a href="#我的krc转lrc图文演示" class="headerlink" title="我的krc转lrc图文演示"></a>我的krc转lrc图文演示</h5><p>我这里已经下载好了相应的exe执行文件，没下载的可以上面视频链接里面的评论区获取百度网盘分享链接。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image031.png" alt="img"></p>
<p>找到从酷狗音乐里面下载得到的歌曲的KRC歌词文件</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image033.jpg" alt="img"></p>
<p>直接用记事本打开KRC文件发现是乱码</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image035.png" alt="img"></p>
<p>添加文件，选择你要转换的KRC文件，点击全部转换。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image037.jpg" alt="img"></p>
<p>可以在原来KRC文件的目录下面查看，发现生成了一个新的同名的LRC文件。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image039.jpg" alt="img"></p>
<p>直接用记事本打开LRC文件，现在显示正常。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image041.png" alt="img"></p>
<h4 id="如何获得封面URL"><a href="#如何获得封面URL" class="headerlink" title="如何获得封面URL"></a>如何获得封面URL</h4><h5 id="简要概括"><a href="#简要概括" class="headerlink" title="简要概括"></a>简要概括</h5><p>不用将图片拖拽到Typora的markdown格式的文本里面，我们直接把图片上传到阿里OSS。操作同上面的上传音频文件到阿里OSS的操作，仅仅将音频文件换成了图片文件。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image043.png" alt="img"></p>
<p>最后复制图片文件的url到对应参数就行了。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image045.jpg" alt="img"></p>
<h5 id="倾囊相授"><a href="#倾囊相授" class="headerlink" title="倾囊相授"></a>倾囊相授</h5><hr>
<p>很多歌曲不好找封面，因为网上的大多数是专辑的封面，单曲的很少。我采用的方法是在bilibili里搜索你喜欢的歌曲</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image047.jpg" alt="img"></p>
<p>可以看到很多视频结果，挑选一个你喜欢的视频封面，点进去对应的视频。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image049.jpg" alt="img"></p>
<p>在视频的下方分享按钮，选择获取视频分享链接</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image051.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image052.png" alt="img"></p>
<p>进入哔哩哔哩视频解析下载</p>
<p><a href="https://bilibili.iiilab.com/">https://bilibili.iiilab.com/</a></p>
<p>复制刚刚获取的视频分享链接到搜索框中，点击 解析视频 按钮</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image054.jpg" alt="img"></p>
<p>可以看到红框框里面出现两个对应的选项。</p>
<p>前者顾名思义，可以下载视频到本地。</p>
<p>后者望文生义，可以下载视频的封面。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image056.png" alt="img"></p>
<p>点击另存图片为，我们就成功下载了自己喜欢歌曲的封面到本地电脑。</p>
<p>—————————————————————–分割线—————————————————————</p>
<p>六月七日补充</p>
<p>下载哔哩哔哩是视频，，还可以通过唧唧DOWN下载。（这个支持分P的视频一次性下载，功能更加全面人性化，同时还是完全免费的</p>
<p>进入他的官网下载即可</p>
<p><a href="http://client.jijidown.com/">http://client.jijidown.com/</a></p>
<h4 id="添加歌词的尝试"><a href="#添加歌词的尝试" class="headerlink" title="添加歌词的尝试"></a>添加歌词的尝试</h4><p>这一步我是花费了最多时间的。</p>
<p>在开源作者的GitHub上APlayer播放器的展示网页里面是可以显示歌词的。</p>
<p><a href="https://aplayer.js.org/#/">https://aplayer.js.org/#/</a></p>
<p>但在我的电脑上无论怎么弄，都无法显示歌词。以下是我的尝试经历</p>
<h5 id="采用LRC文件方式"><a href="#采用LRC文件方式" class="headerlink" title="采用LRC文件方式"></a>采用LRC文件方式</h5><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image058.jpg" alt="img"></p>
<p>将文件上传到阿里云OSS</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image060.jpg" alt="img"></p>
<p>复制URL链接到对应参数</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image062.jpg" alt="img"></p>
<p>结果网页里面报错</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image064.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image066.jpg" alt="img"></p>
<p>虽然无法显示歌词，但正常的播放功能是可以的。事实上，除了无法显示歌词之外，其余的一切正常。</p>
<p>为此我还怀疑LRC里面时间的精度</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image068.jpg" alt="img"></p>
<p>因为某些博客里面的文件是XXX.txt,而尝试过txt后缀文件</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image070.jpg" alt="img"></p>
<p>也怀疑过顶端的书写格式</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image072.jpg" alt="img"></p>
<p>后来被我一一排除，都不是，我的博客就是单纯的检测不到LRC文件而已。</p>
<h5 id="采用JS-字符串方式"><a href="#采用JS-字符串方式" class="headerlink" title="采用JS 字符串方式"></a>采用<strong>JS 字符串方式</strong></h5><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image074.jpg" alt="img"></p>
<p><strong>这里要注意，一行一行之间要用\n隔开</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image076.jpg" alt="img"></p>
<p>如原来是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[00:00.00] 作词 : Taylor Swift/Max Martin/Karl Johan Schuster</span><br><span class="line"></span><br><span class="line">[00:01.00] 作曲 : Taylor Swift/Max Martin/Karl Johan Schuster</span><br><span class="line"></span><br><span class="line">[00:04.97]I stay out too late, got nothing in my brain</span><br><span class="line"></span><br><span class="line">[00:10.62]That’s what people say, that’s what people say</span><br><span class="line"></span><br><span class="line">[00:16.32]I go on too many dates, but I can’t make them stay</span><br><span class="line"></span><br><span class="line">[00:22.33]At least that’s what people say, that’s what people say</span><br><span class="line"></span><br><span class="line">[00:28.52]But I keep cruising, can’t stop, won’t stop moving</span><br><span class="line"></span><br><span class="line">[00:33.73]It&#x27;s like I got this music in my mind saying it&#x27;s gonna be alright</span><br><span class="line"></span><br><span class="line">[00:41.08]Cause the players gonna play, play, play, play, play</span><br><span class="line"></span><br><span class="line">[00:44.33]And the haters gonna hate, hate, hate, hate, hate</span><br><span class="line"></span><br><span class="line">[00:47.00]Baby, I’m just gonna shake, shake, shake, shake, shake</span><br><span class="line"></span><br><span class="line">[00:50.18]I shake it off, I shake it off</span><br><span class="line"></span><br><span class="line">[00:52.51]Heartbreakers gonna break, break, break, break, break</span><br><span class="line"></span><br><span class="line">[00:56.01]And the fakers gonna fake, fake, fake, fake, fake</span><br><span class="line"></span><br><span class="line">[00:59.21]Baby, I’m just gonna shake, shake, shake, shake, shake</span><br><span class="line"></span><br><span class="line">[01:02.15]I shake it off, I shake it off</span><br><span class="line"></span><br><span class="line">[01:04.55]I’ll never miss a beat, I’m lightning on my feet</span><br><span class="line"></span><br><span class="line">[01:10.31]And that’s what they didn’t see, that’s what they didn’t see</span><br><span class="line"></span><br><span class="line">[01:16.59]I’m dancing on my own, I’ll make the moves up as I go</span><br><span class="line"></span><br><span class="line">[01:22.27]And that’s what they didn’t know, that’s what they didn’t know</span><br><span class="line"></span><br><span class="line">[01:28.14]But I keep cruising, can’t stop, won’t stop grooving</span><br><span class="line"></span><br><span class="line">[01:33.53]It&#x27;s like I got this music in my mind saying it&#x27;s gonna be alright</span><br><span class="line"></span><br><span class="line">[01:40.78]Cause the players gonna play, play, play, play, play</span><br><span class="line"></span><br><span class="line">[01:43.97]And the haters gonna hate, hate, hate, hate, hate</span><br><span class="line"></span><br><span class="line">[01:46.76]Baby, I’m just gonna shake, shake, shake, shake, shake</span><br><span class="line"></span><br><span class="line">[01:49.91]I shake it off, I shake it off</span><br><span class="line"></span><br><span class="line">[01:52.72]Heartbreakers gonna break, break, break, break, break</span><br><span class="line"></span><br><span class="line">[01:55.69]And the fakers gonna fake, fake, fake, fake, fake</span><br><span class="line"></span><br><span class="line">[01:58.78]Baby, I’m just gonna shake, shake, shake, shake, shake</span><br><span class="line"></span><br><span class="line">[02:01.89]I shake it off, I shake it off</span><br><span class="line"></span><br><span class="line">[02:05.15]I, I shake it off, I shake it off</span><br><span class="line"></span><br><span class="line">[02:10.11]I, I shake it off, I shake it off</span><br><span class="line"></span><br><span class="line">[02:17.82]Hey, hey, hey,</span><br><span class="line"></span><br><span class="line">[02:19.38]just think while you’ve been getting down</span><br><span class="line"></span><br><span class="line">[02:21.03]and out about the liars and dirty,</span><br><span class="line"></span><br><span class="line">[02:22.90]dirty cheats in the world you could have been getting down to this sick beat</span><br><span class="line"></span><br><span class="line">[02:28.74]My ex-man brought his new girlfriend</span><br><span class="line"></span><br><span class="line">[02:31.46]She’s like “oh my God”, but I’m just gonna shake it</span><br><span class="line"></span><br><span class="line">[02:34.52]And to the fella over there with the hella good hair</span><br><span class="line"></span><br><span class="line">[02:37.37]Won’t you come on over, baby, we can shake, shake, shake</span><br><span class="line"></span><br><span class="line">[02:42.16]Cause the players gonna play, play, play, play, play</span><br><span class="line"></span><br><span class="line">[02:47.17]And the haters gonna hate, hate, hate, hate, hate</span><br><span class="line"></span><br><span class="line">[02:49.81]Baby, I’m just gonna shake, shake, shake, shake, shake</span><br><span class="line"></span><br><span class="line">[02:52.62]I shake it off, I shake it off</span><br><span class="line"></span><br><span class="line">[02:55.38]Heartbreakers gonna break, break, break, break, break</span><br><span class="line"></span><br><span class="line">[02:58.47]And the fakers gonna fake, fake, fake, fake, fake</span><br><span class="line"></span><br><span class="line">[03:01.61]Baby, I’m just gonna shake, shake, shake, shake, shake</span><br><span class="line"></span><br><span class="line">[03:04.56]I shake it off, I shake it off</span><br><span class="line"></span><br><span class="line">[03:09.82]I, I shake it off, I shake it off</span><br></pre></td></tr></table></figure>

<p>修改之后应该是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[00:00.00] 作词 : Taylor Swift/Max Martin/Karl Johan Schuster\n[00:01.00] 作曲 : Taylor Swift/Max Martin/Karl Johan Schuster\n[00:04.97]I stay out too late, got nothing in my brain\n[00:10.62]That’s what people say, that’s what people say\n[00:16.32]I go on too many dates, but I can’t make them stay\n[00:22.33]At least that’s what people say, that’s what people say\n[00:28.52]But I keep cruising, can’t stop, won’t stop moving\n[00:33.73]It&#x27;s like I got this music in my mind saying it&#x27;s gonna be alright\n[00:41.08]Cause the players gonna play, play, play, play, play\n[00:44.33]And the haters gonna hate, hate, hate, hate, hate\n[00:47.00]Baby, I’m just gonna shake, shake, shake, shake, shake\n[00:50.18]I shake it off, I shake it off\n[00:52.51]Heartbreakers gonna break, break, break, break, break\n[00:56.01]And the fakers gonna fake, fake, fake, fake, fake\n[00:59.21]Baby, I’m just gonna shake, shake, shake, shake, shake\n[01:02.15]I shake it off, I shake it off\n[01:04.55]I’ll never miss a beat, I’m lightning on my feet\n[01:10.31]And that’s what they didn’t see, that’s what they didn’t see\n[01:16.59]I’m dancing on my own, I’ll make the moves up as I go\n[01:22.27]And that’s what they didn’t know, that’s what they didn’t know\n[01:28.14]But I keep cruising, can’t stop, won’t stop grooving\n[01:33.53]It&#x27;s like I got this music in my mind saying it&#x27;s gonna be alright\n[01:40.78]Cause the players gonna play, play, play, play, play\n[01:43.97]And the haters gonna hate, hate, hate, hate, hate\n[01:46.76]Baby, I’m just gonna shake, shake, shake, shake, shake\n[01:49.91]I shake it off, I shake it off\n[01:52.72]Heartbreakers gonna break, break, break, break, break\n[01:55.69]And the fakers gonna fake, fake, fake, fake, fake\n[01:58.78]Baby, I’m just gonna shake, shake, shake, shake, shake\n[02:01.89]I shake it off, I shake it off\n[02:05.15]I, I shake it off, I shake it off\n[02:10.11]I, I shake it off, I shake it off\n[02:17.82]Hey, hey, hey, \n[02:19.38]just think while you’ve been getting down\n[02:21.03]and out about the liars and dirty, \n[02:22.90]dirty cheats in the world you could have been getting down to this sick beat\n[02:28.74]My ex-man brought his new girlfriend\n[02:31.46]She’s like “oh my God”, but I’m just gonna shake it\n[02:34.52]And to the fella over there with the hella good hair\n[02:37.37]Won’t you come on over, baby, we can shake, shake, shake\n[02:42.16]Cause the players gonna play, play, play, play, play\n[02:47.17]And the haters gonna hate, hate, hate, hate, hate\n[02:49.81]Baby, I’m just gonna shake, shake, shake, shake, shake\n[02:52.62]I shake it off, I shake it off\n[02:55.38]Heartbreakers gonna break, break, break, break, break\n[02:58.47]And the fakers gonna fake, fake, fake, fake, fake\n[03:01.61]Baby, I’m just gonna shake, shake, shake, shake, shake\n[03:04.56]I shake it off, I shake it off\n[03:09.82]I, I shake it off, I shake it off</span><br></pre></td></tr></table></figure>

<p>但这个尝试也无效，甚至执行hexo clean&amp; hexo g&amp; hexo s -p 5555之后，左下角的整个播放器都消失了，也没有歌曲播放了。</p>
<h5 id="采用HTML-方式"><a href="#采用HTML-方式" class="headerlink" title="采用HTML 方式"></a><strong>采用HTML 方式</strong></h5><p>我没学过前端，所以这种方法就没有轻易尝试。到这里我也折腾浪费了够多时间了，所以我就停下来了。</p>
<h3 id="在next主题下的layout中引入APlayer音乐播放器源码"><a href="#在next主题下的layout中引入APlayer音乐播放器源码" class="headerlink" title="在next主题下的layout中引入APlayer音乐播放器源码"></a><strong>在next主题下的layout中引入APlayer音乐播放器源码</strong></h3><p>在\themes\next\layout_layout.swig文件中，里新增如下代码：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image078.png" alt="img"></p>
<!-- 加入APlayer音乐播放器 -->

<link rel="stylesheet" href="/dist/APlayer.min.css">

<div id="aplayer"></div>

<script type="text/javascript" src="/dist/APlayer.min.js"></script>

<script type="text/javascript" src="/dist/music.js"></script>

<h3 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a><strong>重新部署</strong></h3><p>在blog目录下开启重新部署命令：</p>
<p>hexo clean&amp; hexo g&amp; hexo s -p 5555</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/HexoPersonalBlogAddsAPlayerMusicPlayerFunction//clip_image080.png" alt="img"></p>
<h3 id="其余精品教程"><a href="#其余精品教程" class="headerlink" title="其余精品教程"></a>其余精品教程</h3><p>还希望更加详细的可以参考大佬发布在bilibili 的简易版视频教程</p>
<p>【保姆级教学带你安装Aplayer音乐播放器】 <a href="https://www.bilibili.com/video/BV1Q84y1A7kY/?share_source=copy_web&vd_source=12b49fdcdd0ffebaac761ae3ad9f8764">https://www.bilibili.com/video/BV1Q84y1A7kY/?share_source=copy_web&amp;vd_source=12b49fdcdd0ffebaac761ae3ad9f8764</a></p>
<p>还有两个大佬的安装APlayer的博客也非常详细，讲到了很多我没遇到的问题，我没有踩过的坑</p>
<p><strong>如何在博客中添加Aplayer音乐播放器</strong></p>
<p><a href="https://juejin.cn/post/7117427620190355486">https://juejin.cn/post/7117427620190355486</a></p>
<p><strong>HTML5 —— APlayer 音乐播放器</strong></p>
<p><a href="https://victor72.github.io/blog/2016/06/18/html5-audio-player/">https://victor72.github.io/blog/2016/06/18/html5-audio-player/</a></p>
<h2 id="折腾后的碎碎念"><a href="#折腾后的碎碎念" class="headerlink" title="折腾后的碎碎念"></a><strong>折腾后的碎碎念</strong></h2><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>整个过程花费了相当长的时间，经常性的忘记自己做到哪一步，看着近五十个网页找不着北，甚至做着做着开始忘记自己的目标，东一步西一步。效率极低，可能以后要在自己学习的时候加入番茄钟，或者做之前就估算自己每一步用多长时间做完，这样能够监视自己的效率。客观冷静的分析和优化策略。</p>
<h3 id="性价比"><a href="#性价比" class="headerlink" title="性价比"></a>性价比</h3><p>做完之后在发觉，添加播放器的这部分真的花了太长时间了，尤其是添加歌词功能。我明明还有更加重要的事情去做，沉没成本太大让人更愿意吊死在一棵树上，要理性的看待，及时止损。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p> 如果自己学了前端的话，那我的折腾还算有点用。但是我没学，所以这些东西都是step by step的鼠标点点点的操作，花了时间却没有用。以后不能只看兴趣，想干啥就干啥，还是要有一个详尽的精确的每一小时的学习规划表。学习来了兴致往往不是好事，这只可能是迷失和偏离航道的前奏。</p>
<h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>后续我会专心更新博客内容，提升博客的质量，不弄这些花里胡哨的东西。如果有一些简单实用的美化博客方法我会做的，但是像这次的花费巨额时间收效甚微的我就不在重蹈覆辙了。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题(Hexo)字体相关配置</title>
    <url>/2023/04/11/Next%E4%B8%BB%E9%A2%98-Hexo-%E5%AD%97%E4%BD%93%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/blogcover/%E4%BA%94%E6%9C%88%E5%A4%A9%EF%BC%86%E5%AD%99%E7%87%95%E5%A7%BF%20-%20%E6%B8%A9%E6%9F%94.jpg"></p>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>最近想修改了一下 NexT 主题的字体配置，网上大多都是2020年的相关文章，我几乎baidu以及google了全部的相关文章，都或多或少的出现了问题。前前后后捣鼓了大概10小时，终于成功修改。这不发一篇博客记录我的痛苦经历都对不住我。呜呜呜😭😭😭。每次弄博客美化博客都花好长时间，感觉有点累了💔。</p>
<span id="more"></span>

<h1 id="Next主题-Hexo-字体相关配置"><a href="#Next主题-Hexo-字体相关配置" class="headerlink" title="Next主题(Hexo)字体相关配置"></a>Next主题(Hexo)字体相关配置</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Google Fonts 分别在 2018年的11 月 18 日和 12 月 07 日提供了思源黑体和思源宋体的简繁支持，而且高达 6 种字重支持，其中思源宋体更是高达 7 种字重。这可了不得啊！更重要的是：它支持了目前电子显示屏上稀缺的宋体，这将会是一个伟大的进步！要知道，对于中文书籍，宋体一直是正文印刷的标准字体，而不是目前电子显示屏上普遍的黑体，因为<em>宋体的衬线更适合长时间阅读</em>。</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>都说衬线字体（宋体）较无衬线字体（黑体）更适合阅读！<br>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝<br>在西方国家罗马字母阵营中，字体分为两大种类：Sans Serif和 Serif，打字机体虽然也属于 Sans Serif，但由于是等宽字体，所以另外独立出 Monospace 这一种类，例如在Web中，表示代码时常常要使用等宽字体。</p>
<p>Serif的意思是，在字的笔画开始及結束的地方有额外的装饰，而且笔画的粗细会因直橫的不同而有不同。相反的，Sans Serif则沒有这些额外的装饰，笔画粗细大致差不多。</p>
<p>可以看出，我们平时所用的Georgia、Times New Roman等就属于Serif字体，而Arial、Tahoma、Verdana等则属于Sans Serif字体。对中文而言，同样存在这两大种类，很明显，宋体、细明体（繁体中常用）等就属于Serif，而黑体、幼圆等则属于Sans Serif。</p>
<p>Serif 和 Sans Serif 的一般比较<br>1、Serif的字体容易辨认，因此易读性较高。反之Sans Serif 则较醒目，但在行文阅读的情況下，Sans Serif 容易造成字母辨认的困扰，常会有来回重读及上下行错乱的情形。<br>2、Serif 强调了字母笔画的开始及结束，因此较易前后连续性的辨识。<br>3、Serif 强调一个word，而非单一的字母，反之Sans Serif则强调个别字母。<br>4、在小字体的场合，通常Sans Serif比Serif更清晰。<br>适用用途：<br>通常文章的內文、正文使用的是易读性较佳的 Serif 字体，这可增加易读性，而且长时间阅读下因为会以word为单位来阅读，较不容易疲倦。而标题、表格內用字则采用较醒目的Sans Serif字体，它需要显著、醒目，但不必长时间盯著这些字来阅读。</p>
<p>像宣传品、海报类，为求醒目，它的短篇的段落也会采用Sans Serif字体。但在书籍、报刊杂志，正文有相当篇幅的情形下，则应采用Serif字体来减轻读者阅读上的负担。</p>
<p>中文的情况<br>在中文的情形也是有相当于 serif 的字体，例如宋体就是 serif 的，他通常是和 Times Roman 字体来搭配的。而黑体、幼圆等就相当于是 sans serif 的字体。<br>在中文直排的情況，比较不容易区分 serif&#x2F;sans serif 之间的差异性，但是在目前中文橫排普遍的情形下，以上所谈到的易读性、醒目性也是适用于中文的。</p>
<p>经常看到中文出版的书籍、杂志，内容中间使用了不易阅读，但却很醒目的黑体或者幼圆等字体，这对读者来说，在长期阅读之下很容易就引起眼睛不舒服，似乎是应该尽量避免才是。在Web设计及浏览器设置中也应遵循此原则为是。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这边的配置是这样的，可以改成自己喜欢的</p>
<ul>
<li><p>中文字体: Noto Serif SC</p>
</li>
<li><p>英文字体: EB Garamond</p>
</li>
<li><p>站点标题字体: Cinzel Decorative</p>
</li>
<li><p>代码字体: JetBrains Mono</p>
<h4 id="1）Next主题配置文件-config-yml"><a href="#1）Next主题配置文件-config-yml" class="headerlink" title="1）Next主题配置文件_config.yml"></a>1）Next主题配置文件<code>_config.yml</code></h4><p>Next主题的配置文件<code>_config.yml</code>里有一段关于字体配置的选项</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 文件位置：~/blog/themes/next/_config<span class="selector-class">.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">font</span>:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Uri of fonts host. E.g. //fonts.googleapis.com (Default)</span><br><span class="line">  # 亲测这个可用，如果不可用，自己搜索 [Google 字体 国内镜像]，找个能用的就行</span><br><span class="line">  host: https://fonts.loli.net</span><br><span class="line"></span><br><span class="line">  # Global font settings used on &lt;body&gt; element.</span><br><span class="line">  global:</span><br><span class="line">    # external: true will load this font family from host.</span><br><span class="line">    external: true</span><br><span class="line">    family: EB Garamond</span><br><span class="line"></span><br><span class="line">  # Font settings for Headlines (h1, h2, h3, h4, h5, h6)</span><br><span class="line">  # Fallback to `global` font settings.</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family: Cinzel Decorative</span><br><span class="line"></span><br><span class="line">  # Font settings for posts</span><br><span class="line">  # Fallback to `global` font settings.</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family: </span><br><span class="line"></span><br><span class="line">  # Font settings for Logo</span><br><span class="line">  # Fallback to `global` font settings.</span><br><span class="line">  # The `size` option use `px` as unit</span><br><span class="line">  logo:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size: </span><br><span class="line"></span><br><span class="line">  # Font settings for &lt;code&gt; and code blocks.</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family: JetBrains Mono</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="字体获取"><a href="#字体获取" class="headerlink" title="字体获取"></a>字体获取</h5><p>字体可以在<a href="https://fonts.google.com/">Google Fonts</a> 挑选，填入<code>_config.yml</code>里面相应类型的<code>family</code>字段即可。</p>
<p>看别的文章讲<code>fonts.googleapis.com</code>的稳定性问题，这些文章一般会建议使用<code>fonts.loli.net</code>，这次看到这篇帖子<a href="https://sb.sb/blog/css-cdn/">前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务</a>，才知道原来是后者反代了前者。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>:</span><br><span class="line">  enable: true</span><br><span class="line">  # Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span><br><span class="line">  host: https://fonts.loli.net</span><br></pre></td></tr></table></figure>



<h4 id="2）字体变量的定义-base-styl"><a href="#2）字体变量的定义-base-styl" class="headerlink" title="2）字体变量的定义_base.styl"></a>2）字体变量的定义<code>_base.styl</code></h4><p>在<code>source/css/_variables/base.styl</code>里有关于字体变量的定义，主要关注一下字体：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="attribute">Font</span> families.</span><br><span class="line"><span class="comment">/* 文件位置：~/blog/themes/next/source/css/_variables/base.styl */</span></span><br><span class="line"></span><br><span class="line">$<span class="attribute">font-family</span>-chinese      = &quot;Noto Serif SC&quot;</span><br><span class="line"></span><br><span class="line">$<span class="attribute">font-family</span>-base         = $<span class="attribute">font-family</span>-chinese, sans-serif</span><br><span class="line">$<span class="attribute">font-family</span>-base         = get_font_family(&#x27;global&#x27;), $<span class="attribute">font-family</span>-chinese, sans-serif if get_font_family(&#x27;global&#x27;)</span><br><span class="line"></span><br><span class="line">$<span class="attribute">font-family</span>-logo         = $<span class="attribute">font-family</span>-base</span><br><span class="line">$<span class="attribute">font-family</span>-logo         = get_font_family(&#x27;logo&#x27;), $<span class="attribute">font-family</span>-base if get_font_family(&#x27;logo&#x27;)</span><br><span class="line"></span><br><span class="line">$<span class="attribute">font-family</span>-headings     = $<span class="attribute">font-family</span>-base</span><br><span class="line">$<span class="attribute">font-family</span>-headings     = get_font_family(&#x27;headings&#x27;), $<span class="attribute">font-family</span>-base if get_font_family(&#x27;headings&#x27;)</span><br><span class="line"></span><br><span class="line">$<span class="attribute">font-family</span>-posts        = $<span class="attribute">font-family</span>-base</span><br><span class="line">$<span class="attribute">font-family</span>-posts        = get_font_family(&#x27;posts&#x27;), $<span class="attribute">font-family</span>-base if get_font_family(&#x27;posts&#x27;)</span><br><span class="line"></span><br><span class="line">$<span class="attribute">font-family</span>-monospace    = $<span class="attribute">font-family</span>-chinese, monospace</span><br><span class="line">$<span class="attribute">font-family</span>-monospace    = Menlo, Monaco, Consolas, get_font_family(&#x27;codes&#x27;), $<span class="attribute">font-family</span>-chinese, monospace if get_font_family(&#x27;codes&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="3）external-fonts-swig"><a href="#3）external-fonts-swig" class="headerlink" title="3）external-fonts.swig"></a>3）<code>external-fonts.swig</code></h4><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">文件位置：~/blog/themes/next/layout/_partials/head/head.swig</span><br></pre></td></tr></table></figure>

<p>将这个文件的全部内容直接替换为 Google Fonts 网站生成的 <code>&lt;link&gt;</code> 代码，然后可以将 <code>googleapis.com</code> 修改为 <code>loli.net</code>。</p>
<p>在<code>~/blog/themes/next/layout/_partials/head/head.swig</code>里Ctrl+F搜索<code>&#123;&#123; next_font() &#125;&#125;</code>，然后就能看到这一段</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;&#123; next_font() &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;%- set font_awesome_uri = theme<span class="selector-class">.vendors</span><span class="selector-class">.fontawesome</span> or next_vendors(&#x27;<span class="attribute">font</span>-awesome/css/<span class="attribute">all</span><span class="selector-class">.min</span><span class="selector-class">.css</span>&#x27;) %&#125;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; font_awesome_uri &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>紧接着加上</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link href=&quot;https://fonts.loli.net/css?family=Noto+Serif+SC|Roboto&amp;display=swap<span class="string">&quot; rel=&quot;</span>stylesheet<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4）custom-styl"><a href="#4）custom-styl" class="headerlink" title="4）custom.styl"></a>4）<code>custom.styl</code></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 文件位置：~/blog/themes/next/source/css/_custom/custom.styl */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://zhuanlan.zhihu.com/p/49470735">衬线体的进化：从纸面到屏幕 | 方正字库</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://guanqr.com/tech/website/web-font-guide/">https://guanqr.com/tech/website/web-font-guide/</a></p>
<h2 id="googleapis-镜像"><a href="#googleapis-镜像" class="headerlink" title="googleapis 镜像"></a>googleapis 镜像</h2><p>虽然许多文章里都提到说 <code>fonts.googleapis.com</code> 不太稳定，但我访问还挺顺利的……</p>
<p><code>fonts.googleapis.com</code> 的国内 CDN 比较少，只找到这么一篇帖子。</p>
<p><a href="https://sb.sb/blog/css-cdn/">前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务</a></p>
<p>用上面帖子里提供的 CDN，Next 的配置就可以这样：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>:</span><br><span class="line">  enable: true</span><br><span class="line">  host: //fonts.loli.net</span><br></pre></td></tr></table></figure>

<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://theme-next.org/docs/theme-settings/#Fonts-Customization">https://theme-next.org/docs/theme-settings/#Fonts-Customization</a></p>
<h2 id="如果修改不生效"><a href="#如果修改不生效" class="headerlink" title="如果修改不生效"></a>如果修改不生效</h2><ol>
<li>浏览器清理下缓存。</li>
<li>是部署后没效果还是本地就没效果？<code>hexo s</code> 或 <code>hexo d</code> 前使用 <code>hexo clean</code> 清理下。</li>
<li>部署后没效果的话，稍微等一下远程的缓存刷新。</li>
<li>本地没生效的话，CSS 文件夹有没有使用 CDN？</li>
<li>再不行，进主题的 CSS 文件，或后文里提到的 <code>styles.styl</code> 为 <code>.post-body</code> 单独添加字体相关的 CSS。</li>
<li>尝试升级 hexo-theme……</li>
<li>如果仍不能正常显示，或者确定不是自己的问题，可以去 <a href="https://github.com/theme-next/hexo-theme-next">theme-next&#x2F;hexo-theme-next</a> 提 issue 。</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>考研笔记之速过408基础C语言</title>
    <url>/2023/04/11/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%80%9F%E8%BF%87408%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="考研笔记之速过408基础C语言"><a href="#考研笔记之速过408基础C语言" class="headerlink" title="考研笔记之速过408基础C语言"></a>考研笔记之速过408基础C语言</h1><p>前言</p>
<p>因为决定要考研，于是看王道的408课程，大部分内容我都有基础，所以看得很快，笔记记得很精简，主要目的是维持一个知识体系的完整性。至于详细性就略有不足了。</p>
<p>因为大体东西我学过，所以主要记的东西都是边角料，仅作为我的小字典记录。后面贴图片较多，因为方便有效。图片也是经过筛选的，如果一股脑把全部的课件都放上来，不仅看都不会看，更是糊弄自己的。</p>
<p>开始总结之后才发现有很多基础的东西遗忘了，虽然感觉就算八股文也不会考得这么细致。但也全部放上来吧。</p>
<h2 id="01-课程导学，编程环境搭建"><a href="#01-课程导学，编程环境搭建" class="headerlink" title="01.课程导学，编程环境搭建"></a>01.课程导学，编程环境搭建</h2><p>C语言学习常见问题</p>
<p>7条</p>
<p>如何学习课程</p>
<p>1.每周按进度，看视频（非常重要），学习课程，写作业，展示慕课视频学习方法</p>
<p>2.有问题及时提问。（老师箴言：聊那些乱七八糟的东西是没有用的，那个都太遥远了，做好当下，你才能够在未来有更多的选择，你现在做很多想象那是没有用的。你不去提升你的实力，你选择不了任何东西。等你到了那个层次，你才有资格谈论工作行情一类的事情吧）</p>
<p>3.注意查看常见问题总结（课件里面没有）</p>
<p>4.大三的同学（尤其是跨专业的不建议参加蓝桥杯，复试更加看重项目）</p>
<p>5.前三节课程免费试听</p>
<h2 id="02-数据的类型、数据的输入输出"><a href="#02-数据的类型、数据的输入输出" class="headerlink" title="02.数据的类型、数据的输入输出"></a>02.数据的类型、数据的输入输出</h2><p>printf的输出默认是右对齐，不是左对齐。如果需要左对齐，那么加入负号。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image002.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image004.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image006.jpg" alt="img"></p>
<h2 id="03-运算符与表达式"><a href="#03-运算符与表达式" class="headerlink" title="03.运算符与表达式"></a>03.运算符与表达式</h2><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image008.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image010.png" alt="img"></p>
<h2 id="04-选择、循环"><a href="#04-选择、循环" class="headerlink" title="04.选择、循环"></a>04.选择、循环</h2><p>复习上节课内容</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image012.png" alt="img"></p>
<p>多分支语句的执行顺序</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image014.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image016.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image018.png" alt="img"></p>
<h2 id="05-一维数组与字符数组"><a href="#05-一维数组与字符数组" class="headerlink" title="05.一维数组与字符数组"></a>05.一维数组与字符数组</h2><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image020.png" alt="img"></p>
<p>写后者显得自己很懂，写前者给人印象你不懂。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image022.png" alt="img"></p>
<p>不要这么写，初试的时候没人会数你的数组有几个元素。</p>
<p>数组越界访问与数组的传递</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image024.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image026.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image028.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image030.jpg" alt="img"></p>
<p>贴一段数组传递章节自己的代码笔记</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 数组传递到子函数后，子函数的形参接收到的是数组的起始地址。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 因此不能把数组的长度传递给子函数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写成int a[]更加专业，不用往里面加数组长度。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//你用额外传进去一个数组长度，写成int a[5]里面的数组长度是传不过去的，老师会觉得你不懂</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> len)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,a[i]);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  a[<span class="number">3</span>]=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">  print(a,<span class="number">5</span>);<span class="comment">//数组在传递给子函数时候，它的长度传递不过去。</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;a[3]=%d\n&quot;</span>,a[<span class="number">3</span>]);<span class="comment">//a[3]发生了改变</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image032.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image034.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image036.jpg" alt="img"></p>
<h3 id="5-5【课件】gets与puts讲解，strlen-strcmp-strcpy讲解"><a href="#5-5【课件】gets与puts讲解，strlen-strcmp-strcpy讲解" class="headerlink" title="5.5【课件】gets与puts讲解，strlen-strcmp-strcpy讲解"></a>5.5【课件】gets与puts讲解，strlen-strcmp-strcpy讲解</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image038.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image040.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image042.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image044.jpg" alt="img"></p>
<h2 id="06-指针"><a href="#06-指针" class="headerlink" title="06.指针"></a>06.指针</h2><p>这一章有点温故而知新的感觉，所以我就全部放上来了。有一说一，王道讲的比上课讲的好多了。</p>
<h3 id="6-2【课件】指针的本质（间接访问原理）讲解"><a href="#6-2【课件】指针的本质（间接访问原理）讲解" class="headerlink" title="6.2【课件】指针的本质（间接访问原理）讲解"></a>6.2【课件】指针的本质（间接访问原理）讲解</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image046.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image048.jpg" alt="img"></p>
<h3 id="6-3【课件】指针的传递使用场景"><a href="#6-3【课件】指针的传递使用场景" class="headerlink" title="6.3【课件】指针的传递使用场景"></a>6.3【课件】指针的传递使用场景</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image050.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image052.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image054.jpg" alt="img"></p>
<h3 id="6-4【课件】指针的偏移使用场景"><a href="#6-4【课件】指针的偏移使用场景" class="headerlink" title="6.4【课件】指针的偏移使用场景"></a>6.4【课件】指针的偏移使用场景</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image056.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image058.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image060.jpg" alt="img"></p>
<h3 id="6-5【课件】指针与malloc动态内存申请，栈与堆的差异"><a href="#6-5【课件】指针与malloc动态内存申请，栈与堆的差异" class="headerlink" title="6.5【课件】指针与malloc动态内存申请，栈与堆的差异"></a>6.5【课件】指针与malloc动态内存申请，栈与堆的差异</h3><p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image062.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image064.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image066.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image068.jpg" alt="img"></p>
<h2 id="07-函数"><a href="#07-函数" class="headerlink" title="07.函数"></a>07.函数</h2><p>C语言的函数不能嵌套定义，可以嵌套调用。</p>
<p>这一章概念性的东西比较多，我还是全部放上来作为字典忘了的时候查阅就好了。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image070.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image072.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image074.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image076.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image078.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image080.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image082.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image084.jpg" alt="img"></p>
<h2 id="08-结构体与C-引用讲解"><a href="#08-结构体与C-引用讲解" class="headerlink" title="08.结构体与C++引用讲解"></a>08.结构体与C++引用讲解</h2><p>全部照搬</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image086.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image088.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image090.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image092.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image094.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image096.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image098.jpg" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image100.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image102.jpg" alt="img"><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image104.jpg" alt="img"></p>
<h1 id="6-26简单的补充更新"><a href="#6-26简单的补充更新" class="headerlink" title="6.26简单的补充更新"></a>6.26简单的补充更新</h1><h2 id="多个文件"><a href="#多个文件" class="headerlink" title="多个文件"></a>多个文件</h2><p>一般是把函数的定义放在函数的调用的上面</p>
<p>如果把函数的定义放在函数的调用的下面，就会报错</p>
<p>&#x2F;&#x2F; 需要将函数的声明放在最前面<br> &#x2F;&#x2F;遵守先声明，后调用</p>
<p>我们现在要将函数从main.c里面拿出来，放到func.c里面</p>
<p>要怎么用呢</p>
<p>打勾是为了把两个.c文件，一并编译到一个可执行文件里面</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image002.png" alt="img"></p>
<p>如果你是手动拖进来的，你就要手动再这里面添加fun.c</p>
<p>加一个.h的，他又自动放进来了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image004.png" alt="img"></p>
<p>自动生成的一个重要说明</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image006.png" alt="img"></p>
<p>这是为了防止头文件的重复包含的</p>
<p>我们将公共使用的头文件放到 func.h里面</p>
<p>像是</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image008.png" alt="img"></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">然后再main.c里面引用<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;func.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>就行了</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image010.png" alt="img"></p>
<p>双引号意思是在当面目录下找我们自己定义的头文件</p>
<p>然后我们要将函数的声明都放到fun.h里面</p>
<p>因为fun.c和main.c都有可能要调用函数</p>
<p>记住要遵循的就是</p>
<p>函数的声明放在fun.h</p>
<p>函数的定义放在fun.c</p>
<p>函数的调用则是main,c和fun.c都有可能</p>
<p> <img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/Cyuyan/clip_image011.png" alt="img"></p>
<p>最后有一个函数的定义与声明是不一样的</p>
<p>但是变量的定义与声明是差不多的 </p>
<h2 id="C-文件和流"><a href="#C-文件和流" class="headerlink" title="C++ 文件和流"></a><strong>C++</strong> <strong>文件和流</strong></h2><p>的学习博客</p>
<p>菜鸟教程</p>
<p><a href="https://www.runoob.com/cplusplus/cpp-files-streams.html">https://www.runoob.com/cplusplus/cpp-files-streams.html</a></p>
<p>#define相当于直接替换，</p>
<p>也就是说看到FILETYPE就换成int</p>
<p><a href="https://www.google.com/search?q=%23define%E7%9B%B8%E5%BD%93%E4%BA%8E%E4%BB%80%E4%B9%88&oq=%23define%E7%9B%B8%E5%BD%93%E4%BA%8E%E4%BB%80%E4%B9%88&gs_lcrp=EgZjaHJvbWUyBggAEEUYOTIHCAEQABiiBDIHCAIQABiiBDIHCAMQABiiBNIBCTExMzE2ajBqN6gCALACAA&sourceid=chrome&ie=UTF-8">https://www.google.com/search?q=%23define%E7%9B%B8%E5%BD%93%E4%BA%8E%E4%BB%80%E4%B9%88&oq=%23define%E7%9B%B8%E5%BD%93%E4%BA%8E%E4%BB%80%E4%B9%88&gs_lcrp&#x3D;EgZjaHJvbWUyBggAEEUYOTIHCAEQABiiBDIHCAIQABiiBDIHCAMQABiiBNIBCTExMzE2ajBqN6gCALACAA&amp;sourceid&#x3D;chrome&amp;ie&#x3D;UTF-8</a></p>
<p><a href="https://blog.csdn.net/qq_44584493/article/details/87631803">https://blog.csdn.net/qq_44584493/article/details/87631803</a></p>
<p><a href="https://www.runoob.com/note/24230">https://www.runoob.com/note/24230</a></p>
<p>这三个number可以用来干嘛，然后就是vector<string>这是一个字符串容器，使用方法见</p>
<p><a href="https://blog.csdn.net/geekdoe/article/details/50731833">https://blog.csdn.net/geekdoe/article/details/50731833</a></p>
<p><a href="https://www.w3cschool.cn/cpp/cpp-fu8l2ppt.html">https://www.w3cschool.cn/cpp/cpp-fu8l2ppt.html</a></p>
<p><a href="https://blog.csdn.net/sevenjoin/article/details/81943864">https://blog.csdn.net/sevenjoin/article/details/81943864</a></p>
<p>总结：将所有的头文件存储在 include 文件夹下，将所有的 .cpp 文件存储在 source 文件夹下。总之项目越大，多文件编程的优势越明显。</p>
<p><a href="https://blog.csdn.net/jinxianwei1999/article/details/123262099">https://blog.csdn.net/jinxianwei1999/article/details/123262099</a></p>
]]></content>
      <categories>
        <category>考研笔记</category>
      </categories>
      <tags>
        <tag>考研笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Diary0411</title>
    <url>/2023/04/11/Diary0411/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>维护更新博客的时候才会一并更新日记。</p>
<p>鸽掉日记的可能性也很大。</p>
<p>我的日记主要是流水账，以及只有自己才能看得懂的谜语。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>最近算是学习状态好了很多。</p>
<p>不过越是有状态，越是能看到很多很多自己做的愚蠢的低效的事情。</p>
<p>一是越来越明白人的主观能动性与环境气氛和从众效应的相互影响。很多转折点分析来分析去都是命，谁都说不好。真到了那个点，都是看运气。因为自己就是一个人，甚至机器也有自己的性能极限，唯心主义的一定能做到到头来伤害自己。</p>
<p>二是很多东西从实用主义，甚至从精致的利己主义来讲的话，自己做个样子不过是自己安慰自己，根本就没有用，到头来还是浪费了时间。出发点应该是效率，而不是自己获得的一种虚假的安全感，做样子不能带给自己任何安全感。</p>
<p>三是某些事情，为什么别人看上去做得那么简单，自己却总是绕不出来。其实你站在旁观者的角度来看，对比两个人的不同。绝大多数时候，都只是自己再绕自己，事情本身就是这样，钻牛角尖只会伤害自己。当局者迷，旁观者清。</p>
<p>四是从旁观者角度看事实的话总是让人难以接受，真的好想歪曲事实。但若是保持客观态度看全貌，一下就发现自己又笨又蠢，连一个普通人也当不好。</p>
<p>五是对自己又要重拾八股文的看法，没什么看法。只要看清楚自己的目标就好了。自己的目标从来只是八股文高作为一个工具，考试结束就什么都没了。所以自己不要投入太多无意义的东西情感价值和成本在非目标上，所谓的自豪感，自负感，高人一等感都是骗自己的。摆正视角就能发现以前太多重复的无意义的刷了。但在哪个环境下面，又不可能让我们做别的事情，充其量也就是找事情让我们做，至于效果，就是找事情让我们做的效果。就像给驴找一辆没有粮食的石磨拉，就是让驴白天不睡觉而找的事情，至于事情有没有意义，没有人会问这个问题。自己也在那种畸形的压抑的异性的愚蠢的气氛里面受到感染，或是受到了别人源于他自己压力和私心从而对我的蛊惑。人家就是逢场作戏，缓解自己的当头之急，你这个笨蛋看不清潜规则，自己还误以为真，把整个人搭进去。为了做怪异游戏里面的先驱者而自我催眠，到头来偏离了目标，一场狂欢醒来，原来自己活着的一口气全靠自己的催眠，别人上面都没给你。啊Q都没自己会骗自己。</p>
]]></content>
      <categories>
        <category>日记间隙随笔</category>
      </categories>
      <tags>
        <tag>生活碎碎念</tag>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo静态博客设置文章加密访问</title>
    <url>/2023/04/11/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Hexo静态博客设置文章加密访问"><a href="#Hexo静态博客设置文章加密访问" class="headerlink" title="Hexo静态博客设置文章加密访问"></a>Hexo静态博客设置文章加密访问</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>总有一些想法，自己想说出来，但又找不到人倾诉。别人不一定能理解你，你也害怕受到别人异样的目光。</p>
<p>于是你发布在博客上面，但是自己有时候请同学室友来看自己的博客，这样又会造成尴尬。你只想把这些话，说给你觉得值得的人听，所以接下来这个插件，可以轻松实现文章的加密功能，让自己的想法只展示给懂你的人看。👀</p>
<h2 id="安装hexo-blog-encrypt插件"><a href="#安装hexo-blog-encrypt插件" class="headerlink" title="安装hexo-blog-encrypt插件"></a>安装hexo-blog-encrypt插件</h2><p>在hexo目录下</p>
<p><code>npm install hexo-blog-encrypt</code></p>
<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>在想要使用加密功能的Blog头部加上对应文字：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">categories: 日记间隙随笔</span><br><span class="line">password: MyPassword</span><br><span class="line">abstract: Here&#x27;s something encrypted, password is required to continue reading.</span><br><span class="line">message: Hey, password is required here.</span><br><span class="line">wrong_pass_message: Oh, this is an invalid password. Check and try again, please.</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ul>
<li><code>abstract</code>：用于设置加密文章显示的摘要。</li>
<li><code>message</code>：输入密码提示。</li>
<li><code>wrong_pass_message</code>: 输入错误提示。</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据技术原理与应用实验4NoSQL和关系数据库的操作比较</title>
    <url>/2023/04/05/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C4NoSQL%E5%92%8C%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="实验4-NoSQL和关系数据库的操作比较"><a href="#实验4-NoSQL和关系数据库的操作比较" class="headerlink" title="实验4 NoSQL和关系数据库的操作比较"></a>实验4 NoSQL和关系数据库的操作比较</h1><h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1.  实验目的"></a>1.  实验目的</h1><p>（1）理解四种数据库(MySQL、 HBase、 Redis 和 MongoDB)的概念以及不同点；<br> （2）熟练使用四种数据库操作常用的 Shell 命令；<br> （3）熟悉四种数据库操作常用的 Java API。</p>
<h1 id="2-实验平台"><a href="#2-实验平台" class="headerlink" title="2.实验平台"></a>2.实验平台</h1><p>（1） 操作系统： Linux（Ubuntu-22.04.2）；<br> （2） Hadoop 版本： 3.1.3；<br> （3） MySQL 版本： 8.0.32；<br> （4） HBase 版本： 2.2.2；<br> （5） Redis 版本： 7.0.10；<br> （6） MongoDB 版本： 6.0.5；<br> （7） JDK 版本： 1.8；<br> （8） Java IDE： Eclipse；</p>
<h1 id="3-实验步骤与结果"><a href="#3-实验步骤与结果" class="headerlink" title="3.实验步骤与结果"></a>3.实验步骤与结果</h1><p>（一） <strong>MySQL</strong> 数据库操作</p>
<p>学生表如 14-7 所示。</p>
<p>表 14-7 学生表 Student</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>English</th>
<th>Math</th>
<th>Computer</th>
</tr>
</thead>
<tbody><tr>
<td>zhangsan</td>
<td>69</td>
<td>86</td>
<td>77</td>
</tr>
<tr>
<td>lisi</td>
<td>55</td>
<td>100</td>
<td>88</td>
</tr>
</tbody></table>
<p>\1. 根据上面给出的 Student 表，在 MySQL 数据库中完成如下操作：<br> （1）在 MySQL 中创建 Student 表，并录入数据；</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image002.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image003.png" alt="img"><br> （2） 用 SQL 语句输出 Student 表中的所有记录；</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image004.png" alt="img"><br> （3） 查询 zhangsan 的 Computer 成绩；</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image006.png" alt="img">（4） 修改 lisi 的 Math 成绩， 改为 95。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image007.png" alt="img"><br> 2.根据上面已经设计出的 Student 表，使用 MySQL 的 JAVA 客户端编程实现以下操作<br> （1）向 Student 表中添加如下所示的一条记录：</p>
<table>
<thead>
<tr>
<th>scofield</th>
<th>45</th>
<th>89</th>
<th>100</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>JAVA代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mysql_test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xusheng</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//JDBC DRIVER and DB</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String  DRIVER=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DB=<span class="string">&quot;jdbc:mysql://localhost/mysql?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="comment">//Database auth</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String USER=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PASSWD=<span class="string">&quot;mynewpassword&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Connection conn=<span class="literal">null</span>;</span><br><span class="line">        Statement stmt=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载驱动程序</span></span><br><span class="line">            Class.forName(DRIVER);</span><br><span class="line">            System.out.println(<span class="string">&quot;Connecting to a selected database...&quot;</span>);</span><br><span class="line">            <span class="comment">//打开一个连接</span></span><br><span class="line">            conn=DriverManager.getConnection(DB, USER, PASSWD);</span><br><span class="line">            <span class="comment">//执行一个查询</span></span><br><span class="line">            stmt=conn.createStatement();</span><br><span class="line">            String sql=<span class="string">&quot;insert into student values(&#x27;scofield&#x27;,45,89,100)&quot;</span>;</span><br><span class="line">            stmt.executeUpdate(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;Inserting records into the table successfully!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(stmt!=<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol>
<li><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image008.png" alt="img"></li>
</ol>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image009.png" alt="img"></p>
<p>（2） 获取 scofield 的 English 成绩信息</p>
<p>JAVA代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mysql_qurty</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//JDBC DRIVER and DB</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String  DRIVER=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DB=<span class="string">&quot;jdbc:mysql://localhost/mysql?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="comment">//Database auth</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String USER=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PASSWD=<span class="string">&quot;mynewpassword&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Connection conn=<span class="literal">null</span>;</span><br><span class="line">        Statement stmt=<span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载驱动程序</span></span><br><span class="line">            Class.forName(DRIVER);</span><br><span class="line">            System.out.println(<span class="string">&quot;Connecting to a selected database...&quot;</span>);</span><br><span class="line">            <span class="comment">//打开一个连接</span></span><br><span class="line">            conn=DriverManager.getConnection(DB, USER, PASSWD);</span><br><span class="line">            <span class="comment">//执行一个查询</span></span><br><span class="line">            stmt=conn.createStatement();</span><br><span class="line">            String sql=<span class="string">&quot;select name,English from student where name=&#x27;scofield&#x27; &quot;</span>;</span><br><span class="line">            <span class="comment">//获得结果集</span></span><br><span class="line">            rs=stmt.executeQuery(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;name&quot;</span>+<span class="string">&quot;\t\t&quot;</span>+<span class="string">&quot;English&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.print(rs.getString(<span class="number">1</span>)+<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">                System.out.println(rs.getInt(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs!=<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span>(stmt!=<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image010.png" alt="img"><br> （二） <strong>HBase</strong> 数据库操作<br> 学生表 Student 如表 14-8 所示。</p>
<p>表 14-8 学生表 Student</p>
<table>
<thead>
<tr>
<th>name</th>
<th>score</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>English</td>
<td>Math</td>
<td>Computer</td>
<td></td>
</tr>
<tr>
<td>zhangsan</td>
<td>69</td>
<td>86</td>
<td>77</td>
</tr>
<tr>
<td>lisi</td>
<td>55</td>
<td>100</td>
<td>88</td>
</tr>
</tbody></table>
<p>\1. 根据上面给出的学生表 Student 的信息， 执行如下操作：<br> （1） 用 Hbase Shell 命令创建学生表 Student；<img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image012.png" alt="img"></p>
<p>（2）用 scan 命令浏览 Student 表的相关信息；<img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image014.png" alt="img"></p>
<p>（3）查询 zhangsan 的 Computer 成绩；</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image015.png" alt="img"></p>
<p>（4）修改 lisi 的 Math 成绩， 改为 95。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image017.png" alt="img"></p>
<p>2.根据上面已经设计出的 Student 表， 用 HBase API 编程实现以下操作：<br> （1）添加数据： English:45 Math:89 Computer:100</p>
<table>
<thead>
<tr>
<th>scofield</th>
<th>45</th>
<th>89</th>
<th>100</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>JAVA代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Admin;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Put;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hbase_insert</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xusheng</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Admin admin;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        configuration  = HBaseConfiguration.create();</span><br><span class="line">        configuration.set(<span class="string">&quot;hbase.rootdir&quot;</span>,<span class="string">&quot;hdfs://localhost:9000/hbase&quot;</span>);</span><br><span class="line">        <span class="comment">//configuration.set(&quot;hbase.rootdir&quot;,&quot;hdfs://hadoop102:8020/HBase&quot;);</span></span><br><span class="line">        <span class="comment">//configuration.set(&quot;hbase.zookeeper.quorum&quot;,&quot;hadoop102,hadoop103,hadoop104&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">            admin = connection.getAdmin();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            insertRow(<span class="string">&quot;student&quot;</span>,<span class="string">&quot;scofield&quot;</span>,<span class="string">&quot;score&quot;</span>,<span class="string">&quot;English&quot;</span>,<span class="string">&quot;45&quot;</span>);</span><br><span class="line">            insertRow(<span class="string">&quot;student&quot;</span>,<span class="string">&quot;scofield&quot;</span>,<span class="string">&quot;score&quot;</span>,<span class="string">&quot;Math&quot;</span>,<span class="string">&quot;89&quot;</span>);</span><br><span class="line">            insertRow(<span class="string">&quot;student&quot;</span>,<span class="string">&quot;scofield&quot;</span>,<span class="string">&quot;score&quot;</span>,<span class="string">&quot;Computer&quot;</span>,<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertRow</span><span class="params">(String tableName,String rowKey,String colFamily,</span></span><br><span class="line"><span class="params">                                 String col,String val)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        <span class="type">Put</span> <span class="variable">put</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Put</span>(rowKey.getBytes());</span><br><span class="line">        put.addColumn(colFamily.getBytes(), col.getBytes(), val.getBytes());</span><br><span class="line">        table.put(put);</span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(admin != <span class="literal">null</span>)&#123;</span><br><span class="line">                admin.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != connection)&#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行完上述代码以后，可以用scan命令输出数据库数据，以检验是否插入成功，执行结果截图如图所示。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image019.png" alt="img"></p>
<p>（2） 获取 scofield 的 English 成绩信息。</p>
<p>JAVA代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.CellUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Admin;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Get;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Put;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hbase_query</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Admin admin;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        configuration  = HBaseConfiguration.create();</span><br><span class="line">        configuration.set(<span class="string">&quot;hbase.rootdir&quot;</span>,<span class="string">&quot;hdfs://localhost:9000/hbase&quot;</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">            admin = connection.getAdmin();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getData(<span class="string">&quot;student&quot;</span>,<span class="string">&quot;scofield&quot;</span>,<span class="string">&quot;score&quot;</span>,<span class="string">&quot;English&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(String tableName,String rowKey,String colFamily,</span></span><br><span class="line"><span class="params">                               String col)</span><span class="keyword">throws</span>  IOException&#123;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        <span class="type">Get</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Get</span>(rowKey.getBytes());</span><br><span class="line">        get.addColumn(colFamily.getBytes(),col.getBytes());</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> table.get(get);</span><br><span class="line">        showCell(result);</span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showCell</span><span class="params">(Result result)</span>&#123;</span><br><span class="line">        Cell[] cells = result.rawCells();</span><br><span class="line">        <span class="keyword">for</span>(Cell cell:cells)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;RowName:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(CellUtil.cloneRow(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Timetamp:&quot;</span>+cell.getTimestamp()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;column Family:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(CellUtil.cloneFamily(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;row Name:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(CellUtil.cloneQualifier(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;value:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(CellUtil.cloneValue(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(admin != <span class="literal">null</span>)&#123;</span><br><span class="line">                admin.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != connection)&#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>控制台中输出如下信息：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image020.png" alt="img"></p>
<p>（三） <strong>Redis</strong> 数据库操作<br> Student 键值对如下：</p>
<p>  zhangsan:｛   English: 69   Math: 86   Computer: 77   ｝   lisi:｛   English: 55   Math: 100   Computer: 88   ｝  </p>
<p>\1. 根据上面给出的键值对， 完成如下操作：<br> （ 1） 用 Redis 的哈希结构设计出学生表 Student（ 键值可以用 student.zhangsan 和<br> student.lisi 来表示两个键值属于同一个表）；</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image021.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image022.png" alt="img"></p>
<p>（2） 用 hgetall 命令分别输出 zhangsan 和 lisi 的成绩信息；</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image023.png" alt="img"></p>
<p>（3） 用 hget 命令查询 zhangsan 的 Computer 成绩；</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image024.png" alt="img"></p>
<p>（4）修改 lisi 的 Math 成绩， 改为 95。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image025.png" alt="img"></p>
<p>2.根据上面已经设计出的学生表 Student， 用 Redis 的 JAVA 客户端编程(jedis)，实现如下操<br> 作：<br> （1）添加数据： English:45 Math:89 Computer:100</p>
<p>该数据对应的键值对形式如下：</p>
<p>  scofield:｛   English: 45   Math: 89   Computer: 100   ｝  </p>
<p>JAVA代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jedis_test</span> </span><br><span class="line">&#123;</span><br><span class="line">	 	    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">	 	    &#123;</span><br><span class="line">	 	    <span class="comment">//https://blog.csdn.net/lixiaoxiong55/article/details/81592800</span></span><br><span class="line">	        <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">	        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">	        System.out.println(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line"><span class="comment">//	        jedis.hset(&quot;Student.scofield&quot;, &quot;English&quot;, &quot;45&quot;);</span></span><br><span class="line"><span class="comment">//	        jedis.hset(&quot;Student.scofield&quot;, &quot;Math&quot;, &quot;89&quot;);</span></span><br><span class="line"><span class="comment">//	        jedis.hset(&quot;Student.scofield&quot;, &quot;Computer&quot;,&quot;100&quot;);</span></span><br><span class="line"><span class="comment">//	        System.out.println(&quot;success!&quot;);</span></span><br><span class="line">	        <span class="type">String</span> <span class="variable">re</span> <span class="operator">=</span> jedis.hget(<span class="string">&quot;Student.scofield&quot;</span>, <span class="string">&quot;English&quot;</span>);  </span><br><span class="line">	        System.out.println(re); </span><br><span class="line">	    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image027.jpg" alt="img"></p>
<p>（2） 获取 scofield 的 English 成绩信息</p>
<p>JAVA代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jedis_query</span> &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    *<span class="comment">// TODO Auto-generated method stub*</span></span><br><span class="line"></span><br><span class="line">​    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    String value=jedis.hget(<span class="string">&quot;student.scofield&quot;</span>, <span class="string">&quot;English&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;scofield&#x27;s English score is:  &quot;</span>+value);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image029.jpg" alt="img"></p>
<p>（四） <strong>MongoDB</strong> 数据库操作<br> Student 文档如下:</p>
<p>  {   “name”: “zhangsan”,   “score”: {   “English”: 69,   “Math”: 86,   “Computer”: 77   }   } {   “name”: “lisi”,   “score”: {   “English”: 55,   “Math”: 100,   “Computer”: 88   }   }  </p>
<p>1.根据上面给出的文档，完成如下操作：<br> （1） 用 MongoDB Shell 设计出 student 集合；</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image030.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image032.png" alt="img"></p>
<p>（2） 用 find()方法输出两个学生的信息；</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image033.png" alt="img"></p>
<p>（3） 用 find()方法查询 zhangsan 的所有成绩(只显示 score 列)；</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image034.png" alt="img"></p>
<p>（4）修改 lisi 的 Math 成绩， 改为 95。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image036.png" alt="img"></p>
<p>2.根据上面已经设计出的 Student 集合，用 MongoDB 的 Java 客户端编程，实现如下操作：<br> （1） 添加数据： English:45 Math:89 Computer:100<br> 与上述数据对应的文档形式如下：</p>
<p>  {   “name”: “scofield”,   “score”: {   “English”: 45,   “Math”: 89,   “Computer”: 100   }   }  </p>
<p>JAVA代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"><span class="keyword">import</span> org.bson.conversions.Bson;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.*;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.*;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.model.Filters;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mongo_insert</span> </span><br><span class="line">&#123;</span><br><span class="line">	MongoClient mongoClient;</span><br><span class="line">	MongoDatabase mongoDatabase;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">mongo_insert</span><span class="params">(String databasename)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">this</span>.getConnect(databasename);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">mongo_insert</span><span class="params">(String username,String password,String databasename)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">this</span>.getConnectByPassword(username, password, databasename);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">getConnect</span><span class="params">(String databasename)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mongoClient = <span class="keyword">new</span> <span class="title class_">MongoClient</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">27017</span>);</span><br><span class="line">        <span class="built_in">this</span>.mongoDatabase = mongoClient.getDatabase(databasename);</span><br><span class="line">        System.out.println(<span class="string">&quot;Connect Success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">getConnectByPassword</span><span class="params">(String username,String password,String databasename)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;ServerAddress&gt; adds = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ServerAddress</span> <span class="variable">serverAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">27017</span>);</span><br><span class="line">        adds.add(serverAddress);</span><br><span class="line">        List&lt;MongoCredential&gt; credentials = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">MongoCredential</span> <span class="variable">mongoCredential</span> <span class="operator">=</span> MongoCredential.createScramSha1Credential(username, databasename, password.toCharArray());</span><br><span class="line">        credentials.add(mongoCredential);</span><br><span class="line">        mongoClient = <span class="keyword">new</span> <span class="title class_">MongoClient</span>(adds, credentials);</span><br><span class="line">        <span class="built_in">this</span>.mongoDatabase = mongoClient.getDatabase(databasename);</span><br><span class="line">        System.out.println(<span class="string">&quot;Connect Success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertOne</span><span class="params">(MongoDatabase mongoDatabase,String collectionname,Document document)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(collectionname);</span><br><span class="line">        collection.insertOne(document);</span><br><span class="line">        System.out.println(<span class="string">&quot;Insert document Success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertMany</span><span class="params">(MongoDatabase mongoDatabase,String collectionname,List&lt;Document&gt; documents)</span></span><br><span class="line">    &#123;</span><br><span class="line">    	MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(collectionname);</span><br><span class="line">    	collection.insertMany(documents);</span><br><span class="line">    	System.out.println(<span class="string">&quot;Insert documents Success!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">(MongoDatabase mongoDatabase,String collectionname)</span></span><br><span class="line">    &#123;</span><br><span class="line">    	MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(collectionname);</span><br><span class="line">    	FindIterable&lt;Document&gt; findIterable = collection.find();</span><br><span class="line">    	MongoCursor&lt;Document&gt; cursor = findIterable.iterator();</span><br><span class="line">    	<span class="keyword">while</span> (cursor.hasNext()) </span><br><span class="line">    	&#123;</span><br><span class="line">    		System.out.println(cursor.next());</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">find</span><span class="params">(MongoDatabase mongoDatabase,String collectionname,String key,String value)</span></span><br><span class="line">    &#123;</span><br><span class="line">    	MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(collectionname);</span><br><span class="line">    	<span class="type">Bson</span> <span class="variable">filter</span> <span class="operator">=</span> Filters.eq(key, value);</span><br><span class="line">    	FindIterable&lt;Document&gt; findIterable = collection.find(filter);</span><br><span class="line">    	MongoCursor&lt;Document&gt; cursor = findIterable.iterator();</span><br><span class="line">    	<span class="keyword">while</span> (cursor.hasNext()) </span><br><span class="line">    	&#123;</span><br><span class="line">    		System.out.println(cursor.next());</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FindIterable&lt;Document&gt; <span class="title function_">findReturn</span><span class="params">(MongoDatabase mongoDatabase,String collectionname,String key,String value)</span></span><br><span class="line">    &#123;</span><br><span class="line">    	MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(collectionname);</span><br><span class="line">    	<span class="type">Bson</span> <span class="variable">filter</span> <span class="operator">=</span> Filters.eq(key, value);</span><br><span class="line">    	FindIterable&lt;Document&gt; findIterable = collection.find(filter);</span><br><span class="line">    	<span class="keyword">return</span> findIterable;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">mongo_insert</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">mongo_insert</span>(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line"><span class="comment">//		Document document = new Document(&quot;name&quot;,&quot;scofield&quot;);</span></span><br><span class="line"><span class="comment">//		Document value = new Document(&quot;English&quot;, &quot;45&quot;);</span></span><br><span class="line"><span class="comment">//		value.append(&quot;Math&quot;, 89);</span></span><br><span class="line"><span class="comment">//		value.append(&quot;Computer&quot;, &quot;100&quot;);</span></span><br><span class="line"><span class="comment">//		document.append(&quot;score&quot;, value);</span></span><br><span class="line"><span class="comment">//		insertOne(m.mongoDatabase, &quot;Student&quot;, document);</span></span><br><span class="line"><span class="comment">//		findAll(m.mongoDatabase, &quot;Student&quot;);</span></span><br><span class="line">		FindIterable&lt;Document&gt; re = findReturn(m.mongoDatabase, <span class="string">&quot;Student&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;scofield&quot;</span>);</span><br><span class="line">		<span class="type">Document</span> <span class="variable">results</span> <span class="operator">=</span> re.first();</span><br><span class="line">		System.out.println(results.get(<span class="string">&quot;score&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image038.jpg" alt="img"></p>
<p>（2）获取 scofield 的所有成绩成绩信息(只显示 score 列)</p>
<p>JAVA代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCursor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mongo_query</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">​    MongoClient mongoClient=<span class="keyword">new</span> <span class="title class_">MongoClient</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">27017</span>);</span><br><span class="line">​    <span class="type">MongoDatabase</span> <span class="variable">mongoDatabase</span> <span class="operator">=</span> mongoClient.getDatabase(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">​    MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">​    MongoCursor&lt;Document&gt; cursor=collection.find( <span class="keyword">new</span> <span class="title class_">Document</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;scofield&quot;</span>)).</span><br><span class="line">​        projection(<span class="keyword">new</span> <span class="title class_">Document</span>(<span class="string">&quot;score&quot;</span>,<span class="number">1</span>).append(<span class="string">&quot;_id&quot;</span>, <span class="number">0</span>)).iterator();</span><br><span class="line">​    <span class="keyword">while</span>(cursor.hasNext())</span><br><span class="line">​      System.out.println(cursor.next().toJson());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image040.jpg" alt="img"></p>
<h1 id="4-实验总结"><a href="#4-实验总结" class="headerlink" title="4.实验总结"></a>4.实验总结</h1><p><strong>（<strong><strong>1</strong></strong>）实验完成情况</strong></p>
<p>实验完成率：100%</p>
<p><strong>（<strong><strong>2</strong></strong>）出现的问题与解决方案</strong></p>
<p>问题1： 使用 MySQL 的 JAVA 客户端编程时出现The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received的错误。</p>
<p>解决： 在MySQL的配置文件下&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf，取消端口3306的注释，错误得以解决</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image042.jpg" alt="img"></p>
<p>问题2：用 Redis 的 JAVA 客户端编程(jedis)时报错</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image044.jpg" alt="img"></p>
<p>解决：我发现我导入的jedis里面需要gson的jar包。可能是我本地没有这个jar包导致的。所以，我换了一个低版本的jedis的jar包，里面不需要gson的jar包。我换了一个2.9.0版本的jedis包，然后程序就运行成功了<img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment4/clip_image046.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>大数据技术原理与应用</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据技术原理与应用实验3熟悉常用的HBase操作</title>
    <url>/2023/04/05/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C3%E7%86%9F%E6%82%89%E5%B8%B8%E7%94%A8%E7%9A%84HBase%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="实验3-熟悉常用的HBase操作"><a href="#实验3-熟悉常用的HBase操作" class="headerlink" title="实验3 熟悉常用的HBase操作"></a>实验3 熟悉常用的HBase操作</h1><h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1.  实验目的"></a>1.  实验目的</h1><p>（1） 理解 HBase 在 Hadoop 体系结构中的角色；<br> （2） 熟练使用 HBase 操作常用的 Shell 命令；<br> （3） 熟悉 HBase 操作常用的 Java API。</p>
<h1 id="2-实验平台"><a href="#2-实验平台" class="headerlink" title="2.实验平台"></a>2.实验平台</h1><p>（1） 操作系统： Linux（Ubuntu-22.04.2-desktop-amd64）；</p>
<p>（2） Hadoop 版本： 3.1.3；</p>
<p>（3） HBase版本：</p>
<p>（4） JDK 版本： 1.8；</p>
<p>（5） Java IDE： Eclipse。 </p>
<h1 id="3-实验步骤与结果"><a href="#3-实验步骤与结果" class="headerlink" title="3.实验步骤与结果"></a>3.实验步骤与结果</h1><p>（一）编程实现以下指定功能，并用 Hadoop 提供的 HBase Shell 命令完成相同任务：<br>     （1） 列出 HBase 所有的表的相关信息，例如表名；</p>
<p>运行结果+Java代码：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image001.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Admin admin;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">* 建立连接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">configuration = HBaseConfiguration.create();</span><br><span class="line">configuration.set(<span class="string">&quot;hbase.rootdir&quot;</span>, <span class="string">&quot;hdfs://localhost:9000/hbase&quot;</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">admin = connection.getAdmin();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(admin != <span class="literal">null</span>)&#123;</span><br><span class="line">admin.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">null</span> != connection)&#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 查看已有表</span></span><br><span class="line"><span class="comment">* @throws IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listTables</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">HTableDescriptor hTableDescriptors [] = admin.listTables();</span><br><span class="line"><span class="keyword">for</span>(HTableDescriptor hTableDescriptor : hTableDescriptors)&#123;</span><br><span class="line">System.out.println(hTableDescriptor.getNameAsString());</span><br><span class="line">&#125;</span><br><span class="line">close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">test1</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">test1</span>();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;以下为Hbase数据库中所存的表信息&quot;</span>);</span><br><span class="line">t.listTables();</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>HBase Shell 命令：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image002.png" alt="img"></p>
<p>​     （2） 在终端打印出指定的表的所有记录数据；</p>
<p>运行结果+Java代码:</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image004.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image006.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Admin admin;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">configuration = HBaseConfiguration.create();</span><br><span class="line"></span><br><span class="line">configuration.set(<span class="string">&quot;hbase.rootdir&quot;</span>,<span class="string">&quot;hdfs://localhost:9000/hbase&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line"></span><br><span class="line">admin = connection.getAdmin();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(admin != <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">admin.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">null</span> != connection)&#123;</span><br><span class="line"></span><br><span class="line">connection.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 根据表名查找表信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(String tableName)</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ResultScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> table.getScanner(scan);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Result result:scanner)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">showCell((result));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 格式化输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showCell</span><span class="params">(Result result)</span>&#123;</span><br><span class="line"></span><br><span class="line">Cell[] cells = result.rawCells();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Cell cell:cells)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;RowName(行键):&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneRow(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Timetamp(时间戳):&quot;</span>+cell.getTimestamp()+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;column Family（列簇）:&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneFamily(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;column Name（列名）:&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneQualifier(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;value:（值）&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneValue(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="type">Test_2</span> <span class="variable">t</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Test_2</span>();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要查看的表名&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">String tableName=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;信息如下：&quot;</span>);</span><br><span class="line"></span><br><span class="line">t.getData(tableName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>HBase Shell 命令：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image008.png" alt="img"></p>
<pre><code> （3） 向已经创建好的表添加和删除指定的列族或列；
</code></pre>
<p>运行结果+Java代码：</p>
<p>添加：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image010.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image012.png" alt="img"></p>
<p>删除：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image014.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image016.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.Cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.CellUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Delete;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Put;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ResultScanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Scan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_3</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Admin admin;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">configuration = HBaseConfiguration.create();</span><br><span class="line"></span><br><span class="line">configuration.set(<span class="string">&quot;hbase.rootdir&quot;</span>,<span class="string">&quot;hdfs://localhost:9000/hbase&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line"></span><br><span class="line">admin = connection.getAdmin();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(admin != <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">admin.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">null</span> != connection)&#123;</span><br><span class="line"></span><br><span class="line">connection.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 向某一行的某一列插入数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> rowKey 行键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> colFamily 列族名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> col 列名（如果其列族下没有子列，此参数可为空）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> val 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertRow</span><span class="params">(String tableName,String rowKey,String</span></span><br><span class="line"><span class="params">colFamily,String col,String val)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Put</span> <span class="variable">put</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Put</span>(rowKey.getBytes());</span><br><span class="line"></span><br><span class="line">put.addColumn(colFamily.getBytes(), col.getBytes(), val.getBytes());</span><br><span class="line"></span><br><span class="line">table.put(put);</span><br><span class="line"></span><br><span class="line">table.close();</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 根据表名查找表信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(String tableName)</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ResultScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> table.getScanner(scan);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Result result:scanner)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">showCell((result));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 格式化输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showCell</span><span class="params">(Result result)</span>&#123;</span><br><span class="line"></span><br><span class="line">Cell[] cells = result.rawCells();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Cell cell:cells)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;RowName(行键):&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneRow(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Timetamp(时间戳):&quot;</span>+cell.getTimestamp()+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;column Family（列簇）:&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneFamily(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;column Name（列名）:&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneQualifier(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;value:（值）&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneValue(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 删除数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> rowKey 行键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> colFamily 列族名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> col 列名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteRow</span><span class="params">(String tableName,String rowKey,String</span></span><br><span class="line"><span class="params">colFamily,String col)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Delete</span> <span class="variable">delete</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Delete</span>(rowKey.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag2</span> <span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(flag2)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的选择 1-删除列族的所有数据2-指定列的数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">chooseString</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (chooseString) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定列族的所有数据</span></span><br><span class="line"></span><br><span class="line">delete.addFamily(colFamily.getBytes());</span><br><span class="line"></span><br><span class="line">table.delete(delete);</span><br><span class="line"></span><br><span class="line">table.close();</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定列的数据</span></span><br><span class="line"></span><br><span class="line">delete.addColumn(colFamily.getBytes(), col.getBytes());</span><br><span class="line"></span><br><span class="line">table.delete(delete);</span><br><span class="line"></span><br><span class="line">table.close();</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; 你的输入有误 ！！！ &quot;</span>);</span><br><span class="line"></span><br><span class="line">table.close();</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; 你要继续操作吗？ 是-true 否-false &quot;</span>);</span><br><span class="line"></span><br><span class="line">flag2=scanner.nextBoolean();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="type">Test_3</span> <span class="variable">t</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Test_3</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(flag)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;------------向已经创建好的表中添加和删除指定的列簇或列--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; 请输入您要进行的操作 1- 添加 2-删除 &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">String choose1=scan.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (choose1) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要添加的表名&quot;</span>);</span><br><span class="line"></span><br><span class="line">String tableName=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要添加的表的行键&quot;</span>);</span><br><span class="line"></span><br><span class="line">String rowKey=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要添加的表的列簇&quot;</span>);</span><br><span class="line"></span><br><span class="line">String colFamily=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要添加的表的列名&quot;</span>);</span><br><span class="line"></span><br><span class="line">String col=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要添加的值&quot;</span>);</span><br><span class="line"></span><br><span class="line">String val=scan.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">t.insertRow(tableName, rowKey, colFamily, col, val);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;插入成功：&quot;</span>);</span><br><span class="line"></span><br><span class="line">t.getData(tableName);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line"></span><br><span class="line">e.getMessage();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要删除的表名&quot;</span>);</span><br><span class="line"></span><br><span class="line">String tableName=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要删除的表的行键&quot;</span>);</span><br><span class="line"></span><br><span class="line">String rowKey=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要删除的表的列簇&quot;</span>);</span><br><span class="line"></span><br><span class="line">String colFamily=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要删除的表的列名&quot;</span>);</span><br><span class="line"></span><br><span class="line">String col=scan.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;----------------------表的原本信息如下---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">t.getData(tableName);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;____________________________正在执行删除操作…\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">t.deleteRow(tableName, rowKey, colFamily, col);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;____________________________删除成功_______________\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------删除后表的信息如下---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">t.getData(tableName);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line"></span><br><span class="line">e.getMessage();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; 你的操作有误 ！！！ &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; 你要继续操作吗？ 是-true 否-false &quot;</span>);</span><br><span class="line"></span><br><span class="line">flag=scan.nextBoolean();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; 程序已退出！ &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>HBase Shell 命令：</p>
<p>添加：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image018.png" alt="img"></p>
<p>删除：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image019.png" alt="img"><br>     （4） 清空指定的表的所有记录数据；</p>
<p>运行结果+Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.Cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.CellUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HColumnDescriptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HTableDescriptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.HBaseAdmin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ResultScanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Scan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_4</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Admin admin;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">configuration = HBaseConfiguration.create();</span><br><span class="line"></span><br><span class="line">configuration.set(<span class="string">&quot;hbase.rootdir&quot;</span>,<span class="string">&quot;hdfs://localhost:9000/hbase&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line"></span><br><span class="line">admin = connection.getAdmin();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(admin != <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">admin.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">null</span> != connection)&#123;</span><br><span class="line"></span><br><span class="line">connection.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 清空制定的表的所有记录数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clearRows</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// HBaseAdmin admin1=new HBaseAdmin(configuration);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HTableDescriptor tDescriptor=admin1.getTableDescriptor(Bytes.toBytes(tableName));</span></span><br><span class="line"><span class="comment">//读取了之前表的表名列簇等信息，然后再进行删除操作。总思想是先将原表结构保留下来，然后进行删除，再重新依据保存的信息重新创建表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//备份表列族名</span></span><br><span class="line"></span><br><span class="line">TableName tablename=TableName.valueOf(tableName);</span><br><span class="line"></span><br><span class="line"><span class="type">HTableDescriptor</span> <span class="variable">tDescriptor</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">HTableDescriptor</span>(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ResultScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> table.getScanner(scan);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; cloFamily = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Result result:scanner)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Cell[] cells = result.rawCells();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Cell cell:cells)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// System.out.println(&quot;column Family（列簇）:&quot;+newString(CellUtil.cloneFamily(cell))+&quot; &quot;);</span></span><br><span class="line"></span><br><span class="line">cloFamily.add(<span class="keyword">new</span> <span class="title class_">String</span>(CellUtil.cloneFamily(cell)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除表</span></span><br><span class="line"></span><br><span class="line">admin.disableTable(tablename);</span><br><span class="line"></span><br><span class="line">admin.deleteTable(tablename);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新建表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HTableDescriptor tDescriptor = new</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HTableDescriptor(TableName.valueOf(tableName));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tDescriptor.addFamily(new HColumnDescriptor(&quot;name&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(String cf : cloFamily)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">tDescriptor.addFamily(<span class="keyword">new</span> <span class="title class_">HColumnDescriptor</span>(cf));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">admin.createTable(tDescriptor);</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 根据表名查找表信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(String tableName)</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ResultScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> table.getScanner(scan);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Result result:scanner)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">showCell((result));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 格式化输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showCell</span><span class="params">(Result result)</span>&#123;</span><br><span class="line"></span><br><span class="line">Cell[] cells = result.rawCells();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Cell cell:cells)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;RowName(行键):&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneRow(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Timetamp(时间戳):&quot;</span>+cell.getTimestamp()+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;column Family（列簇）:&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneFamily(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;column Name（列名）:&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneQualifier(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;value:（值）&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneValue(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">Test_4 test_4=<span class="keyword">new</span> <span class="title class_">Test_4</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要清空的表名&quot;</span>);</span><br><span class="line"></span><br><span class="line">String tableName=scan.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;表原来的信息：&quot;</span>);</span><br><span class="line"></span><br><span class="line">test_4.getData(tableName);</span><br><span class="line"></span><br><span class="line">test_4.clearRows(tableName);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;表已清空：&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>HBase Shell 命令：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image021.png" alt="img">    （5） 统计表的行数。</p>
<p>运行结果+Java代码：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image022.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image023.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ResultScanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Scan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_5</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Admin admin;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">configuration = HBaseConfiguration.create();</span><br><span class="line"></span><br><span class="line">configuration.set(<span class="string">&quot;hbase.rootdir&quot;</span>,<span class="string">&quot;hdfs://localhost:9000/hbase&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line"></span><br><span class="line">admin = connection.getAdmin();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(admin != <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">admin.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">null</span> != connection)&#123;</span><br><span class="line"></span><br><span class="line">connection.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countRows</span> <span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ResultScanner</span> <span class="variable">scanner</span> <span class="operator">=</span>table.getScanner(scan);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> scanner.next();result!=<span class="literal">null</span>;result=scanner.next())</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;行数：&quot;</span>+num);</span><br><span class="line"></span><br><span class="line">scanner.close();</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">Test_5 test_5=<span class="keyword">new</span> <span class="title class_">Test_5</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要统计行数的表名&quot;</span>);</span><br><span class="line"></span><br><span class="line">String tableName=scan.nextLine();</span><br><span class="line"></span><br><span class="line">test_5.countRows(tableName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HBase Shell 命令：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image025.png" alt="img"></p>
<p>（二） HBase 数据库操作</p>
<p>\1. 现有以下关系型数据库中的表和数据（见表14-3到表14-5），要求将其转换为适合于HBase 存储的表并插入数据：</p>
<p>表14-3学生表（Student）</p>
<table>
<thead>
<tr>
<th>学号（S_No）</th>
<th>姓名（S_Name）</th>
<th>性别（S_Sex）</th>
<th>年龄（S_Age）</th>
</tr>
</thead>
<tbody><tr>
<td>2015001</td>
<td>Zhangsan</td>
<td>male</td>
<td>23</td>
</tr>
<tr>
<td>2015002</td>
<td>Mary</td>
<td>female</td>
<td>22</td>
</tr>
<tr>
<td>2015003</td>
<td>Lisi</td>
<td>male</td>
<td>24</td>
</tr>
</tbody></table>
<p>表14-4课程表（Course）</p>
<table>
<thead>
<tr>
<th>课程号（C_No）</th>
<th>课程名（C_Name）</th>
<th>学分（C_Credit）</th>
</tr>
</thead>
<tbody><tr>
<td>123001</td>
<td>Math</td>
<td>2.0</td>
</tr>
<tr>
<td>123002</td>
<td>Computer Science</td>
<td>5.0</td>
</tr>
<tr>
<td>123003</td>
<td>English</td>
<td>3.0</td>
</tr>
</tbody></table>
<p>表14-5选课表（SC）</p>
<table>
<thead>
<tr>
<th>学号（SC_Sno）</th>
<th>课程号（SC_Cno）</th>
<th>成绩（SC_Score）</th>
</tr>
</thead>
<tbody><tr>
<td>2015001</td>
<td>123001</td>
<td>86</td>
</tr>
<tr>
<td>2015001</td>
<td>123003</td>
<td>69</td>
</tr>
<tr>
<td>2015002</td>
<td>123002</td>
<td>77</td>
</tr>
<tr>
<td>2015002</td>
<td>123003</td>
<td>99</td>
</tr>
<tr>
<td>2015003</td>
<td>123001</td>
<td>98</td>
</tr>
<tr>
<td>2015003</td>
<td>123002</td>
<td>95</td>
</tr>
</tbody></table>
<p>学生表：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image027.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image029.png" alt="img"></p>
<p>课程表</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image031.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image033.png" alt="img"></p>
<p>选课表：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image034.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image035.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image037.png" alt="img"></p>
<p>\2. 请编程实现以下功能：</p>
<p>​    （1）createTable(String tableName, String[] fields)</p>
<p>​    创建表，参数tableName为表的名称，字符串数组fields为存储记录各个字段名称的数组。要求当 HBase 已经存在名为 tableName 的表的时候，先删除原有的表，然后再创建新的表。</p>
<p>​    （2）addRecord(String tableName, String row, String[] fields, String[] values)<br>​     向表tableName、行row（用S_Name表示）和字符串数组fields指定的单元格中添加对应的数据values。其中，fields中每个元素如果对应的列族下还有相应的列限定符的话，用“columnFamily:column”表示。例如，同时向“Math”、“Computer Science”、“English”三列添加成绩时，字符串数组fields为{“Score:Math”,”Score:Computer Science”, ”Score:English”}，数组 values 存储这三门课的成绩。</p>
<p>​    （3）scanColumn(String tableName, String column)</p>
<p>​    浏览表tableName某一列的数据，如果某一行记录中该列数据不存在，则返回null。要求当参数column为某一列族名称时，如果底下有若干个列限定符，则要列出每个列限定符代表的列的数据；当参数column为某一列具体名称（例如“Score:Math”）时，只需要列出该列的数据。<br>​     （4）modifyData(String tableName, String row, String column)</p>
<p>​       修改表tableName，行row（可以用学生姓名S_Name表示），列column指定的单元格的数据。</p>
<p>​       （5）deleteRow(String tableName, String row)</p>
<p>​       删除表tableName中row指定的行的记录。</p>
<p>JAVA代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.Cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.CellUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HColumnDescriptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HTableDescriptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Delete;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Put;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ResultScanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Scan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_Two</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Admin admin;</span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">configuration = HBaseConfiguration.create();</span><br><span class="line">configuration.set(<span class="string">&quot;hbase.rootdir&quot;</span>,<span class="string">&quot;hdfs://localhost:9000/hbase&quot;</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">admin = connection.getAdmin();</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(admin != <span class="literal">null</span>)&#123;</span><br><span class="line">admin.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">null</span> != connection)&#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*jian表。参数tableName为表的名称，字符串数组fields为存储记录各个域名称的数组。</span></span><br><span class="line"><span class="comment">* 要求当HBase已经存在名为tableName的表时，先删除原有的表，然后再</span></span><br><span class="line"><span class="comment">* 创建新的表 field：列族</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> myTableName 表名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> colFamily 列族名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createTable</span><span class="params">(String tableName,String[] fields)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">init();</span><br><span class="line"><span class="type">TableName</span> <span class="variable">tablename</span> <span class="operator">=</span> TableName.valueOf(tableName);</span><br><span class="line"><span class="keyword">if</span>(admin.tableExists(tablename))&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;表已存在，将执行删除原表，重建新表!&quot;</span>);</span><br><span class="line">admin.disableTable(tablename);</span><br><span class="line">admin.deleteTable(tablename);<span class="comment">//删除原来的表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HTableDescriptor hTableDescriptor = new HTableDescriptor(tableName);</span></span><br><span class="line"><span class="type">HTableDescriptor</span> <span class="variable">hTableDescriptor</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">HTableDescriptor</span>(TableName.valueOf(tableName));</span><br><span class="line"><span class="keyword">for</span>(String str:fields)&#123;</span><br><span class="line"><span class="type">HColumnDescriptor</span> <span class="variable">hColumnDescriptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HColumnDescriptor</span>(str);</span><br><span class="line"></span><br><span class="line">hTableDescriptor.addFamily(hColumnDescriptor);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">admin.createTable(hTableDescriptor);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;表已创建成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 向表 tableName、行 row（用 S_Name 表示）和字符串数组 fields</span></span><br><span class="line"><span class="comment">指定的单元格中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 添加对应的数据 values。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 其中，fields 中每个元素如果对应的列族下还有相应的列限定符的话，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 用&quot;columnFamily:column&quot;表示。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 例如，同时向&quot;Math&quot;、&quot;Computer Science&quot;、&quot;English&quot;三列添加成绩时，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 字符串数组 fields 为&#123;&quot;Score:Math&quot;, &quot;Score:Computer Science&quot;,</span></span><br><span class="line"><span class="comment">&quot;Score:English&quot;&#125;，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 数组values 存储这三门课的成绩。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addRecord</span><span class="params">(String tableName,String rowKey,String</span></span><br><span class="line"><span class="params">[]fields,String [] values)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Put</span> <span class="variable">put</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Put</span>(rowKey.getBytes());</span><br><span class="line"></span><br><span class="line">String [] cols = fields[i].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cols.length==<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">put.addColumn(cols[<span class="number">0</span>].getBytes(), <span class="string">&quot;&quot;</span>.getBytes(),</span><br><span class="line">values[i].getBytes());<span class="comment">//因为当输入的是单列族，split仅读出一个字符字符串，即cols仅有一个元素</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">put.addColumn(cols[<span class="number">0</span>].getBytes(), cols[<span class="number">1</span>].getBytes(),</span><br><span class="line">values[i].getBytes());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table.put(put);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table.close();</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 根据表名查找表信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(String tableName)</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ResultScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> table.getScanner(scan);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Result result:scanner)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">showCell((result));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 格式化输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showCell</span><span class="params">(Result result)</span>&#123;</span><br><span class="line"></span><br><span class="line">Cell[] cells = result.rawCells();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Cell cell:cells)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;RowName(行键):&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneRow(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Timetamp(时间戳):&quot;</span>+cell.getTimestamp()+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;column Family（列簇）:&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneFamily(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;column Name（列名）:&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneQualifier(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;value:（值）&quot;</span>+<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>(CellUtil.cloneValue(cell))+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 浏览表 tableName 某一列的数据，如果某一行记录中该列数据不存在，则返回</span></span><br><span class="line"><span class="comment">null。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 要求当参数 column</span></span><br><span class="line"><span class="comment">为某一列族名称时，如果底下有若干个列限定符，则要列出每个列限定符代表的列的数据；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 当参数 column</span></span><br><span class="line"><span class="comment">为某一列具体名称（例如&quot;Score:Math&quot;）时，只需要列出该列的数据。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> column</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">scanColumn</span> <span class="params">(String tableName,String column)</span> <span class="keyword">throws</span></span><br><span class="line">IOException</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line"></span><br><span class="line">String [] cols = column.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cols.length==<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">scan.addFamily(Bytes.toBytes(column));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">scan.addColumn(Bytes.toBytes(cols[<span class="number">0</span>]),Bytes.toBytes(cols[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ResultScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> table.getScanner(scan);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> scanner.next(); result !=<span class="literal">null</span>;result =</span><br><span class="line">scanner.next()) &#123;</span><br><span class="line"></span><br><span class="line">showCell(result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table.close();</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 修改表 tableName，行 row（可以用学生姓名 S_Name 表示），列 column</span></span><br><span class="line"><span class="comment">指定的单元格的数据。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modifyData</span><span class="params">(String tableName,String rowKey,String</span></span><br><span class="line"><span class="params">column,String value)</span> <span class="keyword">throws</span> IOException</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Put</span> <span class="variable">put</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Put</span>(rowKey.getBytes());</span><br><span class="line"></span><br><span class="line">String [] cols = column.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cols.length==<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">put.addColumn(column.getBytes(),<span class="string">&quot;&quot;</span>.getBytes() ,</span><br><span class="line">value.getBytes());<span class="comment">//qualifier:列族下的列名</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">put.addColumn(cols[<span class="number">0</span>].getBytes(),cols[<span class="number">1</span>].getBytes() ,</span><br><span class="line">value.getBytes());<span class="comment">//qualifier:列族下的列名</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table.put(put);</span><br><span class="line"></span><br><span class="line">table.close();</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 删除表 tableName 中 row 指定的行的记录。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteRow</span><span class="params">(String tableName,String rowKey)</span> <span class="keyword">throws</span></span><br><span class="line">IOException</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line"><span class="type">Delete</span> <span class="variable">delete</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Delete</span>(rowKey.getBytes());</span><br><span class="line"></span><br><span class="line">table.delete(delete);</span><br><span class="line"></span><br><span class="line">table.close();</span><br><span class="line"></span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="type">Test_Two</span> <span class="variable">test_Two</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test_Two</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(flag)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------------------------提供以下功能----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; 1- createTable（创建表 ,提供表名、列族名） &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; 2- addRecord （向已知表名、行键、列簇的表添加值）&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; 3- ScanColumn（浏览表 某一列的数据） &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; 4- modifyData（修改某表某行，某一列，指定的单元格的数据） &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; 5- deleteRow（删除 某表 某行的记录） &quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">String choose1=scan.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (choose1) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要创建的表名&quot;</span>);</span><br><span class="line"></span><br><span class="line">String tableName=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要创建的表的列族个数&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Num=scan.nextInt();</span><br><span class="line"></span><br><span class="line">String [] fields = <span class="keyword">new</span> <span class="title class_">String</span>[Num];</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要创建的表的列族&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Scanner scanner = new Scanner(System.in); scanner.next</span></span><br><span class="line"><span class="comment">如不是全局，即会记得上一次输出。相同地址读入值时*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; fields.length;i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*BufferedReader in = new BufferedReader(new</span></span><br><span class="line"><span class="comment">InputStreamReader(System.in));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">fields[i] = in.readLine();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*fields[i]=scan.next(); 因为之前没有输入过，所以可以读入新值*/</span></span><br><span class="line"></span><br><span class="line">scan = <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">fields[i]=scan.nextLine();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;正在执行创建表的操作&quot;</span>);</span><br><span class="line"></span><br><span class="line">test_Two.createTable(tableName,fields);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要添加数据的表名&quot;</span>);</span><br><span class="line"></span><br><span class="line">String tableName=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要添加数据的表的行键&quot;</span>);</span><br><span class="line"></span><br><span class="line">String rowKey=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要添加数据的表的列的个数&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span>scan.nextInt();</span><br><span class="line"></span><br><span class="line">String fields[]=<span class="keyword">new</span> <span class="title class_">String</span>[num];</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要添加数据的表的列信息 共&quot;</span>+num+<span class="string">&quot;条信息&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; fields.length;i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">BufferedReader in3= <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"></span><br><span class="line">fields[i] = in3.readLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*fields[i]=scan.next(); 因为之前没有输入过，所以可以读入新值*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要添加的数据信息 共&quot;</span>+num+<span class="string">&quot;条信息&quot;</span>);</span><br><span class="line"></span><br><span class="line">String values[]=<span class="keyword">new</span> <span class="title class_">String</span>[num];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; values.length;i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">in2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"></span><br><span class="line">values[i] = in2.readLine();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;原表信息&quot;</span>);</span><br><span class="line"></span><br><span class="line">test_Two.getData(tableName);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;正在执行向表中添加数据的操作…\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">test_Two.addRecord(tableName, rowKey, fields, values);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;\n添加后的表的信息…&quot;</span>);</span><br><span class="line"></span><br><span class="line">test_Two.getData(tableName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要查看数据的表名&quot;</span>);</span><br><span class="line"></span><br><span class="line">String tableName=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要查看数据的列名&quot;</span>);</span><br><span class="line"></span><br><span class="line">String column=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;查看的信息如下：…\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">test_Two.scanColumn(tableName, column);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要修改数据的表名&quot;</span>);</span><br><span class="line"></span><br><span class="line">String tableName=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要修改数据的表的行键&quot;</span>);</span><br><span class="line"></span><br><span class="line">String rowKey=scan.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入要修改数据的列名&quot;</span>);</span><br><span class="line">String column=scan.nextLine();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入要修改的数据信息 &quot;</span>);</span><br><span class="line">String value=scan.nextLine();</span><br><span class="line">System.out.println(<span class="string">&quot;原表信息如下：…\n&quot;</span>);</span><br><span class="line">test_Two.getData(tableName);</span><br><span class="line">System.out.println(<span class="string">&quot;正在执行向表中修改数据的操作…\n&quot;</span>);</span><br><span class="line">test_Two.modifyData(tableName, rowKey, column, value);</span><br><span class="line">System.out.println(<span class="string">&quot;\n修改后的信息如下：…\n&quot;</span>);</span><br><span class="line">test_Two.getData(tableName);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;5&quot;</span>:</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入要删除指定行的表名&quot;</span>);</span><br><span class="line">String tableName=scan.nextLine();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入要删除指定行的行键&quot;</span>);</span><br><span class="line">String rowKey=scan.nextLine();</span><br><span class="line">System.out.println(<span class="string">&quot;原表信息如下：…\n&quot;</span>);</span><br><span class="line">test_Two.getData(tableName);</span><br><span class="line">System.out.println(<span class="string">&quot;正在执行向表中删除数据的操作…\n&quot;</span>);</span><br><span class="line">test_Two.deleteRow(tableName, rowKey);</span><br><span class="line">System.out.println(<span class="string">&quot;\n删除后的信息如下：…\n&quot;</span>);</span><br><span class="line">test_Two.getData(tableName);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot; 你的操作有误 ！！！ &quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot; 你要继续操作吗？ 是-true 否-false &quot;</span>);</span><br><span class="line">flag=scan.nextBoolean();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot; 程序已退出！ &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（1）   createTable(String tableName, String[] fields)</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image039.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image041.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image042.png" alt="img"></p>
<p>（2）   addRecord(String tableName, String row, String[] fields, String[] values)</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image043.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image044.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image045.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image047.png" alt="img"></p>
<p>（3）   scanColumn(String tableName, String column)</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image049.png" alt="img"></p>
<p>（4）   modifyData(String tableName, String row, String column)</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image051.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image053.png" alt="img"></p>
<p>（5）deleteRow(String tableName, String row)</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image055.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image057.png" alt="img"></p>
<h1 id="4-实验总结"><a href="#4-实验总结" class="headerlink" title="4.实验总结"></a>4.实验总结</h1><p><strong>（<strong><strong>1</strong></strong>）实验完成情况</strong></p>
<p>实验完成率：100%</p>
<p><strong>（<strong><strong>2</strong></strong>）出现的问题与解决方案</strong></p>
<p>问题1： 对于HBase数据库操作不熟悉</p>
<p>解决：查阅<a href="http://dblab.xmu.edu.cn/blog/2442-2/">http://dblab.xmu.edu.cn/blog/2442-2/</a> 发现HBase操作与SQL语言相比还是有较大的不同，但是命令都比较简单易懂，容易学习</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image059.jpg" alt="img"></p>
<p>问题2：在运行示例程序时一直出现如下图所示的错误，无法正确创建表和插入数据</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment3/clip_image061.jpg" alt="img"></p>
<p>解决： 重启hbase后得以正常运行</p>
<p>问题2：java清空数据表代码报错：</p>
<p>Table should have at least one column family. Set</p>
<p>hbase.table.sanity.checks to false at conf or table descriptor if you</p>
<p>want to bypass sanity checks</p>
<p>解决方法： 创建Hbase数据表时至少要有一个列族名，而清空数据表的java代码其实是删除了整个数据表再重新建一个有着原表列族名的空表，因此清空的前提是要清空的数据表中含有包括一个列的数据，此时只要先在原数据空中加入一个数据再执行清空数据库的代码即可。</p>
]]></content>
      <categories>
        <category>大数据技术原理与应用</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据技术原理与应用实验2熟悉常用的HDFS操作</title>
    <url>/2023/04/05/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C2%E7%86%9F%E6%82%89%E5%B8%B8%E7%94%A8%E7%9A%84HDFS%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="实验2-熟悉常用的-HDFS-操作"><a href="#实验2-熟悉常用的-HDFS-操作" class="headerlink" title="实验2 熟悉常用的 HDFS 操作"></a>实验2 熟悉常用的 HDFS 操作</h1><h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1.实验目的"></a>1.实验目的</h1><p>（1） 理解 HDFS 在 Hadoop 体系结构中的角色；</p>
<p>（2） 熟练使用 HDFS 操作常用的 Shell 命令；</p>
<p>（3） 熟悉 HDFS 操作常用的 Java API。 </p>
<h1 id="2-实验平台"><a href="#2-实验平台" class="headerlink" title="2.实验平台"></a>2.实验平台</h1><p>（1） 操作系统： Linux（Ubuntu-22.04.2-desktop-amd64）；</p>
<p>（2） Hadoop 版本： 3.1.3；</p>
<p>（3） JDK 版本： 1.8；</p>
<p>（4） Java IDE： Eclipse。 </p>
<h1 id="3-实验步骤与结果"><a href="#3-实验步骤与结果" class="headerlink" title="3.实验步骤与结果"></a>3.实验步骤与结果</h1><p>（一）编程实现以下功能，并利用 Hadoop 提供的 Shell 命令完成相同任务：</p>
<p>（1） 向 HDFS 中上传任意文本文件，如果指定的文件在 HDFS 中已经存在，则由用户来指定是追加到原有文件末尾还是覆盖原有的文件；</p>
<p><strong>Shell:</strong></p>
<p>上传：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image002.png" alt="img"></p>
<p>若已存在——追加：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image004.png" alt="img"></p>
<p>若已存在——覆盖：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image006.png" alt="img"></p>
<p><strong>Java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//import org.apache.commons.configuration2.Configuration;</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSApi</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断路径是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Configuration conf, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="keyword">return</span> fs.exists(<span class="keyword">new</span> <span class="title class_">Path</span>(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制文件到指定路径</span></span><br><span class="line"><span class="comment">     * 若路径已存在，则进行覆盖</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFromLocalFile</span><span class="params">(Configuration conf, String localFilePath, String remoteFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">localPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(localFilePath);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="comment">/* fs.copyFromLocalFile 第一个参数表示是否删除源文件，第二个参数表示是否覆盖 */</span></span><br><span class="line">        fs.copyFromLocalFile(<span class="literal">false</span>, <span class="literal">true</span>, localPath, remotePath);</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 追加文件内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">appendToFile</span><span class="params">(Configuration conf, String localFilePath, String remoteFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="comment">/* 创建一个文件读入流 */</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(localFilePath);</span><br><span class="line">        <span class="comment">/* 创建一个文件输出流，输出的内容将追加到文件末尾 */</span></span><br><span class="line">        <span class="type">FSDataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> fs.append(remotePath);</span><br><span class="line">        <span class="comment">/* 读写文件内容 */</span></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ( (read = in.read(data)) &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">            out.write(data, <span class="number">0</span>, read);</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">        <span class="comment">//String localFilePath = &quot;/home/hadoop/text.txt&quot;;    // 本地路径</span></span><br><span class="line">        <span class="comment">//String remoteFilePath = &quot;/user/hadoop/text.txt&quot;;    // HDFS路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">localFilePath</span> <span class="operator">=</span> <span class="string">&quot;/usr/local/hadoop/1.txt&quot;</span>;    <span class="comment">// 本地路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteFilePath</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;    <span class="comment">// HDFS路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> <span class="string">&quot;append&quot;</span>;    <span class="comment">// 若文件存在则追加到文件末尾</span></span><br><span class="line"><span class="comment">//    String choice = &quot;overwrite&quot;;    // 若文件存在则覆盖</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* 判断文件是否存在 */</span></span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">fileExists</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (HDFSApi.test(conf, remoteFilePath)) &#123;</span><br><span class="line">                fileExists = <span class="literal">true</span>;</span><br><span class="line">                System.out.println(remoteFilePath + <span class="string">&quot; 已存在.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(remoteFilePath + <span class="string">&quot; 不存在.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 进行处理 */</span></span><br><span class="line">            <span class="keyword">if</span> ( !fileExists) &#123; <span class="comment">// 文件不存在，则上传</span></span><br><span class="line">                HDFSApi.copyFromLocalFile(conf, localFilePath, remoteFilePath);</span><br><span class="line">                System.out.println(localFilePath + <span class="string">&quot; 已上传至 &quot;</span> + remoteFilePath);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( choice.equals(<span class="string">&quot;overwrite&quot;</span>) ) &#123;    <span class="comment">// 选择覆盖</span></span><br><span class="line">                HDFSApi.copyFromLocalFile(conf, localFilePath, remoteFilePath);</span><br><span class="line">                System.out.println(localFilePath + <span class="string">&quot; 已覆盖 &quot;</span> + remoteFilePath);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( choice.equals(<span class="string">&quot;append&quot;</span>) ) &#123;   <span class="comment">// 选择追加</span></span><br><span class="line">                HDFSApi.appendToFile(conf, localFilePath, remoteFilePath);</span><br><span class="line">                System.out.println(localFilePath + <span class="string">&quot; 已追加至 &quot;</span> + remoteFilePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.fil1.txt 不存在情况下：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image010.png" alt="img"></p>
<p>2．file1.txt 存在情况下：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image012.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image014.png" alt="img"></p>
<p>（2） 从 HDFS 中下载指定文件，如果本地文件与要下载的文件名称相同，则自动对下载的文件重命名；</p>
<p><strong>Shell:</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image016.png" alt="img"></p>
<p><strong>Java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSApi2</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件到本地</span></span><br><span class="line"><span class="comment">     * 判断本地路径是否已存在，若已存在，则自动进行重命名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyToLocal</span><span class="params">(Configuration conf, String remoteFilePath, String localFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(localFilePath);</span><br><span class="line">        <span class="comment">/* 如果文件名存在，自动重命名(在文件名后面加上 _0, _1 ...) */</span></span><br><span class="line">        <span class="keyword">if</span> (f.exists()) &#123;</span><br><span class="line">            System.out.println(localFilePath + <span class="string">&quot; 已存在.&quot;</span>);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                f = <span class="keyword">new</span> <span class="title class_">File</span>(localFilePath + <span class="string">&quot;_&quot;</span> + i.toString());</span><br><span class="line">                <span class="keyword">if</span> (!f.exists()) &#123;</span><br><span class="line">                    localFilePath = localFilePath + <span class="string">&quot;_&quot;</span> + i.toString();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;将重新命名为: &quot;</span> + localFilePath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下载文件到本地</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">localPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(localFilePath);</span><br><span class="line">        fs.copyToLocalFile(remotePath, localPath);</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">localFilePath</span> <span class="operator">=</span> <span class="string">&quot;/usr/local/hadoop/2.txt&quot;</span>;    <span class="comment">// 本地路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteFilePath</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;    <span class="comment">// HDFS路径</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HDFSApi2.copyToLocal(conf, remoteFilePath, localFilePath);</span><br><span class="line">            System.out.println(<span class="string">&quot;下载完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1文件已存在：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image022.png" alt="img"></p>
<p>2文件不存在：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image024.png" alt="img"></p>
<p>（3） 将 HDFS 中指定文件的内容输出到终端中；</p>
<p><strong>Shell:</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image026.png" alt="img"></p>
<p><strong>Java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSApi3</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cat</span><span class="params">(Configuration conf, String remoteFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="type">FSDataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> fs.open(remotePath);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ( (line = d.readLine()) != <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        d.close();</span><br><span class="line">        in.close();</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteFilePath</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;    <span class="comment">// HDFS路径</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取文件: &quot;</span> + remoteFilePath);</span><br><span class="line">            HDFSApi3.cat(conf, remoteFilePath);</span><br><span class="line">            System.out.println(<span class="string">&quot;\n读取完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image030.png" alt="img"></p>
<p>（4） 显示 HDFS 中指定的文件的读写权限、大小、创建时间、路径等信息；</p>
<p><strong>Shell:</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image032.png" alt="img"></p>
<p><strong>Java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSApi4</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示指定文件的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ls</span><span class="params">(Configuration conf, String remoteFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        FileStatus[] fileStatuses = fs.listStatus(remotePath);</span><br><span class="line">        <span class="keyword">for</span> (FileStatus s : fileStatuses) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;路径: &quot;</span> + s.getPath().toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;权限: &quot;</span> + s.getPermission().toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;大小: &quot;</span> + s.getLen());</span><br><span class="line">            <span class="comment">/* 返回的是时间戳,转化为时间日期格式 */</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">timeStamp</span> <span class="operator">=</span> s.getModificationTime();</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> format.format(timeStamp);</span><br><span class="line">            System.out.println(<span class="string">&quot;时间: &quot;</span> + date);</span><br><span class="line">        &#125;</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteFilePath</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;    <span class="comment">// HDFS路径</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取文件信息: &quot;</span> + remoteFilePath);</span><br><span class="line">            HDFSApi4.ls(conf, remoteFilePath);</span><br><span class="line">            System.out.println(<span class="string">&quot;\n读取完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image037.png" alt="img"></p>
<p>（5） 给定 HDFS 中某一个目录，输出该目录下的所有文件的读写权限、大小、创建时间、路径等信息，如果该文件是目录，则递归输出该目录下所有文件相关信息；</p>
<p><strong>Shell:</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image039.png" alt="img"></p>
<p><strong>Java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSApi5</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示指定文件夹下所有文件的信息（递归）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lsDir</span><span class="params">(Configuration conf, String remoteDir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dirPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteDir);</span><br><span class="line">        <span class="comment">/* 递归获取目录下的所有文件 */</span></span><br><span class="line">        RemoteIterator&lt;LocatedFileStatus&gt; remoteIterator = fs.listFiles(dirPath, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">/* 输出每个文件的信息 */</span></span><br><span class="line">        <span class="keyword">while</span> (remoteIterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">FileStatus</span> <span class="variable">s</span> <span class="operator">=</span> remoteIterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;路径: &quot;</span> + s.getPath().toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;权限: &quot;</span> + s.getPermission().toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;大小: &quot;</span> + s.getLen());</span><br><span class="line">            <span class="comment">/* 返回的是时间戳,转化为时间日期格式 */</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">timeStamp</span> <span class="operator">=</span> s.getModificationTime();</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> format.format(timeStamp);</span><br><span class="line">            System.out.println(<span class="string">&quot;时间: &quot;</span> + date);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteDir</span> <span class="operator">=</span> <span class="string">&quot;/user/hadoop&quot;</span>;    <span class="comment">// HDFS路径</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;(递归)读取目录下所有文件的信息: &quot;</span> + remoteDir);</span><br><span class="line">            HDFSApi5.lsDir(conf, remoteDir);</span><br><span class="line">            System.out.println(<span class="string">&quot;读取完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image045.png" alt="img"></p>
<p>（6） 提供一个 HDFS 内的文件的路径，对该文件进行创建和删除操作。如果文件所在目录不存在，则自动创建目录；</p>
<p><strong>Shell:</strong></p>
<p>创建：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image047.png" alt="img"></p>
<p>删除：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image049.png" alt="img"></p>
<p><strong>Java:</strong></p>
<p>1自动创建目录文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSApi6</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断路径是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Configuration conf, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="keyword">return</span> fs.exists(<span class="keyword">new</span> <span class="title class_">Path</span>(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">mkdir</span><span class="params">(Configuration conf, String remoteDir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dirPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteDir);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> fs.mkdirs(dirPath);</span><br><span class="line">        fs.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">touchz</span><span class="params">(Configuration conf, String remoteFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="type">FSDataOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> fs.create(remotePath);</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">rm</span><span class="params">(Configuration conf, String remoteFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> fs.delete(remotePath, <span class="literal">false</span>);</span><br><span class="line">        fs.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteFilePath</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;    <span class="comment">// HDFS路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteDir</span> <span class="operator">=</span> <span class="string">&quot;/user/hadoop&quot;</span>;    <span class="comment">// HDFS路径对应的目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* 判断路径是否存在，存在则删除，否则进行创建 */</span></span><br><span class="line">            <span class="keyword">if</span> ( HDFSApi6.test(conf, remoteFilePath) ) &#123;</span><br><span class="line">                HDFSApi6.rm(conf, remoteFilePath); <span class="comment">// 删除</span></span><br><span class="line">                System.out.println(<span class="string">&quot;删除路径: &quot;</span> + remoteFilePath);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ( !HDFSApi6.test(conf, remoteDir) ) &#123; <span class="comment">// 若目录不存在，则进行创建</span></span><br><span class="line">                    HDFSApi6.mkdir(conf, remoteDir);</span><br><span class="line">                    System.out.println(<span class="string">&quot;创建文件夹: &quot;</span> + remoteDir);</span><br><span class="line">                &#125;</span><br><span class="line">                HDFSApi6.touchz(conf, remoteFilePath);</span><br><span class="line">                System.out.println(<span class="string">&quot;创建路径: &quot;</span> + remoteFilePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image057.png" alt="img"></p>
<p>2删除目录：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image059.png" alt="img"></p>
<p>（7） 提供一个 HDFS 的目录的路径，对该目录进行创建和删除操作。创建目录时，如果目录文件所在目录不存在，则自动创建相应目录；删除目录时，由用户指定当该目录不为空时是否还删除该目录；</p>
<p><strong>Shell:</strong></p>
<p>\1.   删除文件：</p>
<p>\2.   <img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image061.png" alt="img"></p>
<p>\3.   创建目录：</p>
<p>\4.   <img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image063.png" alt="img"></p>
<p><strong>Java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSApi7</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断路径是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Configuration conf, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="keyword">return</span> fs.exists(<span class="keyword">new</span> <span class="title class_">Path</span>(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断目录是否为空</span></span><br><span class="line"><span class="comment">     * true: 空，false: 非空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isDirEmpty</span><span class="params">(Configuration conf, String remoteDir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dirPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteDir);</span><br><span class="line">        RemoteIterator&lt;LocatedFileStatus&gt; remoteIterator = fs.listFiles(dirPath, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> !remoteIterator.hasNext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">mkdir</span><span class="params">(Configuration conf, String remoteDir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dirPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteDir);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> fs.mkdirs(dirPath);</span><br><span class="line">        fs.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">rmDir</span><span class="params">(Configuration conf, String remoteDir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dirPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteDir);</span><br><span class="line">        <span class="comment">/* 第二个参数表示是否递归删除所有文件 */</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> fs.delete(dirPath, <span class="literal">true</span>);</span><br><span class="line">        fs.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteDir</span> <span class="operator">=</span> <span class="string">&quot;/user/hadoop/dir1/dir2&quot;</span>;    <span class="comment">// HDFS目录</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">forceDelete</span> <span class="operator">=</span> <span class="literal">false</span>;  <span class="comment">// 是否强制删除</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* 判断目录是否存在，不存在则创建，存在则删除 */</span></span><br><span class="line">            <span class="keyword">if</span> ( !HDFSApi7.test(conf, remoteDir) ) &#123;</span><br><span class="line">                HDFSApi7.mkdir(conf, remoteDir); <span class="comment">// 创建目录</span></span><br><span class="line">                System.out.println(<span class="string">&quot;创建目录: &quot;</span> + remoteDir);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ( HDFSApi7.isDirEmpty(conf, remoteDir) || forceDelete ) &#123; <span class="comment">// 目录为空或强制删除</span></span><br><span class="line">                    HDFSApi7.rmDir(conf, remoteDir);</span><br><span class="line">                    System.out.println(<span class="string">&quot;删除目录: &quot;</span> + remoteDir);</span><br><span class="line">                &#125; <span class="keyword">else</span>  &#123; <span class="comment">// 目录不为空</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;目录不为空，不删除: &quot;</span> + remoteDir);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.删除目录：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image069.png" alt="img"></p>
<p>2.创建目录：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image071.png" alt="img"></p>
<p>（8） 向 HDFS 中指定的文件追加内容，由用户指定内容追加到原有文件的开头或结尾；</p>
<p><strong>Shell:</strong></p>
<p>追加到结尾：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image073.png" alt="img"></p>
<p>追加到原文件的开头，在 HDFS 中不存在与这种操作对应的命令，因此，无法使用一条<br> 命令来完成。可以先移动到本地进行操作，再进行上传覆盖，具体命令如下：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image075.png" alt="img"></p>
<p><strong>Java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSApi8</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断路径是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Configuration conf, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="keyword">return</span> fs.exists(<span class="keyword">new</span> <span class="title class_">Path</span>(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 追加文本内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">appendContentToFile</span><span class="params">(Configuration conf, String content, String remoteFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="comment">/* 创建一个文件输出流，输出的内容将追加到文件末尾 */</span></span><br><span class="line">        <span class="type">FSDataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> fs.append(remotePath);</span><br><span class="line">        out.write(content.getBytes());</span><br><span class="line">        out.close();</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 追加文件内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">appendToFile</span><span class="params">(Configuration conf, String localFilePath, String remoteFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="comment">/* 创建一个文件读入流 */</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(localFilePath);</span><br><span class="line">        <span class="comment">/* 创建一个文件输出流，输出的内容将追加到文件末尾 */</span></span><br><span class="line">        <span class="type">FSDataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> fs.append(remotePath);</span><br><span class="line">        <span class="comment">/* 读写文件内容 */</span></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ( (read = in.read(data)) &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">            out.write(data, <span class="number">0</span>, read);</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动文件到本地</span></span><br><span class="line"><span class="comment">     * 移动后，删除源文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">moveToLocalFile</span><span class="params">(Configuration conf, String remoteFilePath, String localFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">localPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(localFilePath);</span><br><span class="line">        fs.moveToLocalFile(remotePath, localPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">touchz</span><span class="params">(Configuration conf, String remoteFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="type">FSDataOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> fs.create(remotePath);</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;dfs.client.block.write.replace-datanode-on-failure.policy&quot;</span>, <span class="string">&quot;NEVER&quot;</span>);</span><br><span class="line">        conf.setBoolean(<span class="string">&quot;dfs.client.block.write.replace-datanode-on-failure.enabled&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteFilePath</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;    <span class="comment">// HDFS文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;新追加的内容\n&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> <span class="string">&quot;after&quot;</span>;      <span class="comment">//追加到文件末尾</span></span><br><span class="line"><span class="comment">//    String choice = &quot;before&quot;;    // 追加到文件开头</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* 判断文件是否存在 */</span></span><br><span class="line">            <span class="keyword">if</span> ( !HDFSApi.test(conf, remoteFilePath) ) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件不存在: &quot;</span> + remoteFilePath);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ( choice.equals(<span class="string">&quot;after&quot;</span>) ) &#123; <span class="comment">// 追加在文件末尾</span></span><br><span class="line">                    HDFSApi8.appendContentToFile(conf, content, remoteFilePath);</span><br><span class="line">                    System.out.println(<span class="string">&quot;已追加内容到文件末尾&quot;</span> + remoteFilePath);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( choice.equals(<span class="string">&quot;before&quot;</span>) )  &#123; <span class="comment">// 追加到文件开头</span></span><br><span class="line">                    <span class="comment">/* 没有相应的api可以直接操作，因此先把文件移动到本地*/</span></span><br><span class="line">                    <span class="comment">/*创建一个新的HDFS，再按顺序追加内容 */</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">localTmpPath</span> <span class="operator">=</span> <span class="string">&quot;/user/xusheng/tmp.txt&quot;</span>;</span><br><span class="line">                    <span class="comment">// 移动到本地</span></span><br><span class="line">                    HDFSApi8.moveToLocalFile(conf, remoteFilePath, localTmpPath);</span><br><span class="line">                    <span class="comment">// 创建一个新文件</span></span><br><span class="line">                    HDFSApi8.touchz(conf, remoteFilePath);</span><br><span class="line">                    <span class="comment">// 先写入新内容</span></span><br><span class="line">                    HDFSApi8.appendContentToFile(conf, content, remoteFilePath);</span><br><span class="line">                    <span class="comment">// 再写入原来内容</span></span><br><span class="line">                    HDFSApi.appendToFile(conf, localTmpPath, remoteFilePath);</span><br><span class="line">                    System.out.println(<span class="string">&quot;已追加内容到文件开头: &quot;</span> + remoteFilePath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image085.png" alt="img"></p>
<p>（9） 删除 HDFS 中指定的文件；</p>
<p><strong>Shell:</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image087.png" alt="img"></p>
<p><strong>Java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSApi9</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">rm</span><span class="params">(Configuration conf, String remoteFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> fs.delete(remotePath, <span class="literal">false</span>);</span><br><span class="line">        fs.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteFilePath</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;    <span class="comment">// HDFS文件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ( HDFSApi9.rm(conf, remoteFilePath) ) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件删除: &quot;</span> + remoteFilePath);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;操作失败（文件不存在或删除失败）&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image091.png" alt="img"></p>
<p>（10） 在 HDFS 中，将文件从源路径移动到目的路径。</p>
<p><strong>Shell:</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image093.png" alt="img"></p>
<p><strong>Java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSApi10</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">mv</span><span class="params">(Configuration conf, String remoteFilePath, String remoteToFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">srcPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dstPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteToFilePath);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> fs.rename(srcPath, dstPath);</span><br><span class="line">        fs.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteFilePath</span> <span class="operator">=</span> <span class="string">&quot;hdfs:///user/hadoop/haha/1.txt&quot;</span>;    <span class="comment">// 源文件HDFS路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteToFilePath</span> <span class="operator">=</span> <span class="string">&quot;hdfs:///user/hadoop/dir1/new.txt&quot;</span>;    <span class="comment">// 目的HDFS路径</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ( HDFSApi10.mv(conf, remoteFilePath, remoteToFilePath) ) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;将文件 &quot;</span> + remoteFilePath + <span class="string">&quot; 移动到 &quot;</span> + remoteToFilePath);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;操作失败(源文件不存在或移动失败)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image097.png" alt="img"></p>
<p>（二）编程实现一个类“MyFSDataInputStream”，该类继承“org.apache.hadoop.fs.FSDataInputStream”，要求如下：实现按行读取 HDFS 中指定文件的方法“readLine()”，如果读到文件末尾，则返回空，否则返回文件一行的文本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFSDataInputStream</span> <span class="keyword">extends</span> <span class="title class_">FSDataInputStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFSDataInputStream</span><span class="params">(InputStream in)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现按行读取</span></span><br><span class="line"><span class="comment">     * 每次读入一个字符，遇到&quot;\n&quot;结束，返回一行内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readline</span><span class="params">(BufferedReader br)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">char</span>[] data = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">off</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 循环执行时，br 每次会从上一次读取结束的位置继续读取</span></span><br><span class="line"><span class="comment">//因此该函数里，off 每次都从0开始</span></span><br><span class="line">        <span class="keyword">while</span> ( (read = br.read(data, off, <span class="number">1</span>)) != -<span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (String.valueOf(data[off]).equals(<span class="string">&quot;\n&quot;</span>) ) &#123;</span><br><span class="line">                off += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            off += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (off &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cat</span><span class="params">(Configuration conf, String remoteFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">remotePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFilePath);</span><br><span class="line">        <span class="type">FSDataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> fs.open(remotePath);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ( (line = MyFSDataInputStream.readline(br)) != <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">        in.close();</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.default.name&quot;</span>,<span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteFilePath</span> <span class="operator">=</span> <span class="string">&quot;/user/hadoop/1.txt&quot;</span>;    <span class="comment">// HDFS路径</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MyFSDataInputStream.cat(conf, remoteFilePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image103.png" alt="img"></p>
<p>（ 三 ） 查 看 Java 帮 助 手 册 或 其 它 资 料 ， 用 “java.net.URL” 和 “org.apache.hadoop.fs.FsURLStreamHandlerFactory”编程完成输出HDFS中指定文件的文本到终端中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSApi11</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        URL.setURLStreamHandlerFactory(<span class="keyword">new</span> <span class="title class_">FsUrlStreamHandlerFactory</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteFilePath</span> <span class="operator">=</span> <span class="string">&quot;hdfs://localhost:9000//user/hadoop/1.txt&quot;</span>;    <span class="comment">// HDFS文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">/* 通过URL对象打开数据流，从中读取数据 */</span></span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">URL</span>(remoteFilePath).openStream();</span><br><span class="line">            IOUtils.copyBytes(in,System.out,<span class="number">4096</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            IOUtils.closeStream(in);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image107.png" alt="img"></p>
<h1 id="4-实验总结"><a href="#4-实验总结" class="headerlink" title="4.实验总结"></a>4.实验总结</h1><p><strong>（<strong><strong>1</strong></strong>）实验完成情况</strong></p>
<p>实验完成率：100%</p>
<p><strong>（<strong><strong>2</strong></strong>）出现的问题与解决方案</strong></p>
<p>问题1：对Java 语言不熟悉</p>
<p>解决：参考菜鸟教程<a href="https://www.runoob.com/java/java-tutorial.html">https://www.runoob.com/java/java-tutorial.html</a> 中的Java 教程，对Java 的语法等有了一个大致的了解</p>
<p>问题2：程序出现如下报错：</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment2/clip_image109.jpg" alt="img"></p>
<p>java.io.IOException: Failed to replace a bad datanode on the existing pipeline due to no more good datanodes being available to try. (Nodes: current&#x3D;[DatanodeInfoWithStorage[127.0.0.1:9866,DS-d6371aa4-2270-413c-92b7-5ca51a9b6a28,DISK]], original&#x3D;[DatanodeInfoWithStorage[127.0.0.1:9866,DS-d6371aa4-2270-413c-92b7-5ca51a9b6a28,DISK]]). The current failed datanode replacement policy is DEFAULT, and a client may configure this via ‘dfs.client.block.write.replace-datanode-on-failure.policy’ in its configuration.</p>
<p>解决： 在Java程序中增加下面两行：</p>
<p>&#x2F;&#x2F;Configuration conf &#x3D; new Configuration();</p>
<p>conf.set(“dfs.client.block.write.replace-datanode-on-failure.policy”, “NEVER”);</p>
<p>conf.setBoolean(“dfs.client.block.write.replace-datanode-on-failure.enabled”, true);</p>
<p>问题3：eclipse运行java程序时出现错误</p>
<p>Class org.apache.hadoop.hdfs.DistributedFileSystem not found</p>
<p>解决：查阅资料后，将hadoop-hdfs-client-3.1.1.jar导入后，成功运行</p>
<p>原因：Class org.<a href="https://so.csdn.net/so/search?q=apache&spm=1001.2101.3001.7020">apache</a>.hadoop.hdfs.DistributedFileSystem由原本的hadoop-hdfs.2.7.1.jar中迁移到了hadoop-hdfs-client-3.1.1.jar 或更高版本</p>
<p>问题4：Syntax error on token “*”,;expected after this token</p>
<p>解决：Java语法错误，在报错处加;（分号）即可；</p>
]]></content>
      <categories>
        <category>大数据技术原理与应用</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据技术原理与应用实验1熟悉常用的Linux操作和Hadoop操作</title>
    <url>/2023/04/05/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C1%E7%86%9F%E6%82%89%E5%B8%B8%E7%94%A8%E7%9A%84Linux%E6%93%8D%E4%BD%9C%E5%92%8CHadoop%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="实验1-熟悉常用的Linux操作和Hadoop操作"><a href="#实验1-熟悉常用的Linux操作和Hadoop操作" class="headerlink" title="实验1 熟悉常用的Linux操作和Hadoop操作"></a>实验1 熟悉常用的Linux操作和Hadoop操作</h1><h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1.实验目的"></a>1.实验目的</h1><p>Hadoop运行在Linux系统上，因此，需要学习实践一些常用的Linux命令。本实验旨在熟悉常用的Linux操作和Hadoop操作，为顺利开展后续其他实验奠定基础。</p>
<h1 id="2-实验平台"><a href="#2-实验平台" class="headerlink" title="2.实验平台"></a>2.实验平台</h1><p>（1）操作系统： Ubuntu-22.04.2-desktop-amd64</p>
<p>（2）Hadoop版本：3.1.3</p>
<h1 id="3-实验步骤与结果"><a href="#3-实验步骤与结果" class="headerlink" title="3.实验步骤与结果"></a>3.实验步骤与结果</h1><p>*<em>1.<strong><strong>熟悉常用的</strong></strong>Linux</em>*<strong>操作</strong></p>
<p>1）cd命令：切换目录</p>
<p>（1）   切换到目录“&#x2F;usr&#x2F;local”</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image001.png" alt="img"></p>
<p>（2）   切换到当前目录的上一级目录</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image002.png" alt="img"></p>
<p>（3）   切换到当前登录Linux系统的用户的自己的主文件夹</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image003.png" alt="img"></p>
<p>2）ls命令：查看文件与目录</p>
<p>查看目录“&#x2F;usr”下的所有文件和目录</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image004.png" alt="img"></p>
<p>3）mkdir命令：新建目录</p>
<p>（1）进入“&#x2F;tmp”目录，创建一个名为“a”的目录，并查看“&#x2F;tmp”目录下已经存在哪些目录</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image006.png" alt="img"></p>
<p>（2）进入“&#x2F;tmp”目录，创建目录“a1&#x2F;a2&#x2F;a3&#x2F;a4”</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image008.png" alt="img"></p>
<p>4）rmdir命令：删除空的目录</p>
<p>（1）将上面创建的目录a（在“&#x2F;tmp”目录下面）删除</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image010.png" alt="img"></p>
<p>（2）删除上面创建的目录“a1&#x2F;a2&#x2F;a3&#x2F;a4” （在“&#x2F;tmp”目录下面），然后查看“&#x2F;tmp”目录下面存在哪些目录</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image012.png" alt="img"></p>
<p>5）cp命令：复制文件或目录</p>
<p>（1）将当前用户的主文件夹下的文件.bashrc复制到目录“&#x2F;usr”下，并重命名为bashrc1</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image013.png" alt="img"></p>
<p>（2）在目录“&#x2F;tmp”下新建目录test，再把这个目录复制到“&#x2F;usr”目录下</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image015.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image016.png" alt="img"></p>
<p>6）mv命令：移动文件与目录，或更名</p>
<p>（1）将“&#x2F;usr”目录下的文件bashrc1移动到“&#x2F;usr&#x2F;test”目录下</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image017.png" alt="img"></p>
<p>（2）将“&#x2F;usr”目录下的test目录重命名为test2</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image018.png" alt="img"></p>
<p>7）rm命令：移除文件或目录</p>
<p>（1）将“&#x2F;usr&#x2F;test2”目录下的bashrc1文件删除</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image019.png" alt="img"></p>
<p>（2）将“&#x2F;usr”目录下的test2目录删除</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image020.png" alt="img"></p>
<p>8）cat命令：查看文件内容</p>
<p>查看当前用户主文件夹下的.bashrc文件内容</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image022.jpg" alt="img"></p>
<p>9）tac命令：反向查看文件内容</p>
<p>反向查看当前用户主文件夹下的.bashrc文件的内容</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image024.png" alt="img"></p>
<p>10）more命令：一页一页翻动查看</p>
<p>翻页查看当前用户主文件夹下的.bashrc文件的内容</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image026.jpg" alt="img"></p>
<p>11）head命令：取出前面几行</p>
<p>（1）查看当前用户主文件夹下.bashrc文件内容前20行</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image028.jpg" alt="img"></p>
<p>（2）查看当前用户主文件夹下.bashrc文件内容，后面50行不显示，只显示前面几行</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image030.jpg" alt="img"></p>
<p>12）tail命令：取出后面几行</p>
<p>（1）查看当前用户主文件夹下.bashrc文件内容最后20行</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image032.jpg" alt="img"></p>
<p>（2）查看当前用户主文件夹下.bashrc文件内容，并且只列出50行以后的数据</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image034.jpg" alt="img"></p>
<p>13）touch命令：修改文件时间或创建新文件</p>
<p>（1）在“&#x2F;tmp”目录下创建一个空文件hello，并查看文件时间</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image035.png" alt="img"></p>
<p>（2）修改hello文件，将文件时间整为5天前</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image036.png" alt="img"></p>
<p>14）chown命令：修改文件所有者权限</p>
<p>将hello文件所有者改为root帐号，并查看属性</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image037.png" alt="img"></p>
<p>15）find命令：文件查找</p>
<p>找出主文件夹下文件名为.bashrc的文件</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image038.png" alt="img"></p>
<p>16）tar命令：压缩命令</p>
<p>（1）在根目录“&#x2F;”下新建文件夹test，然后在根目录“&#x2F;”下打包成test.tar.gz</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image040.png" alt="img"></p>
<p>（2）把上面的test.tar.gz压缩包，解压缩到“&#x2F;tmp”目录</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image042.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image044.png" alt="img"></p>
<p>17）grep命令：查找字符串</p>
<p>从“～&#x2F;.bashrc”文件中查找字符串’examples’</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image046.png" alt="img"></p>
<p>18）配置环境变量</p>
<p>（1）请在“～&#x2F;.bashrc”中设置，配置Java环境变量</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image047.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image048.png" alt="img"></p>
<p>（2）查看JAVA_HOME变量的值</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image049.png" alt="img"></p>
<p>*<em>2.<strong><strong>熟悉常用的</strong></strong>Hadoop</em>*<strong>操作</strong></p>
<p>（1）使用hadoop用户登录Linux系统，启动Hadoop（Hadoop的安装目录为“&#x2F;usr&#x2F;local&#x2F;hadoop”），为hadoop用户在HDFS中创建用户目录“&#x2F;user&#x2F;hadoop”</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image051.png" alt="img"></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image053.png" alt="img"></p>
<p>（2）接着在HDFS的目录“&#x2F;user&#x2F;hadoop”下，创建test文件夹，并查看文件列表</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image055.png" alt="img"></p>
<p>（3）将Linux系统本地的“～&#x2F;.bashrc”文件上传到HDFS的test文件夹中，并查看test</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image057.png" alt="img"></p>
<p>（4）   将HDFS文件夹test复制到Linux系统本地文件系统的“&#x2F;usr&#x2F;local&#x2F;hadoop”目录下</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image059.png" alt="img"></p>
<h1 id="4-实验总结"><a href="#4-实验总结" class="headerlink" title="4.实验总结"></a>4.实验总结</h1><p><strong>（<strong><strong>1</strong></strong>）实验完成情况</strong></p>
<p>实验完成率：100%</p>
<p><strong>（<strong><strong>2</strong></strong>）出现的问题与解决方案</strong></p>
<p>问题1：在安装虚拟机的时候遇到了版本界面和教程不适配，以及hadoop下载出错的问题。</p>
<p>解决：网上搜索使用VMware虚拟机安装Ubuntu20.04详细图文教程（链接<a href="https://blog.csdn.net/weixin_41805734/article/details/120698714?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167784061916800211556074%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167784061916800211556074&biz_id=0&utm_medium=distribute.wap_search_result.none-task-blog-2~all~top_positive~default-1-120698714-null-null.wap_search_all_course_earnings_v1&utm_term=vmware%E5%AE%89%E8%A3%85ubuntu%E6%95%99%E7%A8%8B&spm=1018.2118.3001.4187%EF%BC%89%EF%BC%8C%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E7%85%A7%E7%9D%80%E9%87%8C%E9%9D%A2%E7%9A%84%E6%AD%A5%E9%AA%A4%E5%81%9A%EF%BC%8C%E7%BB%93%E5%90%88MOOC%E4%B8%8A%EF%BC%8C%E6%9E%97%E5%AD%90%E9%9B%A8%E8%80%81%E5%B8%88%E7%9A%84%E5%AE%8C%E5%A4%87%E7%9A%84%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E7%9A%84%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88%E9%93%BE%E6%8E%A5https://www.icourse163.org/course/XMU-1002335004%EF%BC%89%EF%BC%8C%E5%9C%86%E6%BB%A1%E9%AB%98%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E4%BA%86%E5%AE%89%E8%A3%85%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82">https://blog.csdn.net/weixin_41805734/article/details/120698714?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167784061916800211556074%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167784061916800211556074&amp;biz_id=0&amp;utm_medium=distribute.wap_search_result.none-task-blog-2~all~top_positive~default-1-120698714-null-null.wap_search_all_course_earnings_v1&amp;utm_term=vmware%E5%AE%89%E8%A3%85ubuntu%E6%95%99%E7%A8%8B&amp;spm=1018.2118.3001.4187），一步一步照着里面的步骤做，结合MOOC上，林子雨老师的完备的大数据技术原理与应用的视频教程（链接https://www.icourse163.org/course/XMU-1002335004），圆满高效的解决了安装的问题。</a></p>
<p>问题2：使用虚拟机进行实验的时候出现VMware Workstation 17 频繁未响应的问题。</p>
<p>解决：我通过百度解决了问题，最后决定关闭qq，将qq快捷截图改成windows自带的shift+win+s的截图方式。同时采用快捷键ctrl+alt来将鼠标从虚拟机中切换到主电脑上，避免不必要的未响应问题。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image061.png" alt="img"></p>
<p>这里给出链接<a href="http://www.huwoo.net/2020/post-4036.html">http://www.huwoo.net/2020/post-4036.html</a></p>
<p>问题3：虚拟机与我的电脑之间文件的交换</p>
<p>解决： 采用SecureCRT 8.0软件。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image062.png" alt="img"></p>
<p>输入虚拟机的ip地址，然后依次填入hadoop账户的用户名和密码</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image064.png" alt="img"></p>
<p>最后在这个界面上</p>
<p>可以直接将左侧的文件拖动到右侧界面里面即可实现将我的电脑的文件上传到虚拟机里面。</p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/BigDataExperiment1/clip_image066.png" alt="img"></p>
]]></content>
      <categories>
        <category>大数据技术原理与应用</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>说再见</title>
    <url>/2023/04/04/%E8%AF%B4%E5%86%8D%E8%A7%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="说再见"><a href="#说再见" class="headerlink" title="说再见"></a>说再见</h1><p>（美化回忆没有意义，只会自欺欺人）</p>
<p>长话短说，我再也不踢足球了。包括一切对足球有关的东西，都不接触了。</p>
<p>理由也很简单，很真实。</p>
<p><u>足球在功利性上没用。</u></p>
<p>（学校杯赛我因为身体原因参加不了，计算机学院内部的院级比赛因为同队的院队队友不想参加，我也不参加了。</p>
<p>这样我就没有比赛踢了，所以平常的计算机学院每周一次的训练我也不必再去了。）</p>
<p><strong>写进博客里面，是希望自己能真正做到不接触，以此作为见证。</strong></p>
<p>下面是浅浅的记录我的”职业生涯”，含有大量足球术语和圈内话，全是自己的不成熟的牢骚，不想被影响心情的可以看到这里就结束了。</p>
<h2 id="Phase-I"><a href="#Phase-I" class="headerlink" title="Phase I"></a>Phase I</h2><p>小学踢过一点足球，有过接触。</p>
<p>但周围的小朋友都不熟，自己也不爱说话。因此就踢了一会。</p>
<h2 id="Phase-II"><a href="#Phase-II" class="headerlink" title="Phase II"></a>Phase II</h2><p>初中与认识的人一起跟着学校的体育教练训练，整个队伍的气氛很好，大家都其乐融融的。</p>
<p>我是选拔之后，留下来的唯一一个初一学生。其余的都是初二的。可能是因为喜欢足球，我进步得比较快。</p>
<p><em>比赛成绩</em></p>
<p><em>初二时代表嘉鱼县参加咸宁市第一届青少年校园足球联赛拿到亚军。</em></p>
<p><em>初二时代表咸宁市参加湖北省第一届青少年校园足球联赛拿到十六强。</em></p>
<p><em>初三时代表嘉鱼县参加咸宁市第二届青少年校园足球联赛拿到亚军。</em></p>
<p><em>初三时代表咸宁市参加湖北省第二届青少年校园足球联赛鄂东南赛区拿到第六名。</em></p>
<p>其实看到这里也就清楚了，我参加的是不入流的比赛。</p>
<p>加上体育教练其实是教篮球转行过来的业余教练，我并没有多厉害。</p>
<p>虽然足球一直都只是一个爱好，但是队友的陪伴，比赛的收获，让我深信我会一直踢下去。</p>
<p>（背景知识：我们能碰上这个风口，有人带我们训练，有人组织比赛，全都是响应国家那句“足球要从娃娃抓起”的号召。据我所知，从那句话开始，各种推广足球运动普及化大众化的文件如雨后春笋般纷纷涌出。全国各地每年的足球体育特长生的招生人数是原来的三倍，以及足球二级运动员的标准大大降低了。与此同时，每个省每个市都紧锣密鼓地开展着足球进校园的活动，以此为代表的就是第一届青少年校园足球联赛的开启。</p>
<p>没错，看到这你也多多少少猜到了。</p>
<p>与<strong>过去专业化的，让孩子早早的放弃学业，去读职业化的足球学校或是体校的道路</strong>不同，为了增加全国人民的足球热情，培养中国足球人口基数，国家开辟了一条<strong>全新的非职业化的校园业余足球普及推广赛道</strong>。</p>
<p>我们并没有放弃学业，对我们而言，足球只是一个兴趣爱好的选择。我们享受着更多更多校园足球资源喷涌带来的红利，从而有机会去接触业余的足球训练，参加业余性质的足球比赛。</p>
<p>）</p>
<p>留下来的记忆比较深的只有初三的班级五人制足球赛，有着集体荣誉感的加持，为班级为同学争名次总是让人更加开心。</p>
<p>很可惜班级五人制足球赛只拿到了第二名，射手榜我也只是排在第三。但对我而言，已经足够快乐了。</p>
<h3 id="Foreshadowing"><a href="#Foreshadowing" class="headerlink" title="Foreshadowing"></a>Foreshadowing</h3><p>初中的尾声。</p>
<p>被鄂南高中提前录取的时候。</p>
<p>我的体育教练：</p>
<p>​	“你要考上鄂南高中，鄂南高中足球特别厉害，去年他们拿了湖北省第一届青少年校园足球高中联赛第六名”</p>
<p>我的数学老师：</p>
<p>​	”高中就别踢足球了，想要成绩好，就要专心，专注于学习。足球可以放一边，大学再继续。“</p>
<p>我的物理老师：</p>
<p>​	”恭喜你！不过高中就别踢足球了，大学再继续。“</p>
<p>……</p>
<p>有很多很多声音，我心里也清楚，高中我不会再继续了。顶多体育课踢足球放松放松。</p>
<h2 id="Phase-III"><a href="#Phase-III" class="headerlink" title="Phase III"></a>Phase III</h2><p>上了高中，我也确实没有再花很多时间在足球上面。</p>
<p>也就平常体育课踢一踢，平常和同学们聊一聊。</p>
<p>在野球场上碰到了初中参加咸宁市青少年校园足球联赛碰到的对手，可谓不打不相识。</p>
<p>但是在高中那么枯燥的环境下，就算不那么有趣的东西也会变得非常有趣。</p>
<p>或多或少还是有影响的，这是无法否认的。</p>
<h3 id="又入”歧途“"><a href="#又入”歧途“" class="headerlink" title="又入”歧途“"></a>又入”歧途“</h3><p>高一<strong>班级足球比赛拿了第三名</strong>。这也成为鄂南高中足球教练请我进入足球队参加比赛的契机。</p>
<p>（背景知识：</p>
<p>我记得班级足球比赛第一场前一天晚上，我激动的睡不着。过了两年再次踢比赛让我激动的睡不着觉，大概是两点我才睡着。</p>
<p>后来进了足球队，我才知道，如果有射手榜的话，这次比赛我是射手榜第二名。</p>
<p>）</p>
<p>高二的时候，鄂南高中足球教练找到我班主任说好话，希望我能代表鄂南高中足球队，参加湖北省青少年校园足球高中联赛。</p>
<p>说我不开心是不可能的。但是要整整两周出去宜昌踢比赛，不能上课。</p>
<p>班主任同意了，我家长没同意。虽然闹了一点矛盾，但我还是留在学校继续上课了。</p>
<p>（后来回想，这是对的决策）</p>
<p>不过足球教练当时告诉我，虽然你这次湖北省省级的比赛没法参加，但是一个月后在咸宁本地举行的咸宁市青少年校园足球高中联赛补赛你可以参加，这次比赛不会影响学业，就在本地举办。</p>
<p>终于这一次我的家长也同意。</p>
<p>我们拿到了<strong>咸宁市青少年校园足球高中联赛补赛第三名</strong>。</p>
<p>（因为太久没运动，缺乏锻炼，同时我与队友的磨合也不够，我这次比赛的表现平平。只是作为首发打满了所有比赛，没有评为队内最佳球员。）</p>
<p>整体而言，如果把踢足球的时间拿来学习，毫无疑问我成绩会好一点。</p>
<p>但是对当时的我而言，这并不是亏本买卖。踢足球很开心很值得，成绩的起伏最主要的因素不是足球，而是另外一个。（这里不细讲）</p>
<h3 id="遗憾的尾巴"><a href="#遗憾的尾巴" class="headerlink" title="遗憾的尾巴"></a>遗憾的尾巴</h3><p>高考之前，足球教练跟我讲了二十年前，一个同样是一班的学生，他也是足球队的，最后考上北航的故事。希望我也能读。</p>
<p>高考结束后，校外又碰上足球教练，他关心的问我有把握上哪所大学，我支支吾吾的蒙混过去了。</p>
<p>第二天足球队队友找我，说我们这一届足球队有一场毕业散伙饭，是教练组织的，让我也去参加。我当时心情低落，婉拒了。</p>
<p>回嘉鱼县后，在体育场碰到初中的足球教练，他也问我考了多少分，我也蒙混过去了。</p>
<h3 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h3><p>高考完的暑假，很孤单。初中的队友找到我，带着我踢球忘记痛苦。</p>
<p><strong>嘉鱼县业余七人制成人足球比赛第三名</strong></p>
<p><img src="https://bradtorresblog.oss-cn-beijing.aliyuncs.com/ShuoZaiJian/psc.jpg" alt="psc"></p>
<h2 id="Phase-IV"><a href="#Phase-IV" class="headerlink" title="Phase IV"></a>Phase IV</h2><p>上了大学，因为疫情，校内并没有多少体育活动，足球赛也是。</p>
<p>就算有足球赛，我因为身体原因也没有参加。</p>
<p>我只是跟着计算机足球队训练，作为锻炼身体的手段。不过光是大家在一起训练有说有笑的，就很好了。</p>
<p>至少一开始是这样的。</p>
<p>后来大家渐渐的都很忙，我也是。</p>
<p>足球带来的快乐没有了。就算单纯的作为健身方式，也远远比不上我自己跑步或者是力量训练。</p>
<p>同时自己考研的压力增大了。</p>
<p>在这个时刻，<strong>功利主义地说，足球的性价比变得非常低。</strong></p>
<p>期间计算机原足球队队长想让我当下一届队长，我婉拒了。</p>
<p>我把足球的时间分出来一部分进行我自己的锻炼。我的锻炼是一种更加高效的减肥塑形方法。</p>
<p><strong>到现在所有到比赛都参加不了，我也就没有继续训练，继续接触足球的动力了。包括足球比赛集锦，足球资讯我也不会再看了。</strong> </p>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>其实这本来就是爱好，喜欢不喜欢坚持不坚持都是我个人的抉择，怎么样都无所谓的。</p>
<p>本来都无所谓的。我的选择无可厚非，无可指责。</p>
<p>只是陪伴我这么久，放弃真的不简单。</p>
<p>放弃足球是一个毋庸置疑的正确的选择。当局者迷，旁观者清。冷静下来理智客观的衡量之后，毫无疑问，我只有放弃一个选择。</p>
<p><em>到此为止，再见已经说完了。</em></p>
<p>（补充背景知识：</p>
<ol>
<li>可能是因为南北足球风格的差异，北方的足球风格更偏向激烈的身体对抗，非常非常的吃身体素质。技术根本就不存在。因此各种各样的足球活动都是十一人制的，是相当累的。对我而言很不适应，我身体差的很多，尤其是正式比赛，全都是新疆壮汉和留学生，我们的冠军也永远是国际交流学院。汉族人念书的身体差的太多太多了。</li>
<li>有一个考到北京的学弟跟我讲，他们大一直接踢五人制。我心想，北京也算是北方吧，怎么五人制这么如同小孩子过家家一样，一场踢下来汗都不会留的比赛还让大一学生踢。至少得是七人制吧。还有留在武汉的同学，他们也天天踢五人制比赛和七人制比赛，极少听到他们组织十一人制的。或许跟他们一样，我还能坚持足球吧。</li>
<li>说到足球，我本质上不过是吃了“足球要从娃娃抓起”这个政策的红利。我没有什么真本事，也没什么天赋。现在能明显感觉到篮球更吃香，如果我打篮球的话，会不会不会像现在这么矮呢？？这都是后话了。</li>
<li>这篇文章都是我的胡言乱语。有意见不同的就当我是错的就行了。</li>
</ol>
<p>）</p>
]]></content>
      <categories>
        <category>日记间隙随笔</category>
      </categories>
      <tags>
        <tag>生活碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>早睡早起落实</title>
    <url>/2023/04/01/%E6%97%A9%E7%9D%A1%E6%97%A9%E8%B5%B7%E8%90%BD%E5%AE%9E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="简易温和实操版本："><a href="#简易温和实操版本：" class="headerlink" title="简易温和实操版本："></a>简易温和实操版本：</h1><h2 id="思想指导："><a href="#思想指导：" class="headerlink" title="思想指导："></a>思想指导：</h2><p>早起相当于把晚上那些劣质废铁时间，转化成早上的黄金时间，变相增加了一天的有效工作时间。</p>
<p>按部就班、具体地落实这些有关于早起的仪式&#x2F;习惯之后，就可以不痛苦地早起了。我不提倡以鸡血、动力、信念等来苦苦强撑着早起，这种状态是不可持续的，鸡血很容易耗尽，人也就随之废了。</p>
<h2 id="仪式行动："><a href="#仪式行动：" class="headerlink" title="仪式行动："></a>仪式行动：</h2><ol>
<li>睡前不做刺激性活动，比如玩游戏，看时间过长的电影。</li>
<li>和舍友沟通好，约定个熄灯时间。（首先是和对方沟通好，设定个大家都接受的静音熄灯时间，其次，你一定要亲自履行这规则，到时间自己就熄灯上床，不要等别人去履行关灯静音。否则你会给别人错觉，“他还没睡觉呢，我们继续吵”，而你自己会给自己借口，“不是我不想早睡，是环境不允许”。</li>
<li>购买耳塞眼罩装备，可以解决键盘、鼠标的声音和室内亮光。（有眼罩一定带眼罩，这样成了一种习惯，就算不是习惯，这也是一种仪式感，潜意识里面提醒自己睡觉。论证：我不觉得自己养成了习惯，但是昨天没带眼罩，睡很久睡不着，不得不说，带上眼罩就是有仪式感，让自己从学习分区进入休息分区，非常高效地完成了切换自己状态的作用。）</li>
<li>采用振动手表，在手机闹钟之前。这样可以让自己在手机闹钟响的时候立刻关掉，达到不吵室友又能让自己清醒的作用。</li>
</ol>
<h2 id="后续更新："><a href="#后续更新：" class="headerlink" title="后续更新："></a>后续更新：</h2><p>后续改进的一系列操作涉及隐私，故不在博客更新早睡早起版本了。</p>
]]></content>
      <categories>
        <category>日记间隙随笔</category>
      </categories>
      <tags>
        <tag>生活碎碎念</tag>
        <tag>计划</tag>
      </tags>
  </entry>
</search>
